{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./css/App.css';import'./css/Treaties.css';import'./css/Empires.css';import'./css/Boards.css';import'./css/Accounts.css';import{getNationPairs}from'./utils/getNationPairs';import TreatyDialog from'./components/TreatyDialog';import TreatyView from'./components/TreatyView';import EmpireEditPanel from'./components/EmpireEditPanel';import EmpirePanel from'./components/EmpirePanel';import MenuDropdown from'./components/MenuDropdown';import{handleCreateAccount,handleCreateEmpire,handleRenameAccount,handleChangePassword,handleDeleteAccount,handleDeleteEmpire}from'./handlers/handlers';import{useBurgerMenu}from'./components/BurgerMenu';import RoadmapTab from'./components/RoadmapTab';import{TREATY_STATUSES}from'./utils/treatyStatuses';import{TREATY_STATUS_OPTIONS}from'./utils/treatyStatusOptions';import AccountList from'./components/AccountList';import MessageList from'./components/MessageList';import EmpireList from'./components/EmpireList';import TreatyList from'./components/TreatyList';import SearchSortBar from'./components/SearchSortBar';import{ErrorMessage,LoadingMessage}from'./components/Messages';import Dropdown from'./components/Dropdown';import cutOffDotter from'./utils/cutOffDotter';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[empires,setEmpires]=useState([]);const[selected,setSelected]=useState(()=>{const saved=localStorage.getItem('stellarisSelectedBoard');return saved?saved:null;});const[messages,setMessages]=useState({});const[text,setText]=useState('');const pollingRef=useRef();const messagesEndRef=useRef(null);const[accounts,setAccounts]=useState({});const[accountsLoaded,setAccountsLoaded]=useState(false);const[account,setAccount]=useState(()=>{const saved=localStorage.getItem('stellarisAccount');return saved?JSON.parse(saved):null;});const[loginUser,setLoginUser]=useState('');const[loginPass,setLoginPass]=useState('');const[error,setError]=useState('');const[activeTab,setActiveTab]=useState('channels');const[empirePage,setEmpirePage]=useState(null);const[editEmpire,setEditEmpire]=useState(null);const[empireInfo,setEmpireInfo]=useState({});// Account creation and management\nconst[newAccountName,setNewAccountName]=useState('');const[newAccountPass,setNewAccountPass]=useState('');const[accountError,setAccountError]=useState('');const[accountSuccess,setAccountSuccess]=useState('');const[accountsTabLoading,setAccountsTabLoading]=useState(false);const[editAccount,setEditAccount]=useState(null);const[editAccountName,setEditAccountName]=useState('');const[editAccountPass,setEditAccountPass]=useState('');const[editAccountError,setEditAccountError]=useState('');const[editAccountLoading,setEditAccountLoading]=useState(false);// Manage Empires tab\nconst[newEmpireName,setNewEmpireName]=useState('');const[newEmpireError,setNewEmpireError]=useState('');const[newEmpireLoading,setNewEmpireLoading]=useState(false);// --- Treaties State (NEW IMPLEMENTATION) ---\nconst[treaties,setTreaties]=useState([]);const[treatiesLoaded,setTreatiesLoaded]=useState(false);const[treatyDialog,setTreatyDialog]=useState({open:false,mode:null,data:null});const[treatyError,setTreatyError]=useState('');const[treatySaving,setTreatySaving]=useState(false);// --- Treaty JSON Editor State (GM only) ---\nconst[showTreatyJsonEditor,setShowTreatyJsonEditor]=useState(false);const[treatyJsonText,setTreatyJsonText]=useState('');const[treatyJsonError,setTreatyJsonError]=useState('');const[treatyJsonSaving,setTreatyJsonSaving]=useState(false);function openTreatyJsonEditor(){setTreatyJsonError('');setTreatyJsonSaving(false);// Load current treaties as JSON text\nfetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data=>{setTreatyJsonText(JSON.stringify(data,null,2));setShowTreatyJsonEditor(true);}).catch(()=>{setTreatyJsonText('[]');setShowTreatyJsonEditor(true);});}function closeTreatyJsonEditor(){setShowTreatyJsonEditor(false);setTreatyJsonError('');setTreatyJsonSaving(false);}function handleTreatyJsonChange(e){setTreatyJsonText(e.target.value);setTreatyJsonError('');}function handleTreatyJsonSubmit(e){e.preventDefault();setTreatyJsonError('');setTreatyJsonSaving(true);let parsed;try{parsed=JSON.parse(treatyJsonText);if(!Array.isArray(parsed))throw new Error(\"Treaties JSON must be an array.\");}catch(err){setTreatyJsonError('Invalid JSON: '+err.message);setTreatyJsonSaving(false);return;}fetch('/api/treaties/json',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(parsed)}).then(res=>res.json()).then(data=>{if(data.success){setTreaties(parsed);setShowTreatyJsonEditor(false);}else{setTreatyJsonError(data.error||'Failed to save treaties.json');}}).catch(()=>setTreatyJsonError('Failed to save treaties.json')).finally(()=>setTreatyJsonSaving(false));}// --- Add search states ---\nconst[treatySearch,setTreatySearch]=useState(()=>localStorage.getItem('treatySearch')||'');const[empireSearch,setEmpireSearch]=useState(()=>localStorage.getItem('empireSearch')||'');// --- Add sort states ---\nconst[treatySort,setTreatySort]=useState('title');const[empireSort,setEmpireSort]=useState('name');// --- End states ---\n// --- Fetch treaties ---\nfunction fetchTreaties(){fetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data=>{setTreaties(Array.isArray(data)?data:[]);setTreatiesLoaded(true);}).catch(()=>setTreatiesLoaded(true));}useEffect(()=>{fetchTreaties();},[]);// --- Treaty CRUD ---\nfunction openTreatyDialog(mode){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;setTreatyDialog({open:true,mode,data});setTreatyError('');}function closeTreatyDialog(){setTreatyDialog({open:false,mode:null,data:null});setTreatyError('');}function handleTreatySave(form){var _payload$participants;setTreatySaving(true);setTreatyError('');const payload={...form};if(!payload.title||!payload.content||!((_payload$participants=payload.participants)!==null&&_payload$participants!==void 0&&_payload$participants.length)){setTreatyError('Title, content, and at least one participant are required.');setTreatySaving(false);return;}if(!payload.owner)payload.owner=(account===null||account===void 0?void 0:account.username)||'';if(!payload.status)payload.status='discussion';if(!payload.id)payload.id=Date.now().toString();fetch('/api/treaties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}).then(res=>res.json()).then(data=>{if(data.success){// --- FIX: update treaties state locally, just like accounts ---\nsetTreaties(prev=>{// If editing, replace; if new, add\nconst idx=prev.findIndex(t=>t.id===payload.id);if(idx!==-1){const updated=[...prev];updated[idx]={...prev[idx],...payload};return updated;}else{return[...prev,payload];}});closeTreatyDialog();}else{setTreatyError(data.error||'Failed to save treaty');}}).catch(()=>setTreatyError('Failed to save treaty')).finally(()=>setTreatySaving(false));}function handleTreatyTransferOwner(id,newOwner){setTreatySaving(true);fetch('/api/treaties/transfer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,newOwner})}).then(res=>res.json()).then(data=>{if(data.success)fetchTreaties();}).finally(()=>setTreatySaving(false));}// --- Treaty Permissions ---\nfunction canEditTreaty(treaty){if(!account)return false;return account.username===treaty.owner||account.username===\"GameMaster\";}function canTransferTreaty(treaty){return account&&account.username===\"GameMaster\";}const{showMenu,showPermissions,gmPermissions,showRoadmap,handleMenuToggle,handleMenuClose,handlePermissionsToggle,handlePermissionChange,handleRoadmapToggle,menuDropdownRef,permissionsDropdownRef}=useBurgerMenu(account);// Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\n// This prevents any reloads while editing or viewing an empire.\nuseEffect(()=>{if(activeTab==='empires'&&!editEmpire&&!empirePage){// Add cache-busting query param\nfetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});}).catch(()=>{});}// Only run when switching tabs, or leaving view/edit mode\n},[activeTab,editEmpire,empirePage]);// Helper: get empire names\nfunction getEmpireNames(){// Only include empires that exist (already the case)\nreturn empires.map(e=>e.name);}// Helper: get boards from linked empires\nfunction getLinkedBoards(){const names=getEmpireNames();return getNationPairs(names);}// Helper: get account linked to empire\nfunction getEmpireAccount(empireName){const emp=empires.find(e=>e.name===empireName);return emp&&emp.account?emp.account:null;}// Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\nconst filteredBoards=account?account.username===\"GameMaster\"?getLinkedBoards():getLinkedBoards().filter(_ref=>{let[a,b]=_ref;return getEmpireAccount(a)===account.username||getEmpireAccount(b)===account.username;}):[];// GameMaster: link/unlink accounts to empires\nfunction handleLinkAccount(empireName,accountName){fetch('/api/empires/link',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName,accountName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:accountName}:e));}});}function handleUnlinkAccount(empireName){fetch('/api/empires/unlink',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:null}:e));}});}// Save selected board to localStorage\nfunction handleBoardSelect(pair){const key=pair.join('|');setSelected(key);localStorage.setItem('stellarisSelectedBoard',key);}// Fetch messages for the selected board from the server\nuseEffect(()=>{// Only poll messages if on channels tab and not editing/viewing empire\nif(!selected||activeTab!=='channels'||editEmpire||empirePage){// Stop polling if not in correct state\nif(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}return;}// Use selected as key\nconst key=selected;// Function to fetch messages\nconst fetchMessages=()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>{if(!res.ok)throw new Error('Network response was not ok');return res.json();}).then(data=>{setMessages(prev=>({...prev,[key]:data}));}).catch(err=>{setMessages(prev=>({...prev,[key]:[]}));console.error('Failed to fetch messages:',err);});};// Initial fetch\nfetchMessages();// Set up polling\npollingRef.current=setInterval(fetchMessages,2000);// Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\nreturn()=>{if(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}};},[selected,activeTab,editEmpire,empirePage]);// Scroll to bottom only when messages actually change for the selected board\nconst prevMessagesLengthRef=useRef(0);useEffect(()=>{if(!selected)return;const currentMessages=messages[selected]||[];if(currentMessages.length!==prevMessagesLengthRef.current){if(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:'auto'});}prevMessagesLengthRef.current=currentMessages.length;}},[messages,selected]);// When posting, always use the logged-in account's empire name\nfunction postMessage(e){e.preventDefault();if(!selected||!account||!text.trim())return;const key=selected;const msg={board:key,author:account.username,text,timestamp:Date.now()};fetch('/api/messages',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg)}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[key]:data}));});});setText('');}// Fetch accounts from server (accounts.json)\nuseEffect(()=>{// Remove process.env.PUBLIC_URL logic, always use root-relative path\nconst url='/accounts.json?ts='+Date.now();console.log(\"Fetching accounts from:\",url);fetch(url).then(res=>{console.log(\"accounts.json fetch status:\",res.status,res.statusText);if(!res.ok)throw new Error(`HTTP ${res.status}: ${res.statusText}`);return res.json();}).then(data=>{if(!data||typeof data!=='object'||Array.isArray(data)){setAccounts({});setError(\"Accounts data is invalid or missing.\");}else{setAccounts(data);setError('');}setAccountsLoaded(true);}).catch(err=>{console.error(\"Failed to fetch accounts.json:\",err);// DEBUG: log error\nsetAccounts({});setError(`Failed to load accounts: ${err.message}`);setAccountsLoaded(true);});},[]);// Load empires from empires.json\nuseEffect(()=>{fetch('/empires.json').then(res=>res.json()).then(data=>{setEmpires(Array.isArray(data)?data:[]);});},[]);// Fetch treaties from backend\nuseEffect(()=>{fetch('/treaties.json').then(res=>res.json()).then(data=>{setTreaties(Array.isArray(data)?data:[]);setTreatiesLoaded(true);}).catch(()=>setTreatiesLoaded(true));},[]);function handleLogin(e){e.preventDefault();// Wait until accounts are loaded\nif(!accountsLoaded){setError('Accounts are still loading, please wait...');return;}const username=loginUser.trim();const password=loginPass.trim();if(!accounts[username]){setError('Invalid credentials');return;}if(accounts[username]!==password){setError('Invalid credentials');return;}setAccount({username});localStorage.setItem('stellarisAccount',JSON.stringify({username}));setError('');}function handleLogout(){setAccount(null);localStorage.removeItem('stellarisAccount');// Reset UI state to avoid rendering issues after logout\nsetActiveTab('channels');setEmpirePage(null);setEditEmpire(null);setEditAccount(null);setTreatyDialog({open:false,mode:null,data:null});}// Save empire info to backend and update local state\nfunction saveEmpireInfo(name,info){return fetch('/api/empireInfo',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,info})}).then(res=>res.json()).then(()=>{// After saving, reload from backend with cache-busting param\nreturn fetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});});});}// Edit panel for empire info\nfunction EmpireEditPanel(_ref2){let{name,onCancel}=_ref2;// Only initialize edit state from empireInfo[name] when the component mounts\nconst info=empireInfo[name]||{};const[edit,setEdit]=useState(info);// Do NOT use useEffect to update edit state from empireInfo.\n// This ensures the text fields are not reset while editing.\nfunction handleChange(e){setEdit({...edit,[e.target.name]:e.target.value});}function handleSave(e){e.preventDefault();saveEmpireInfo(name,edit).then(()=>{onCancel();});}return/*#__PURE__*/_jsxs(\"form\",{className:\"empire-edit-form\",onSubmit:handleSave,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Lore:\",/*#__PURE__*/_jsx(\"textarea\",{name:\"lore\",value:edit.lore||'',onChange:handleChange,rows:3})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Stats:\",/*#__PURE__*/_jsx(\"input\",{name:\"stats\",value:edit.stats||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Ethics:\",/*#__PURE__*/_jsx(\"input\",{name:\"ethics\",value:edit.ethics||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Civics:\",/*#__PURE__*/_jsx(\"input\",{name:\"civics\",value:edit.civics||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Special Info:\",/*#__PURE__*/_jsx(\"input\",{name:\"special\",value:edit.special||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem',marginTop:'1rem'},children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",children:\"Save\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"empire-back-btn\",onClick:onCancel,children:\"Cancel\"})]})]});}// Treaties: permissions\nfunction canEditTreaty(treaty){if(!account)return false;return account.username===treaty.owner||account.username===\"GameMaster\";}function canTransferTreaty(treaty){return account&&account.username===\"GameMaster\";}// Treaties: open new form\nfunction handleAddTreaty(){setTreatyDialog({open:true,mode:'new',data:null});setTreatyError('');}// Treaties: open edit\nfunction handleEditTreaty(treaty){setTreatyDialog({open:true,mode:'edit',data:treaty});setTreatyError('');}// Treaties: open view\nfunction handleViewTreaty(treaty){setTreatyDialog({open:true,mode:'view',data:treaty});setTreatyError('');}// Treaties: cancel form\nfunction handleCancelTreatyForm(){setTreatyDialog({open:false,mode:null,data:null});setTreatyError('');}// Treaties: save (create or update)\nfunction handleSaveTreaty(e){e.preventDefault();setTreatyError('');setTreatySaving(true);const isEdit=treatyEditId!=null;const form={...treatyForm};if(!form.title.trim()||!form.content.trim()||!form.participants.length){setTreatyError('Title, content, and at least one participant are required.');setTreatySaving(false);return;}if(!form.owner)form.owner=account?account.username:'';if(!form.status)form.status='discussion';if(!form.id)form.id=isEdit?treatyEditId:Date.now().toString();fetch('/api/treaties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(form)}).then(res=>res.json()).then(data=>{if(data.success){// Always fetch the latest treaties from /treaties.json after save\nreturn fetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data2=>{setTreaties(Array.isArray(data2)?data2:[]);setTreatyForm(null);setTreatyEditId(null);setShowTreatyForm(false);setTreatyViewId(form.id);});}else{setTreatyError(data.error||'Failed to save treaty');}}).catch(()=>setTreatyError('Failed to save treaty')).finally(()=>setTreatySaving(false));}// Treaties: transfer ownership (GM only)\nfunction handleTransferTreatyOwner(treaty,newOwner){if(!canTransferTreaty(treaty))return;setTreatySaving(true);fetch('/api/treaties/transfer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id:treaty.id,newOwner})}).then(res=>res.json()).then(data=>{if(data.success){return fetch('/treaties.json').then(res=>res.json()).then(data2=>setTreaties(Array.isArray(data2)?data2:[]));}}).finally(()=>setTreatySaving(false));}// Treaties: form field change\nfunction handleTreatyFormChange(e){const{name,value,type,options}=e.target;if(type==='select-multiple'){const vals=Array.from(options).filter(o=>o.selected).map(o=>o.value);setTreatyForm(f=>({...f,[name]:vals}));}else{setTreatyForm(f=>({...f,[name]:value}));}}// Treaties: render\nfunction renderTreatyForm(){if(!treatyForm)return null;return/*#__PURE__*/_jsxs(\"form\",{className:\"treaty-form card\",onSubmit:handleSaveTreaty,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-header\",children:[/*#__PURE__*/_jsx(\"input\",{name:\"title\",placeholder:\"Treaty Title\",value:treatyForm.title,onChange:handleTreatyFormChange,className:\"login-input\",required:true,disabled:treatySaving}),/*#__PURE__*/_jsx(Dropdown,{value:treatyForm.status,onChange:handleTreatyFormChange,options:TREATY_STATUS_OPTIONS,placeholder:\"Select status...\",className:\"login-input\",disabled:treatySaving})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-participants\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"participants-select\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"participants-label\",children:\"Participants\"}),/*#__PURE__*/_jsx(\"select\",{name:\"participants\",value:treatyForm.participants,onChange:handleTreatyFormChange,className:\"login-input\",multiple:true,disabled:treatySaving,children:getEmpireNames().map(e=>/*#__PURE__*/_jsx(\"option\",{value:e,children:e},e))})]}),account&&account.username===\"GameMaster\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"owner-select\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"owner-label\",children:\"Owner:\"}),/*#__PURE__*/_jsx(Dropdown,{value:treatyForm.owner,onChange:handleTreatyFormChange,options:Object.keys(accounts).map(acc=>({value:acc,label:acc})),placeholder:\"Select owner...\",className:\"login-input\",disabled:treatySaving})]})]}),/*#__PURE__*/_jsx(\"label\",{className:\"treaty-content-label\",children:\"Treaty Content\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"content\",placeholder:\"Treaty Content\",value:treatyForm.content,onChange:handleTreatyFormChange,className:\"login-input\",rows:9,required:true}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-actions\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:treatySaving,children:treatyEditId?\"Save Changes\":\"Create Treaty\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"empire-back-btn\",onClick:handleCancelTreatyForm,disabled:treatySaving,children:\"Cancel\"}),treatyError&&/*#__PURE__*/_jsx(ErrorMessage,{className:\"treaty-error\",children:treatyError})]})]});}function renderTreatyView(treaty){const statusObj=TREATY_STATUSES.find(s=>s.value===treaty.status);return/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-header\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"treaty-title\",children:treaty.title}),/*#__PURE__*/_jsx(\"span\",{className:\"treaty-status\",style:{color:statusObj.color},children:statusObj?statusObj.label:treaty.status})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-owner\",children:[\"Owner: \",treaty.owner]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-participants\",children:[/*#__PURE__*/_jsx(\"b\",{children:\"Participants:\"}),\" \",treaty.participants&&treaty.participants.length>0?treaty.participants.join(', '):/*#__PURE__*/_jsx(\"i\",{children:\"None\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"treaty-content-static\",children:treaty.content}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"empire-back-btn\",onClick:()=>setTreatyViewId(null),children:\"Back\"}),canEditTreaty(treaty)&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",onClick:()=>handleEditTreaty(treaty),children:\"Edit\"}),canTransferTreaty(treaty)&&/*#__PURE__*/_jsx(\"select\",{value:treaty.owner,onChange:e=>handleTransferTreatyOwner(treaty,e.target.value),className:\"owner-transfer-select\",children:Object.keys(accounts).map(acc=>/*#__PURE__*/_jsx(\"option\",{value:acc,children:acc},acc))})]})]});}// Only show accounts tab for GameMaster\nconst showAccountsTab=account&&account.username===\"GameMaster\";const tabs=[{key:'channels',label:'Channels'},{key:'empires',label:'Empires'},{key:'treaties',label:'Treaties'}];if(showAccountsTab){tabs.push({key:'accounts',label:'Manage Accounts'});tabs.push({key:'manage-empires',label:'Manage Empires'});}// Ref for account edit panel\nconst accountEditPanelRef=useRef(null);// Scroll to edit panel when editAccount changes\nuseEffect(()=>{if(editAccount&&accountEditPanelRef.current){accountEditPanelRef.current.scrollIntoView({behavior:'smooth',block:'center'});}},[editAccount]);// --- MODIFIED: Only allow delete if GM and permission enabled ---\nfunction handleDeleteMessage(boardKey,msgIdx){if(!account||account.username!==\"GameMaster\"||!gmPermissions.canDeleteMessages)return;if(!window.confirm(\"Delete this message?\"))return;fetch('/api/messages/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({board:boardKey,index:Number(msgIdx)})}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(boardKey)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[boardKey]:data}));});});}// --- Treaties: filtered and sorted by search ---\nconst filteredTreaties=treatySearch.trim()?treaties.filter(t=>t.title&&t.title.toLowerCase().includes(treatySearch.toLowerCase())||t.content&&t.content.toLowerCase().includes(treatySearch.toLowerCase())||t.owner&&t.owner.toLowerCase().includes(treatySearch.toLowerCase())||Array.isArray(t.participants)&&t.participants.some(p=>p.toLowerCase().includes(treatySearch.toLowerCase()))):treaties;const sortedTreaties=[...filteredTreaties].sort((a,b)=>{if(treatySort==='title')return a.title.localeCompare(b.title);if(treatySort==='owner')return a.owner.localeCompare(b.owner);return 0;});// --- Empires: filtered and sorted by search ---\nconst filteredEmpires=empireSearch.trim()?getEmpireNames().filter(e=>e.toLowerCase().includes(empireSearch.toLowerCase())):getEmpireNames();const sortedEmpires=[...filteredEmpires].sort((a,b)=>{if(empireSort==='name')return a.localeCompare(b);return 0;});// Only show login page if not logged in\nif(!account){return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Stellaris RP Chronicler\"})}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(\"section\",{className:\"account-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-title\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,className:\"account-form login-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"login-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Empire name\",value:loginUser,onChange:e=>setLoginUser(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:loginPass,onChange:e=>setLoginPass(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!accountsLoaded,className:\"login-btn\",children:\"Login\"})]}),!accountsLoaded&&!error&&/*#__PURE__*/_jsx(LoadingMessage,{children:\"Loading accounts...\"}),error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error})]})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Stellaris RP Chronicler \\xA9 \",new Date().getFullYear()]})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Stellaris RP Chronicler\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"tabs-bar\",children:[tabs.map(tab=>/*#__PURE__*/_jsx(\"button\",{className:`tab-btn${activeTab===tab.key?' active':''}`,onClick:()=>{setActiveTab(tab.key);setEmpirePage(null);setEditEmpire(null);setEditAccount(null);// Removed setTreatyViewId and setShowTreatyForm calls\n},children:tab.label},tab.key)),/*#__PURE__*/_jsx(MenuDropdown,{showMenu:showMenu,showPermissions:showPermissions,showRoadmap:showRoadmap,handleMenuToggle:handleMenuToggle,handleLogout:handleLogout,account:account,handlePermissionsToggle:handlePermissionsToggle,gmPermissions:gmPermissions,handlePermissionChange:handlePermissionChange,handleRoadmapToggle:handleRoadmapToggle,menuDropdownRef:menuDropdownRef,permissionsDropdownRef:permissionsDropdownRef})]})]}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:showRoadmap?/*#__PURE__*/_jsx(RoadmapTab,{onClose:handleRoadmapToggle}):activeTab==='treaties'?/*#__PURE__*/_jsxs(\"section\",{className:\"treaties-section card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaties-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Treaties, Contracts & Agreements\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem',alignItems:'center'},children:[account&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",onClick:()=>openTreatyDialog('new'),children:\"+ Add New Treaty\"}),account&&account.username===\"GameMaster\"&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",style:{background:'#555'},onClick:openTreatyJsonEditor,title:\"Edit treaties.json directly\",children:\"Edit treaties.json\"})]})]}),showTreatyJsonEditor&&account&&account.username===\"GameMaster\"&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",onClick:closeTreatyJsonEditor,children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",style:{maxWidth:900,width:'98vw'},onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"h2\",{children:\"JSON\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleTreatyJsonSubmit,children:[/*#__PURE__*/_jsx(\"textarea\",{value:treatyJsonText,onChange:handleTreatyJsonChange,rows:24,style:{width:'100%',fontFamily:'monospace',fontSize:'1em',borderRadius:8,border:'1.5px solid var(--accent)',background:'var(--primary-bg)',color:'var(--text)',marginBottom:'1em'},spellCheck:false,disabled:treatyJsonSaving}),treatyJsonError&&/*#__PURE__*/_jsx(ErrorMessage,{children:treatyJsonError}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem',justifyContent:'flex-end'},children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"empire-back-btn\",style:{background:'#555'},onClick:closeTreatyJsonEditor,disabled:treatyJsonSaving,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:treatyJsonSaving,children:\"Save treaties.json\"})]})]})]})}),/*#__PURE__*/_jsx(SearchSortBar,{searchValue:treatySearch,onSearchChange:setTreatySearch,onClearSearch:()=>setTreatySearch(''),sortValue:treatySort,onSortChange:setTreatySort,sortOptions:[{value:'title',label:'Sort by Title'},{value:'owner',label:'Sort by Owner'}],placeholder:\"Search treaties by title, content, owner, or participant...\",searchClass:\"treaty-search-input\",sortClass:\"treaty-sort-select\"}),treatyDialog.open&&treatyDialog.mode!=='view'&&/*#__PURE__*/_jsx(TreatyDialog,{open:treatyDialog.open,mode:treatyDialog.mode,data:treatyDialog.data,onSave:handleTreatySave,onClose:closeTreatyDialog,error:treatyError,saving:treatySaving,empires:empires.map(e=>e.name),accounts:accounts,account:account}),treatyDialog.open&&treatyDialog.mode==='view'&&/*#__PURE__*/_jsx(TreatyView,{treaty:treatyDialog.data,onBack:closeTreatyDialog,onEdit:()=>openTreatyDialog('edit',treatyDialog.data),onTransfer:newOwner=>handleTreatyTransferOwner(treatyDialog.data.id,newOwner),canEdit:canEditTreaty(treatyDialog.data),canTransfer:canTransferTreaty(treatyDialog.data),accounts:accounts}),/*#__PURE__*/_jsx(TreatyList,{treaties:sortedTreaties,loaded:treatiesLoaded,onView:treaty=>setTreatyDialog({open:true,mode:'view',data:treaty}),canEditTreaty:canEditTreaty,onEdit:openTreatyDialog})]}):activeTab==='manage-empires'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Empires\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateEmpire(e,newEmpireName,empires,setNewEmpireError,setNewEmpireLoading,setEmpires,setNewEmpireName),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"New empire name\",value:newEmpireName,onChange:e=>setNewEmpireName(e.target.value),required:true,className:\"login-input\",disabled:newEmpireLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:newEmpireLoading,onClick:e=>e.stopPropagation(),children:\"Create Empire\"})]})}),newEmpireError&&/*#__PURE__*/_jsx(ErrorMessage,{children:newEmpireError}),/*#__PURE__*/_jsx(\"h3\",{children:\"Empires & Account Assignment\"}),/*#__PURE__*/_jsx(EmpireList,{empires:empires,accounts:accounts,onLink:handleLinkAccount,onUnlink:handleUnlinkAccount,onDelete:name=>handleDeleteEmpire(name,setNewEmpireLoading,setNewEmpireError,setEmpires),loading:newEmpireLoading})]}):activeTab==='accounts'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Accounts\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateAccount(e,newAccountName,newAccountPass,accounts,setAccountError,setAccountSuccess,setAccountsTabLoading,setAccounts,setNewAccountName,setNewAccountPass),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Account name\",value:newAccountName,onChange:e=>setNewAccountName(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:newAccountPass,onChange:e=>setNewAccountPass(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:accountsTabLoading,onClick:e=>e.stopPropagation(),children:\"Create Account\"})]})}),accountError&&/*#__PURE__*/_jsx(ErrorMessage,{children:accountError}),accountSuccess&&/*#__PURE__*/_jsx(LoadingMessage,{style:{color:'limegreen'},children:accountSuccess}),/*#__PURE__*/_jsx(\"h3\",{children:\"All Accounts\"}),/*#__PURE__*/_jsx(AccountList,{accounts:accounts,onEdit:acc=>{setEditAccount(acc);setEditAccountName(acc);setEditAccountPass('');setEditAccountError('');},onDelete:acc=>handleDeleteAccount(acc,setEditAccountLoading,setEditAccountError,setAccounts,setAccountSuccess),editAccountLoading:editAccountLoading}),editAccount&&/*#__PURE__*/_jsxs(\"div\",{className:\"account-edit-panel card\",ref:accountEditPanelRef,children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Edit Account: \",/*#__PURE__*/_jsx(\"b\",{children:editAccount})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>handleRenameAccount(e,editAccount,editAccountName,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess),className:\"edit-account-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Rename to:\",/*#__PURE__*/_jsx(\"input\",{value:editAccountName,onChange:e=>setEditAccountName(e.target.value),className:\"login-input\",disabled:editAccountLoading})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:editAccountLoading,children:\"Rename\"})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>handleChangePassword(e,editAccount,editAccountPass,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess),className:\"change-password-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Password:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:editAccountPass,onChange:e=>setEditAccountPass(e.target.value),className:\"login-input\",disabled:editAccountLoading})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:editAccountLoading,children:\"Change Password\"})]}),editAccountError&&/*#__PURE__*/_jsx(\"div\",{className:\"login-error\",children:editAccountError}),/*#__PURE__*/_jsx(\"button\",{className:\"empire-back-btn\",onClick:()=>setEditAccount(null),disabled:editAccountLoading,children:\"Cancel\"})]})]}):activeTab==='empires'?editEmpire?/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Edit \",editEmpire]}),/*#__PURE__*/_jsx(EmpireEditPanel,{name:editEmpire,onCancel:()=>setEditEmpire(null),empireInfo:empireInfo,saveEmpireInfo:saveEmpireInfo})]}):empirePage?/*#__PURE__*/_jsx(EmpirePanel,{name:empirePage,canEdit:account&&account.username===empirePage,empireInfo:empireInfo,getEmpireAccount:getEmpireAccount,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire}):/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empires-header\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Empires\"})}),/*#__PURE__*/_jsx(SearchSortBar,{searchValue:empireSearch,onSearchChange:setEmpireSearch,onClearSearch:()=>setEmpireSearch(''),sortValue:empireSort,onSortChange:setEmpireSort,sortOptions:[{value:'name',label:'Sort by Name'}],placeholder:\"Search empires by name...\",searchClass:\"empire-search-input\",sortClass:\"empire-sort-select\"}),/*#__PURE__*/_jsx(\"div\",{className:\"empires-info-list\",style:{display:'flex',flexWrap:'wrap',gap:'1.5rem',justifyContent:'flex-start'},children:/*#__PURE__*/_jsx(EmpireList,{empires:sortedEmpires.map(name=>empires.find(e=>e.name===name)),accounts:accounts,account:account,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire,getEmpireAccount:getEmpireAccount})})]}):/*#__PURE__*/_jsx(_Fragment,{children:!account?/*#__PURE__*/_jsxs(\"section\",{className:\"account-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-title\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,className:\"account-form login-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"login-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Empire name\",value:loginUser,onChange:e=>setLoginUser(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:loginPass,onChange:e=>setLoginPass(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!accountsLoaded,className:\"login-btn\",children:\"Login\"})]}),!accountsLoaded&&/*#__PURE__*/_jsx(LoadingMessage,{children:\"Loading accounts...\"}),error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error})]}):/*#__PURE__*/// Center the channels page\n_jsx(\"div\",{style:{display:'flex',justifyContent:'center',width:'100%'},children:/*#__PURE__*/_jsx(\"section\",{className:\"boards-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"channels-main\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"channels-sidebar\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"boards-list card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:account&&account.username===\"GameMaster\"?\"All Boards\":\"Your Diplomatic Channels\"}),/*#__PURE__*/_jsx(\"div\",{className:\"boards-list-header\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"boards-list-count\",children:[filteredBoards.length,\" \",filteredBoards.length===1?\"channel\":\"channels\"]})}),/*#__PURE__*/_jsxs(\"ul\",{className:\"boards-list-ul\",children:[filteredBoards.length===0&&/*#__PURE__*/_jsx(\"li\",{className:\"no-channels\",children:\"No channels available.\"}),filteredBoards.map(_ref3=>{let[a,b]=_ref3;const key=a+'|'+b;// Modular: allow custom cutoff per context\nconst maxNameLen=16;return/*#__PURE__*/_jsx(\"li\",{className:`boards-list-item${selected===key?' active':''}`,children:/*#__PURE__*/_jsxs(\"button\",{className:\"board-btn\",onClick:()=>handleBoardSelect([a,b]),children:[/*#__PURE__*/_jsx(\"span\",{className:\"board-nations\",title:a,children:cutOffDotter.cut(a,maxNameLen)}),/*#__PURE__*/_jsx(\"span\",{className:\"board-arrow\",children:\"\\u2194\"}),/*#__PURE__*/_jsx(\"span\",{className:\"board-nations\",title:b,children:cutOffDotter.cut(b,maxNameLen)})]})},key);})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"channels-content\",children:/*#__PURE__*/_jsx(\"div\",{className:\"board-messages card\",children:selected&&filteredBoards.length>0?/*#__PURE__*/_jsxs(\"div\",{className:\"board-messages-inner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"board-title-row\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"board-title\",children:selected.replace('|',' ↔ ')})}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages-panel\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"messages-list-container\",children:/*#__PURE__*/_jsx(MessageList,{messages:messages[selected]||[],selected:selected,account:account,gmPermissions:gmPermissions,handleDeleteMessage:handleDeleteMessage})}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:postMessage,className:\"message-form message-form-bottom\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Your empire\",value:account.username,disabled:true,required:true,className:\"author-input\"}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Message\",value:text,onChange:e=>setText(e.target.value),required:true,className:\"text-input\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-btn\",children:\"Send\"})]})]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\",children:\"Select a channel to view messages.\"})})})]})})})})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Stellaris RP Chronicler \\xA9 \",new Date().getFullYear()]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","getNationPairs","TreatyDialog","TreatyView","EmpireEditPanel","EmpirePanel","MenuDropdown","handleCreateAccount","handleCreateEmpire","handleRenameAccount","handleChangePassword","handleDeleteAccount","handleDeleteEmpire","useBurgerMenu","RoadmapTab","TREATY_STATUSES","TREATY_STATUS_OPTIONS","AccountList","MessageList","EmpireList","TreatyList","SearchSortBar","ErrorMessage","LoadingMessage","Dropdown","cutOffDotter","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","empires","setEmpires","selected","setSelected","saved","localStorage","getItem","messages","setMessages","text","setText","pollingRef","messagesEndRef","accounts","setAccounts","accountsLoaded","setAccountsLoaded","account","setAccount","JSON","parse","loginUser","setLoginUser","loginPass","setLoginPass","error","setError","activeTab","setActiveTab","empirePage","setEmpirePage","editEmpire","setEditEmpire","empireInfo","setEmpireInfo","newAccountName","setNewAccountName","newAccountPass","setNewAccountPass","accountError","setAccountError","accountSuccess","setAccountSuccess","accountsTabLoading","setAccountsTabLoading","editAccount","setEditAccount","editAccountName","setEditAccountName","editAccountPass","setEditAccountPass","editAccountError","setEditAccountError","editAccountLoading","setEditAccountLoading","newEmpireName","setNewEmpireName","newEmpireError","setNewEmpireError","newEmpireLoading","setNewEmpireLoading","treaties","setTreaties","treatiesLoaded","setTreatiesLoaded","treatyDialog","setTreatyDialog","open","mode","data","treatyError","setTreatyError","treatySaving","setTreatySaving","showTreatyJsonEditor","setShowTreatyJsonEditor","treatyJsonText","setTreatyJsonText","treatyJsonError","setTreatyJsonError","treatyJsonSaving","setTreatyJsonSaving","openTreatyJsonEditor","fetch","Date","now","then","res","json","stringify","catch","closeTreatyJsonEditor","handleTreatyJsonChange","e","target","value","handleTreatyJsonSubmit","preventDefault","parsed","Array","isArray","Error","err","message","method","headers","body","success","finally","treatySearch","setTreatySearch","empireSearch","setEmpireSearch","treatySort","setTreatySort","empireSort","setEmpireSort","fetchTreaties","openTreatyDialog","arguments","length","undefined","closeTreatyDialog","handleTreatySave","form","_payload$participants","payload","title","content","participants","owner","username","status","id","toString","prev","idx","findIndex","t","updated","handleTreatyTransferOwner","newOwner","canEditTreaty","treaty","canTransferTreaty","showMenu","showPermissions","gmPermissions","showRoadmap","handleMenuToggle","handleMenuClose","handlePermissionsToggle","handlePermissionChange","handleRoadmapToggle","menuDropdownRef","permissionsDropdownRef","getEmpireNames","map","name","getLinkedBoards","names","getEmpireAccount","empireName","emp","find","filteredBoards","filter","_ref","a","b","handleLinkAccount","accountName","handleUnlinkAccount","handleBoardSelect","pair","key","join","setItem","current","clearInterval","fetchMessages","encodeURIComponent","ok","console","setInterval","prevMessagesLengthRef","currentMessages","scrollIntoView","behavior","postMessage","trim","msg","board","author","timestamp","url","log","statusText","handleLogin","password","handleLogout","removeItem","saveEmpireInfo","info","_ref2","onCancel","edit","setEdit","handleChange","handleSave","className","onSubmit","children","lore","onChange","rows","stats","ethics","civics","special","style","display","gap","marginTop","type","onClick","handleAddTreaty","handleEditTreaty","handleViewTreaty","handleCancelTreatyForm","handleSaveTreaty","isEdit","treatyEditId","treatyForm","data2","setTreatyForm","setTreatyEditId","setShowTreatyForm","setTreatyViewId","handleTransferTreatyOwner","handleTreatyFormChange","options","vals","from","o","f","renderTreatyForm","placeholder","required","disabled","multiple","Object","keys","acc","label","renderTreatyView","statusObj","s","color","showAccountsTab","tabs","push","accountEditPanelRef","block","handleDeleteMessage","boardKey","msgIdx","canDeleteMessages","window","confirm","index","Number","filteredTreaties","toLowerCase","includes","some","p","sortedTreaties","sort","localeCompare","filteredEmpires","sortedEmpires","getFullYear","tab","onClose","alignItems","background","maxWidth","width","stopPropagation","fontFamily","fontSize","borderRadius","border","marginBottom","spellCheck","justifyContent","searchValue","onSearchChange","onClearSearch","sortValue","onSortChange","sortOptions","searchClass","sortClass","onSave","saving","onBack","onEdit","onTransfer","canEdit","canTransfer","loaded","onView","onLink","onUnlink","onDelete","loading","ref","flexWrap","_ref3","maxNameLen","cut","replace"],"sources":["C:/Users/Admin/Dokumente/Stellaris/project/MessengerSiteStellaris/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './css/App.css';\r\nimport './css/Treaties.css';\r\nimport './css/Empires.css';\r\nimport './css/Boards.css';\r\nimport './css/Accounts.css';\r\nimport { getNationPairs } from './utils/getNationPairs';\r\nimport TreatyDialog from './components/TreatyDialog';\r\nimport TreatyView from './components/TreatyView';\r\nimport EmpireEditPanel from './components/EmpireEditPanel';\r\nimport EmpirePanel from './components/EmpirePanel';\r\nimport MenuDropdown from './components/MenuDropdown';\r\nimport {\r\n    handleCreateAccount,\r\n    handleCreateEmpire,\r\n    handleRenameAccount,\r\n    handleChangePassword,\r\n    handleDeleteAccount,\r\n    handleDeleteEmpire\r\n} from './handlers/handlers';\r\nimport { useBurgerMenu } from './components/BurgerMenu';\r\nimport RoadmapTab from './components/RoadmapTab';\r\nimport { TREATY_STATUSES } from './utils/treatyStatuses';\r\nimport { TREATY_STATUS_OPTIONS } from './utils/treatyStatusOptions';\r\nimport AccountList from './components/AccountList';\r\nimport MessageList from './components/MessageList';\r\nimport EmpireList from './components/EmpireList';\r\nimport TreatyList from './components/TreatyList';\r\nimport SearchSortBar from './components/SearchSortBar';\r\nimport { ErrorMessage, LoadingMessage } from './components/Messages';\r\nimport Dropdown from './components/Dropdown';\r\nimport cutOffDotter from './utils/cutOffDotter';\r\n\r\nfunction App() {\r\n    const [empires, setEmpires] = useState([]);\r\n    const [selected, setSelected] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisSelectedBoard');\r\n        return saved ? saved : null;\r\n    });\r\n    const [messages, setMessages] = useState({});\r\n    const [text, setText] = useState('');\r\n    const pollingRef = useRef();\r\n    const messagesEndRef = useRef(null);\r\n    const [accounts, setAccounts] = useState({});\r\n    const [accountsLoaded, setAccountsLoaded] = useState(false);\r\n    const [account, setAccount] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisAccount');\r\n        return saved ? JSON.parse(saved) : null;\r\n    });\r\n    const [loginUser, setLoginUser] = useState('');\r\n    const [loginPass, setLoginPass] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [activeTab, setActiveTab] = useState('channels');\r\n    const [empirePage, setEmpirePage] = useState(null);\r\n    const [editEmpire, setEditEmpire] = useState(null);\r\n    const [empireInfo, setEmpireInfo] = useState({});\r\n\r\n    // Account creation and management\r\n    const [newAccountName, setNewAccountName] = useState('');\r\n    const [newAccountPass, setNewAccountPass] = useState('');\r\n    const [accountError, setAccountError] = useState('');\r\n    const [accountSuccess, setAccountSuccess] = useState('');\r\n    const [accountsTabLoading, setAccountsTabLoading] = useState(false);\r\n    const [editAccount, setEditAccount] = useState(null);\r\n    const [editAccountName, setEditAccountName] = useState('');\r\n    const [editAccountPass, setEditAccountPass] = useState('');\r\n    const [editAccountError, setEditAccountError] = useState('');\r\n    const [editAccountLoading, setEditAccountLoading] = useState(false);\r\n\r\n    // Manage Empires tab\r\n    const [newEmpireName, setNewEmpireName] = useState('');\r\n    const [newEmpireError, setNewEmpireError] = useState('');\r\n    const [newEmpireLoading, setNewEmpireLoading] = useState(false);\r\n\r\n    // --- Treaties State (NEW IMPLEMENTATION) ---\r\n    const [treaties, setTreaties] = useState([]);\r\n    const [treatiesLoaded, setTreatiesLoaded] = useState(false);\r\n    const [treatyDialog, setTreatyDialog] = useState({ open: false, mode: null, data: null });\r\n    const [treatyError, setTreatyError] = useState('');\r\n    const [treatySaving, setTreatySaving] = useState(false);\r\n\r\n    // --- Treaty JSON Editor State (GM only) ---\r\n    const [showTreatyJsonEditor, setShowTreatyJsonEditor] = useState(false);\r\n    const [treatyJsonText, setTreatyJsonText] = useState('');\r\n    const [treatyJsonError, setTreatyJsonError] = useState('');\r\n    const [treatyJsonSaving, setTreatyJsonSaving] = useState(false);\r\n\r\n    function openTreatyJsonEditor() {\r\n        setTreatyJsonError('');\r\n        setTreatyJsonSaving(false);\r\n        // Load current treaties as JSON text\r\n        fetch('/treaties.json?ts=' + Date.now())\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreatyJsonText(JSON.stringify(data, null, 2));\r\n                setShowTreatyJsonEditor(true);\r\n            })\r\n            .catch(() => {\r\n                setTreatyJsonText('[]');\r\n                setShowTreatyJsonEditor(true);\r\n            });\r\n    }\r\n    function closeTreatyJsonEditor() {\r\n        setShowTreatyJsonEditor(false);\r\n        setTreatyJsonError('');\r\n        setTreatyJsonSaving(false);\r\n    }\r\n    function handleTreatyJsonChange(e) {\r\n        setTreatyJsonText(e.target.value);\r\n        setTreatyJsonError('');\r\n    }\r\n    function handleTreatyJsonSubmit(e) {\r\n        e.preventDefault();\r\n        setTreatyJsonError('');\r\n        setTreatyJsonSaving(true);\r\n        let parsed;\r\n        try {\r\n            parsed = JSON.parse(treatyJsonText);\r\n            if (!Array.isArray(parsed)) throw new Error(\"Treaties JSON must be an array.\");\r\n        } catch (err) {\r\n            setTreatyJsonError('Invalid JSON: ' + err.message);\r\n            setTreatyJsonSaving(false);\r\n            return;\r\n        }\r\n        fetch('/api/treaties/json', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(parsed)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setTreaties(parsed);\r\n                setShowTreatyJsonEditor(false);\r\n            } else {\r\n                setTreatyJsonError(data.error || 'Failed to save treaties.json');\r\n            }\r\n        })\r\n        .catch(() => setTreatyJsonError('Failed to save treaties.json'))\r\n        .finally(() => setTreatyJsonSaving(false));\r\n    }\r\n\r\n    // --- Add search states ---\r\n    const [treatySearch, setTreatySearch] = useState(() => localStorage.getItem('treatySearch') || '');\r\n    const [empireSearch, setEmpireSearch] = useState(() => localStorage.getItem('empireSearch') || '');\r\n    // --- Add sort states ---\r\n    const [treatySort, setTreatySort] = useState('title');\r\n    const [empireSort, setEmpireSort] = useState('name');\r\n    // --- End states ---\r\n\r\n    // --- Fetch treaties ---\r\n    function fetchTreaties() {\r\n        fetch('/treaties.json?ts=' + Date.now())\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreaties(Array.isArray(data) ? data : []);\r\n                setTreatiesLoaded(true);\r\n            })\r\n            .catch(() => setTreatiesLoaded(true));\r\n    }\r\n    useEffect(() => { fetchTreaties(); }, []);\r\n\r\n    // --- Treaty CRUD ---\r\n    function openTreatyDialog(mode, data = null) {\r\n        setTreatyDialog({ open: true, mode, data });\r\n        setTreatyError('');\r\n    }\r\n    function closeTreatyDialog() {\r\n        setTreatyDialog({ open: false, mode: null, data: null });\r\n        setTreatyError('');\r\n    }\r\n    function handleTreatySave(form) {\r\n        setTreatySaving(true);\r\n        setTreatyError('');\r\n        const payload = { ...form };\r\n        if (!payload.title || !payload.content || !payload.participants?.length) {\r\n            setTreatyError('Title, content, and at least one participant are required.');\r\n            setTreatySaving(false);\r\n            return;\r\n        }\r\n        if (!payload.owner) payload.owner = account?.username || '';\r\n        if (!payload.status) payload.status = 'discussion';\r\n        if (!payload.id) payload.id = Date.now().toString();\r\n\r\n        fetch('/api/treaties', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                // --- FIX: update treaties state locally, just like accounts ---\r\n                setTreaties(prev => {\r\n                    // If editing, replace; if new, add\r\n                    const idx = prev.findIndex(t => t.id === payload.id);\r\n                    if (idx !== -1) {\r\n                        const updated = [...prev];\r\n                        updated[idx] = { ...prev[idx], ...payload };\r\n                        return updated;\r\n                    } else {\r\n                        return [...prev, payload];\r\n                    }\r\n                });\r\n                closeTreatyDialog();\r\n            } else {\r\n                setTreatyError(data.error || 'Failed to save treaty');\r\n            }\r\n        })\r\n        .catch(() => setTreatyError('Failed to save treaty'))\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n    function handleTreatyTransferOwner(id, newOwner) {\r\n        setTreatySaving(true);\r\n        fetch('/api/treaties/transfer', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id, newOwner })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) fetchTreaties();\r\n        })\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // --- Treaty Permissions ---\r\n    function canEditTreaty(treaty) {\r\n        if (!account) return false;\r\n        return account.username === treaty.owner || account.username === \"GameMaster\";\r\n    }\r\n    function canTransferTreaty(treaty) {\r\n        return account && account.username === \"GameMaster\";\r\n    }\r\n\r\n    const {\r\n        showMenu,\r\n        showPermissions,\r\n        gmPermissions,\r\n        showRoadmap,\r\n        handleMenuToggle,\r\n        handleMenuClose,\r\n        handlePermissionsToggle,\r\n        handlePermissionChange,\r\n        handleRoadmapToggle,\r\n        menuDropdownRef,\r\n        permissionsDropdownRef\r\n    } = useBurgerMenu(account);\r\n\r\n    // Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\r\n    // This prevents any reloads while editing or viewing an empire.\r\n    useEffect(() => {\r\n        if (\r\n            activeTab === 'empires' &&\r\n            !editEmpire &&\r\n            !empirePage\r\n        ) {\r\n            // Add cache-busting query param\r\n            fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                })\r\n                .catch(() => {});\r\n        }\r\n    // Only run when switching tabs, or leaving view/edit mode\r\n    }, [activeTab, editEmpire, empirePage]);\r\n\r\n    // Helper: get empire names\r\n    function getEmpireNames() {\r\n        // Only include empires that exist (already the case)\r\n        return empires.map(e => e.name);\r\n    }\r\n\r\n    // Helper: get boards from linked empires\r\n    function getLinkedBoards() {\r\n        const names = getEmpireNames();\r\n        return getNationPairs(names);\r\n    }\r\n\r\n    // Helper: get account linked to empire\r\n    function getEmpireAccount(empireName) {\r\n        const emp = empires.find(e => e.name === empireName);\r\n        return emp && emp.account ? emp.account : null;\r\n    }\r\n\r\n    // Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\r\n    const filteredBoards = account\r\n        ? account.username === \"GameMaster\"\r\n            ? getLinkedBoards()\r\n            : getLinkedBoards().filter(([a, b]) =>\r\n                getEmpireAccount(a) === account.username || getEmpireAccount(b) === account.username\r\n            )\r\n        : [];\r\n\r\n    // GameMaster: link/unlink accounts to empires\r\n    function handleLinkAccount(empireName, accountName) {\r\n        fetch('/api/empires/link', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName, accountName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: accountName } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    function handleUnlinkAccount(empireName) {\r\n        fetch('/api/empires/unlink', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: null } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    // Save selected board to localStorage\r\n    function handleBoardSelect(pair) {\r\n        const key = pair.join('|');\r\n        setSelected(key);\r\n        localStorage.setItem('stellarisSelectedBoard', key);\r\n    }\r\n\r\n    // Fetch messages for the selected board from the server\r\n    useEffect(() => {\r\n        // Only poll messages if on channels tab and not editing/viewing empire\r\n        if (\r\n            !selected ||\r\n            activeTab !== 'channels' ||\r\n            editEmpire ||\r\n            empirePage\r\n        ) {\r\n            // Stop polling if not in correct state\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Use selected as key\r\n        const key = selected;\r\n\r\n        // Function to fetch messages\r\n        const fetchMessages = () => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => {\r\n                    if (!res.ok) throw new Error('Network response was not ok');\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                })\r\n                .catch((err) => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: []\r\n                    }));\r\n                    console.error('Failed to fetch messages:', err);\r\n                });\r\n        };\r\n\r\n        // Initial fetch\r\n        fetchMessages();\r\n\r\n        // Set up polling\r\n        pollingRef.current = setInterval(fetchMessages, 2000);\r\n\r\n        // Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\r\n        return () => {\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n        };\r\n    }, [selected, activeTab, editEmpire, empirePage]);\r\n\r\n    // Scroll to bottom only when messages actually change for the selected board\r\n    const prevMessagesLengthRef = useRef(0);\r\n    useEffect(() => {\r\n        if (!selected) return;\r\n        const currentMessages = messages[selected] || [];\r\n        if (currentMessages.length !== prevMessagesLengthRef.current) {\r\n            if (messagesEndRef.current) {\r\n                messagesEndRef.current.scrollIntoView({ behavior: 'auto' });\r\n            }\r\n            prevMessagesLengthRef.current = currentMessages.length;\r\n        }\r\n    }, [messages, selected]);\r\n\r\n    // When posting, always use the logged-in account's empire name\r\n    function postMessage(e) {\r\n        e.preventDefault();\r\n        if (!selected || !account || !text.trim()) return;\r\n        const key = selected;\r\n        const msg = {\r\n            board: key,\r\n            author: account.username,\r\n            text,\r\n            timestamp: Date.now()\r\n        };\r\n        fetch('/api/messages', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(msg)\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                });\r\n        });\r\n        setText('');\r\n    }\r\n\r\n    // Fetch accounts from server (accounts.json)\r\n    useEffect(() => {\r\n        // Remove process.env.PUBLIC_URL logic, always use root-relative path\r\n        const url = '/accounts.json?ts=' + Date.now();\r\n        console.log(\"Fetching accounts from:\", url);\r\n        fetch(url)\r\n            .then(res => {\r\n                console.log(\"accounts.json fetch status:\", res.status, res.statusText);\r\n                if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\r\n                return res.json();\r\n            })\r\n            .then(data => {\r\n                if (!data || typeof data !== 'object' || Array.isArray(data)) {\r\n                    setAccounts({});\r\n                    setError(\"Accounts data is invalid or missing.\");\r\n                } else {\r\n                    setAccounts(data);\r\n                    setError('');\r\n                }\r\n                setAccountsLoaded(true);\r\n            })\r\n            .catch(err => {\r\n                console.error(\"Failed to fetch accounts.json:\", err); // DEBUG: log error\r\n                setAccounts({});\r\n                setError(`Failed to load accounts: ${err.message}`);\r\n                setAccountsLoaded(true);\r\n            });\r\n    }, []);\r\n\r\n    // Load empires from empires.json\r\n    useEffect(() => {\r\n        fetch('/empires.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setEmpires(Array.isArray(data) ? data : []);\r\n            });\r\n    }, []);\r\n\r\n    // Fetch treaties from backend\r\n    useEffect(() => {\r\n        fetch('/treaties.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreaties(Array.isArray(data) ? data : []);\r\n                setTreatiesLoaded(true);\r\n            })\r\n            .catch(() => setTreatiesLoaded(true));\r\n    }, []);\r\n\r\n    function handleLogin(e) {\r\n        e.preventDefault();\r\n        // Wait until accounts are loaded\r\n        if (!accountsLoaded) {\r\n            setError('Accounts are still loading, please wait...');\r\n            return;\r\n        }\r\n        const username = loginUser.trim();\r\n        const password = loginPass.trim();\r\n        if (!accounts[username]) {\r\n            setError('Invalid credentials');\r\n            return;\r\n        }\r\n        if (accounts[username] !== password) {\r\n            setError('Invalid credentials');\r\n            return;\r\n        }\r\n        setAccount({ username });\r\n        localStorage.setItem('stellarisAccount', JSON.stringify({ username }));\r\n        setError('');\r\n    }\r\n\r\n    function handleLogout() {\r\n        setAccount(null);\r\n        localStorage.removeItem('stellarisAccount');\r\n        // Reset UI state to avoid rendering issues after logout\r\n        setActiveTab('channels');\r\n        setEmpirePage(null);\r\n        setEditEmpire(null);\r\n        setEditAccount(null);\r\n        setTreatyDialog({ open: false, mode: null, data: null });\r\n    }\r\n\r\n    // Save empire info to backend and update local state\r\n    function saveEmpireInfo(name, info) {\r\n        return fetch('/api/empireInfo', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, info })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            // After saving, reload from backend with cache-busting param\r\n            return fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                });\r\n        });\r\n    }\r\n\r\n    // Edit panel for empire info\r\n    function EmpireEditPanel({ name, onCancel }) {\r\n        // Only initialize edit state from empireInfo[name] when the component mounts\r\n        const info = empireInfo[name] || {};\r\n        const [edit, setEdit] = useState(info);\r\n\r\n        // Do NOT use useEffect to update edit state from empireInfo.\r\n        // This ensures the text fields are not reset while editing.\r\n\r\n        function handleChange(e) {\r\n            setEdit({ ...edit, [e.target.name]: e.target.value });\r\n        }\r\n        function handleSave(e) {\r\n            e.preventDefault();\r\n            saveEmpireInfo(name, edit).then(() => {\r\n                onCancel();\r\n            });\r\n        }\r\n\r\n        return (\r\n            <form className=\"empire-edit-form\" onSubmit={handleSave}>\r\n                <label>\r\n                    Lore:\r\n                    <textarea\r\n                        name=\"lore\"\r\n                        value={edit.lore || ''}\r\n                        onChange={handleChange}\r\n                        rows={3}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Stats:\r\n                    <input name=\"stats\" value={edit.stats || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Ethics:\r\n                    <input name=\"ethics\" value={edit.ethics || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Civics:\r\n                    <input name=\"civics\" value={edit.civics || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Special Info:\r\n                    <input name=\"special\" value={edit.special || ''} onChange={handleChange} />\r\n                </label>\r\n                <div style={{display: 'flex', gap: '1rem', marginTop: '1rem'}}>\r\n                    <button type=\"submit\" className=\"empire-save-btn\">Save</button>\r\n                    <button type=\"button\" className=\"empire-back-btn\" onClick={onCancel}>Cancel</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    // Treaties: permissions\r\n    function canEditTreaty(treaty) {\r\n        if (!account) return false;\r\n        return account.username === treaty.owner || account.username === \"GameMaster\";\r\n    }\r\n    function canTransferTreaty(treaty) {\r\n        return account && account.username === \"GameMaster\";\r\n    }\r\n\r\n    // Treaties: open new form\r\n    function handleAddTreaty() {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'new',\r\n            data: null\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: open edit\r\n    function handleEditTreaty(treaty) {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'edit',\r\n            data: treaty\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: open view\r\n    function handleViewTreaty(treaty) {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'view',\r\n            data: treaty\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: cancel form\r\n    function handleCancelTreatyForm() {\r\n        setTreatyDialog({\r\n            open: false,\r\n            mode: null,\r\n            data: null\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: save (create or update)\r\n    function handleSaveTreaty(e) {\r\n        e.preventDefault();\r\n        setTreatyError('');\r\n        setTreatySaving(true);\r\n        const isEdit = treatyEditId != null;\r\n        const form = { ...treatyForm };\r\n        if (!form.title.trim() || !form.content.trim() || !form.participants.length) {\r\n            setTreatyError('Title, content, and at least one participant are required.');\r\n            setTreatySaving(false);\r\n            return;\r\n        }\r\n        if (!form.owner) form.owner = account ? account.username : '';\r\n        if (!form.status) form.status = 'discussion';\r\n        if (!form.id) form.id = isEdit ? treatyEditId : Date.now().toString();\r\n\r\n        fetch('/api/treaties', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(form)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                // Always fetch the latest treaties from /treaties.json after save\r\n                return fetch('/treaties.json?ts=' + Date.now())\r\n                    .then(res => res.json())\r\n                    .then(data2 => {\r\n                        setTreaties(Array.isArray(data2) ? data2 : []);\r\n                        setTreatyForm(null);\r\n                        setTreatyEditId(null);\r\n                        setShowTreatyForm(false);\r\n                        setTreatyViewId(form.id);\r\n                    });\r\n            } else {\r\n                setTreatyError(data.error || 'Failed to save treaty');\r\n            }\r\n        })\r\n        .catch(() => setTreatyError('Failed to save treaty'))\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // Treaties: transfer ownership (GM only)\r\n    function handleTransferTreatyOwner(treaty, newOwner) {\r\n        if (!canTransferTreaty(treaty)) return;\r\n        setTreatySaving(true);\r\n        fetch('/api/treaties/transfer', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id: treaty.id, newOwner })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                return fetch('/treaties.json')\r\n                    .then(res => res.json())\r\n                    .then(data2 => setTreaties(Array.isArray(data2) ? data2 : []));\r\n            }\r\n        })\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // Treaties: form field change\r\n    function handleTreatyFormChange(e) {\r\n        const { name, value, type, options } = e.target;\r\n        if (type === 'select-multiple') {\r\n            const vals = Array.from(options).filter(o => o.selected).map(o => o.value);\r\n            setTreatyForm(f => ({ ...f, [name]: vals }));\r\n        } else {\r\n            setTreatyForm(f => ({ ...f, [name]: value }));\r\n        }\r\n    }\r\n\r\n    // Treaties: render\r\n    function renderTreatyForm() {\r\n        if (!treatyForm) return null;\r\n        return (\r\n            <form className=\"treaty-form card\" onSubmit={handleSaveTreaty}>\r\n                <div className=\"treaty-form-header\">\r\n                    <input\r\n                        name=\"title\"\r\n                        placeholder=\"Treaty Title\"\r\n                        value={treatyForm.title}\r\n                        onChange={handleTreatyFormChange}\r\n                        className=\"login-input\"\r\n                        required\r\n                        disabled={treatySaving}\r\n                    />\r\n                    <Dropdown\r\n                        value={treatyForm.status}\r\n                        onChange={handleTreatyFormChange}\r\n                        options={TREATY_STATUS_OPTIONS}\r\n                        placeholder=\"Select status...\"\r\n                        className=\"login-input\"\r\n                        disabled={treatySaving}\r\n                    />\r\n                </div>\r\n                <div className=\"treaty-form-participants\">\r\n                    <div className=\"participants-select\">\r\n                        <label className=\"participants-label\">Participants</label>\r\n                        <select\r\n                            name=\"participants\"\r\n                            value={treatyForm.participants}\r\n                            onChange={handleTreatyFormChange}\r\n                            className=\"login-input\"\r\n                            multiple\r\n                            disabled={treatySaving}\r\n                        >\r\n                            {getEmpireNames().map(e => (\r\n                                <option key={e} value={e}>{e}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    {account && account.username === \"GameMaster\" && (\r\n                        <div className=\"owner-select\">\r\n                            <label className=\"owner-label\">Owner:</label>\r\n                            <Dropdown\r\n                                value={treatyForm.owner}\r\n                                onChange={handleTreatyFormChange}\r\n                                options={Object.keys(accounts).map(acc => ({ value: acc, label: acc }))}\r\n                                placeholder=\"Select owner...\"\r\n                                className=\"login-input\"\r\n                                disabled={treatySaving}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <label className=\"treaty-content-label\">Treaty Content</label>\r\n                <textarea\r\n                    name=\"content\"\r\n                    placeholder=\"Treaty Content\"\r\n                    value={treatyForm.content}\r\n                    onChange={handleTreatyFormChange}\r\n                    className=\"login-input\"\r\n                    rows={9}\r\n                    required\r\n                />\r\n                <div className=\"treaty-form-actions\">\r\n                    <button type=\"submit\" className=\"empire-save-btn\" disabled={treatySaving}>\r\n                        {treatyEditId ? \"Save Changes\" : \"Create Treaty\"}\r\n                    </button>\r\n                    <button type=\"button\" className=\"empire-back-btn\" onClick={handleCancelTreatyForm} disabled={treatySaving}>Cancel</button>\r\n                    {treatyError && <ErrorMessage className=\"treaty-error\">{treatyError}</ErrorMessage>}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    function renderTreatyView(treaty) {\r\n        const statusObj = TREATY_STATUSES.find(s => s.value === treaty.status);\r\n        return (\r\n            <div className=\"treaty-view card\">\r\n                <div className=\"treaty-view-header\">\r\n                    <h2 className=\"treaty-title\">{treaty.title}</h2>\r\n                    <span className=\"treaty-status\" style={{color: statusObj.color}}>{statusObj ? statusObj.label : treaty.status}</span>\r\n                </div>\r\n                <div className=\"treaty-view-owner\">\r\n                    Owner: {treaty.owner}\r\n                </div>\r\n                <div className=\"treaty-view-participants\">\r\n                    <b>Participants:</b> {treaty.participants && treaty.participants.length > 0 ? treaty.participants.join(', ') : <i>None</i>}\r\n                </div>\r\n                <div className=\"treaty-content-static\">\r\n                    {treaty.content}\r\n                </div>\r\n                <div className=\"treaty-view-actions\">\r\n                    <button className=\"empire-back-btn\" onClick={() => setTreatyViewId(null)}>Back</button>\r\n                    {canEditTreaty(treaty) && (\r\n                        <button className=\"empire-save-btn\" onClick={() => handleEditTreaty(treaty)}>Edit</button>\r\n                    )}\r\n                    {canTransferTreaty(treaty) && (\r\n                        <select\r\n                            value={treaty.owner}\r\n                            onChange={e => handleTransferTreatyOwner(treaty, e.target.value)}\r\n                            className=\"owner-transfer-select\"\r\n                        >\r\n                            {Object.keys(accounts).map(acc => (\r\n                                <option key={acc} value={acc}>{acc}</option>\r\n                            ))}\r\n                        </select>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Only show accounts tab for GameMaster\r\n    const showAccountsTab = account && account.username === \"GameMaster\";\r\n    const tabs = [\r\n        { key: 'channels', label: 'Channels' },\r\n        { key: 'empires', label: 'Empires' },\r\n        { key: 'treaties', label: 'Treaties' }\r\n    ];\r\n    if (showAccountsTab) {\r\n        tabs.push({ key: 'accounts', label: 'Manage Accounts' });\r\n        tabs.push({ key: 'manage-empires', label: 'Manage Empires' });\r\n    }\r\n\r\n    // Ref for account edit panel\r\n    const accountEditPanelRef = useRef(null);\r\n\r\n    // Scroll to edit panel when editAccount changes\r\n    useEffect(() => {\r\n        if (editAccount && accountEditPanelRef.current) {\r\n            accountEditPanelRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, [editAccount]);\r\n\r\n    // --- MODIFIED: Only allow delete if GM and permission enabled ---\r\n    function handleDeleteMessage(boardKey, msgIdx) {\r\n        if (!account || account.username !== \"GameMaster\" || !gmPermissions.canDeleteMessages) return;\r\n        if (!window.confirm(\"Delete this message?\")) return;\r\n        fetch('/api/messages/delete', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ board: boardKey, index: Number(msgIdx) })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(boardKey)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [boardKey]: data\r\n                    }));\r\n                });\r\n        });\r\n    }\r\n\r\n    // --- Treaties: filtered and sorted by search ---\r\n    const filteredTreaties = treatySearch.trim()\r\n        ? treaties.filter(t =>\r\n            (t.title && t.title.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.content && t.content.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.owner && t.owner.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (Array.isArray(t.participants) && t.participants.some(p => p.toLowerCase().includes(treatySearch.toLowerCase())))\r\n        )\r\n        : treaties;\r\n    const sortedTreaties = [...filteredTreaties].sort((a, b) => {\r\n        if (treatySort === 'title') return a.title.localeCompare(b.title);\r\n        if (treatySort === 'owner') return a.owner.localeCompare(b.owner);\r\n        return 0;\r\n    });\r\n\r\n    // --- Empires: filtered and sorted by search ---\r\n    const filteredEmpires = empireSearch.trim()\r\n        ? getEmpireNames().filter(e => e.toLowerCase().includes(empireSearch.toLowerCase()))\r\n        : getEmpireNames();\r\n    const sortedEmpires = [...filteredEmpires].sort((a, b) => {\r\n        if (empireSort === 'name') return a.localeCompare(b);\r\n        return 0;\r\n    });\r\n\r\n    // Only show login page if not logged in\r\n    if (!account) {\r\n        return (\r\n            <div className=\"app-container\">\r\n                <header className=\"header\">\r\n                    <h1>Stellaris RP Chronicler</h1>\r\n                </header>\r\n                <main className=\"main-content\">\r\n                    <section className=\"account-section card\">\r\n                        <h2 className=\"login-title\">Login</h2>\r\n                        <form onSubmit={handleLogin} className=\"account-form login-form\">\r\n                            <div className=\"login-fields\">\r\n                                <input\r\n                                    placeholder=\"Empire name\"\r\n                                    value={loginUser}\r\n                                    onChange={e => setLoginUser(e.target.value)}\r\n                                    required\r\n                                    disabled={!accountsLoaded}\r\n                                    className=\"login-input\"\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={loginPass}\r\n                                    onChange={e => setLoginPass(e.target.value)}\r\n                                    required\r\n                                    disabled={!accountsLoaded}\r\n                                    className=\"login-input\"\r\n                                />\r\n                            </div>\r\n                            <button type=\"submit\" disabled={!accountsLoaded} className=\"login-btn\">Login</button>\r\n                        </form>\r\n                        {!accountsLoaded && !error && <LoadingMessage>Loading accounts...</LoadingMessage>}\r\n                        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                    </section>\r\n                </main>\r\n                <footer className=\"footer\">\r\n                    <span>Stellaris RP Chronicler &copy; {new Date().getFullYear()}</span>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <header className=\"header\">\r\n                <h1>Stellaris RP Chronicler</h1>\r\n                <div className=\"tabs-bar\">\r\n                    {tabs.map(tab => (\r\n                        <button\r\n                            key={tab.key}\r\n                            className={`tab-btn${activeTab === tab.key ? ' active' : ''}`}\r\n                            onClick={() => {\r\n                                setActiveTab(tab.key);\r\n                                setEmpirePage(null);\r\n                                setEditEmpire(null);\r\n                                setEditAccount(null);\r\n                                // Removed setTreatyViewId and setShowTreatyForm calls\r\n                            }}\r\n                        >\r\n                            {tab.label}\r\n                        </button>\r\n                    ))}\r\n                    <MenuDropdown\r\n                        showMenu={showMenu}\r\n                        showPermissions={showPermissions}\r\n                        showRoadmap={showRoadmap}\r\n                        handleMenuToggle={handleMenuToggle}\r\n                        handleLogout={handleLogout}\r\n                        account={account}\r\n                        handlePermissionsToggle={handlePermissionsToggle}\r\n                        gmPermissions={gmPermissions}\r\n                        handlePermissionChange={handlePermissionChange}\r\n                        handleRoadmapToggle={handleRoadmapToggle}\r\n                        menuDropdownRef={menuDropdownRef}\r\n                        permissionsDropdownRef={permissionsDropdownRef}\r\n                    />\r\n                </div>\r\n            </header>\r\n            <main className=\"main-content\">\r\n                {showRoadmap ? (\r\n                    <RoadmapTab onClose={handleRoadmapToggle} />\r\n                ) : activeTab === 'treaties' ? (\r\n                    <section className=\"treaties-section card\">\r\n                        <div className=\"treaties-header\">\r\n                            <h2>Treaties, Contracts & Agreements</h2>\r\n                            <div style={{display: 'flex', gap: '1rem', alignItems: 'center'}}>\r\n                                {account && (\r\n                                    <button\r\n                                        className=\"empire-save-btn\"\r\n                                        onClick={() => openTreatyDialog('new')}\r\n                                    >\r\n                                        + Add New Treaty\r\n                                    </button>\r\n                                )}\r\n                                {account && account.username === \"GameMaster\" && (\r\n                                    <button\r\n                                        className=\"empire-save-btn\"\r\n                                        style={{background: '#555'}}\r\n                                        onClick={openTreatyJsonEditor}\r\n                                        title=\"Edit treaties.json directly\"\r\n                                    >\r\n                                        Edit treaties.json\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {/* --- Treaty JSON Editor Modal (GM only) --- */}\r\n                        {showTreatyJsonEditor && account && account.username === \"GameMaster\" && (\r\n                            <div className=\"modal-overlay\" onClick={closeTreatyJsonEditor}>\r\n                                <div className=\"modal-content\" style={{maxWidth: 900, width: '98vw'}} onClick={e => e.stopPropagation()}>\r\n                                    <h2>JSON</h2>\r\n                                    <form onSubmit={handleTreatyJsonSubmit}>\r\n                                        <textarea\r\n                                            value={treatyJsonText}\r\n                                            onChange={handleTreatyJsonChange}\r\n                                            rows={24}\r\n                                            style={{\r\n                                                width: '100%',\r\n                                                fontFamily: 'monospace',\r\n                                                fontSize: '1em',\r\n                                                borderRadius: 8,\r\n                                                border: '1.5px solid var(--accent)',\r\n                                                background: 'var(--primary-bg)',\r\n                                                color: 'var(--text)',\r\n                                                marginBottom: '1em'\r\n                                            }}\r\n                                            spellCheck={false}\r\n                                            disabled={treatyJsonSaving}\r\n                                        />\r\n                                        {treatyJsonError && <ErrorMessage>{treatyJsonError}</ErrorMessage>}\r\n                                        <div style={{display: 'flex', gap: '1rem', justifyContent: 'flex-end'}}>\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                className=\"empire-back-btn\"\r\n                                                style={{background: '#555'}}\r\n                                                onClick={closeTreatyJsonEditor}\r\n                                                disabled={treatyJsonSaving}\r\n                                            >Cancel</button>\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                className=\"empire-save-btn\"\r\n                                                disabled={treatyJsonSaving}\r\n                                            >Save treaties.json</button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {/* --- Treaty Search Input & Sort --- */}\r\n                        <SearchSortBar\r\n                            searchValue={treatySearch}\r\n                            onSearchChange={setTreatySearch}\r\n                            onClearSearch={() => setTreatySearch('')}\r\n                            sortValue={treatySort}\r\n                            onSortChange={setTreatySort}\r\n                            sortOptions={[\r\n                                { value: 'title', label: 'Sort by Title' },\r\n                                { value: 'owner', label: 'Sort by Owner' }\r\n                            ]}\r\n                            placeholder=\"Search treaties by title, content, owner, or participant...\"\r\n                            searchClass=\"treaty-search-input\"\r\n                            sortClass=\"treaty-sort-select\"\r\n                        />\r\n                        {/* Dialogs */}\r\n                        {treatyDialog.open && treatyDialog.mode !== 'view' && (\r\n                            <TreatyDialog\r\n                                open={treatyDialog.open}\r\n                                mode={treatyDialog.mode}\r\n                                data={treatyDialog.data}\r\n                                onSave={handleTreatySave}\r\n                                onClose={closeTreatyDialog}\r\n                                error={treatyError}\r\n                                saving={treatySaving}\r\n                                empires={empires.map(e => e.name)}\r\n                                accounts={accounts}\r\n                                account={account}\r\n                            />\r\n                        )}\r\n                        {treatyDialog.open && treatyDialog.mode === 'view' && (\r\n                            <TreatyView\r\n                                treaty={treatyDialog.data}\r\n                                onBack={closeTreatyDialog}\r\n                                onEdit={() => openTreatyDialog('edit', treatyDialog.data)}\r\n                                onTransfer={newOwner => handleTreatyTransferOwner(treatyDialog.data.id, newOwner)}\r\n                                canEdit={canEditTreaty(treatyDialog.data)}\r\n                                canTransfer={canTransferTreaty(treatyDialog.data)}\r\n                                accounts={accounts}\r\n                            />\r\n                        )}\r\n                        {/* List */}\r\n                        <TreatyList\r\n                            treaties={sortedTreaties}\r\n                            loaded={treatiesLoaded}\r\n                            onView={treaty => setTreatyDialog({ open: true, mode: 'view', data: treaty })}\r\n                            canEditTreaty={canEditTreaty}\r\n                            onEdit={openTreatyDialog}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'manage-empires' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Empires</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateEmpire(\r\n                                e,\r\n                                newEmpireName,\r\n                                empires,\r\n                                setNewEmpireError,\r\n                                setNewEmpireLoading,\r\n                                setEmpires,\r\n                                setNewEmpireName\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"New empire name\"\r\n                                    value={newEmpireName}\r\n                                    onChange={e => setNewEmpireName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={newEmpireLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={newEmpireLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create Empire</button>\r\n                            </div>\r\n                        </form>\r\n                        {newEmpireError && <ErrorMessage>{newEmpireError}</ErrorMessage>}\r\n                        <h3>Empires & Account Assignment</h3>\r\n                        <EmpireList\r\n                            empires={empires}\r\n                            accounts={accounts}\r\n                            onLink={handleLinkAccount}\r\n                            onUnlink={handleUnlinkAccount}\r\n                            onDelete={(name) => handleDeleteEmpire(\r\n                                name,\r\n                                setNewEmpireLoading,\r\n                                setNewEmpireError,\r\n                                setEmpires\r\n                            )}\r\n                            loading={newEmpireLoading}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'accounts' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Accounts</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateAccount(\r\n                                e,\r\n                                newAccountName,\r\n                                newAccountPass,\r\n                                accounts,\r\n                                setAccountError,\r\n                                setAccountSuccess,\r\n                                setAccountsTabLoading,\r\n                                setAccounts,\r\n                                setNewAccountName,\r\n                                setNewAccountPass\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"Account name\"\r\n                                    value={newAccountName}\r\n                                    onChange={e => setNewAccountName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={newAccountPass}\r\n                                    onChange={e => setNewAccountPass(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={accountsTabLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create Account</button>\r\n                            </div>\r\n                        </form>\r\n                        {accountError && <ErrorMessage>{accountError}</ErrorMessage>}\r\n                        {accountSuccess && <LoadingMessage style={{color:'limegreen'}}>{accountSuccess}</LoadingMessage>}\r\n\r\n                        {/* Restore account list with Edit/Delete buttons */}\r\n                        <h3>All Accounts</h3>\r\n                        <AccountList\r\n                            accounts={accounts}\r\n                            onEdit={acc => {\r\n                                setEditAccount(acc);\r\n                                setEditAccountName(acc);\r\n                                setEditAccountPass('');\r\n                                setEditAccountError('');\r\n                            }}\r\n                            onDelete={acc => handleDeleteAccount(\r\n                                acc,\r\n                                setEditAccountLoading,\r\n                                setEditAccountError,\r\n                                setAccounts,\r\n                                setAccountSuccess\r\n                            )}\r\n                            editAccountLoading={editAccountLoading}\r\n                        />\r\n                        {editAccount && (\r\n                            <div\r\n                                className=\"account-edit-panel card\"\r\n                                ref={accountEditPanelRef}\r\n                            >\r\n                                <h3>Edit Account: <b>{editAccount}</b></h3>\r\n                                <form onSubmit={e => handleRenameAccount(\r\n                                    e,\r\n                                    editAccount,\r\n                                    editAccountName,\r\n                                    setEditAccountLoading,\r\n                                    setEditAccountError,\r\n                                    setAccounts,\r\n                                    setEditAccount,\r\n                                    setAccountSuccess\r\n                                )} className=\"edit-account-form\">\r\n                                    <label>\r\n                                        Rename to:\r\n                                        <input\r\n                                            value={editAccountName}\r\n                                            onChange={e => setEditAccountName(e.target.value)}\r\n                                            className=\"login-input\"\r\n                                            disabled={editAccountLoading}\r\n                                        />\r\n                                    </label>\r\n                                    <button type=\"submit\" className=\"empire-save-btn\" disabled={editAccountLoading}>Rename</button>\r\n                                </form>\r\n                                <form onSubmit={e => handleChangePassword(\r\n                                    e,\r\n                                    editAccount,\r\n                                    editAccountPass,\r\n                                    setEditAccountLoading,\r\n                                    setEditAccountError,\r\n                                    setAccounts,\r\n                                    setEditAccount,\r\n                                    setAccountSuccess\r\n                                )} className=\"change-password-form\">\r\n                                    <label>\r\n                                        New Password:\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            value={editAccountPass}\r\n                                            onChange={e => setEditAccountPass(e.target.value)}\r\n                                            className=\"login-input\"\r\n                                            disabled={editAccountLoading}\r\n                                        />\r\n                                    </label>\r\n                                    <button type=\"submit\" className=\"empire-save-btn\" disabled={editAccountLoading}>Change Password</button>\r\n                                </form>\r\n                                {editAccountError && <div className=\"login-error\">{editAccountError}</div>}\r\n                                <button className=\"empire-back-btn\" onClick={() => setEditAccount(null)} disabled={editAccountLoading}>Cancel</button>\r\n                            </div>\r\n                        )}\r\n                    </section>\r\n                ) : activeTab === 'empires' ? (\r\n                    editEmpire ? (\r\n                        <section className=\"empires-info-section card\">\r\n                            <h2>Edit {editEmpire}</h2>\r\n                            <EmpireEditPanel\r\n                                name={editEmpire}\r\n                                onCancel={() => setEditEmpire(null)}\r\n                                empireInfo={empireInfo}\r\n                                saveEmpireInfo={saveEmpireInfo}\r\n                            />\r\n                        </section>\r\n                    ) : empirePage ? (\r\n                        <EmpirePanel\r\n                            name={empirePage}\r\n                            canEdit={account && account.username === empirePage}\r\n                            empireInfo={empireInfo}\r\n                            getEmpireAccount={getEmpireAccount}\r\n                            setEmpirePage={setEmpirePage}\r\n                            setEditEmpire={setEditEmpire}\r\n                        />\r\n                    ) : (\r\n                        <section className=\"empires-info-section card\">\r\n                            <div className=\"empires-header\">\r\n                                <h2>Empires</h2>\r\n                            </div>\r\n                            <SearchSortBar\r\n                                searchValue={empireSearch}\r\n                                onSearchChange={setEmpireSearch}\r\n                                onClearSearch={() => setEmpireSearch('')}\r\n                                sortValue={empireSort}\r\n                                onSortChange={setEmpireSort}\r\n                                sortOptions={[\r\n                                    { value: 'name', label: 'Sort by Name' }\r\n                                ]}\r\n                                placeholder=\"Search empires by name...\"\r\n                                searchClass=\"empire-search-input\"\r\n                                sortClass=\"empire-sort-select\"\r\n                            />\r\n                            <div className=\"empires-info-list\" style={{display: 'flex', flexWrap: 'wrap', gap: '1.5rem', justifyContent: 'flex-start'}}>\r\n                                <EmpireList\r\n                                    empires={sortedEmpires.map(name => empires.find(e => e.name === name))}\r\n                                    accounts={accounts}\r\n                                    account={account}\r\n                                    setEmpirePage={setEmpirePage}\r\n                                    setEditEmpire={setEditEmpire}\r\n                                    getEmpireAccount={getEmpireAccount}\r\n                                />\r\n                            </div>\r\n                        </section>\r\n                    )\r\n                ) : (\r\n                    <>\r\n                        {!account ? (\r\n                            <section className=\"account-section card\">\r\n                                <h2 className=\"login-title\">Login</h2>\r\n                                <form onSubmit={handleLogin} className=\"account-form login-form\">\r\n                                    <div className=\"login-fields\">\r\n                                        <input\r\n                                            placeholder=\"Empire name\"\r\n                                            value={loginUser}\r\n                                            onChange={e => setLoginUser(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            value={loginPass}\r\n                                            onChange={e => setLoginPass(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                    </div>\r\n                                    <button type=\"submit\" disabled={!accountsLoaded} className=\"login-btn\">Login</button>\r\n                                </form>\r\n                                {!accountsLoaded && <LoadingMessage>Loading accounts...</LoadingMessage>}\r\n                                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                            </section>\r\n                        ) : (\r\n                            // Center the channels page\r\n                            <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                                <section className=\"boards-section\">\r\n                                    <div className=\"channels-main\">\r\n                                        <div className=\"channels-sidebar\">\r\n                                            <div className=\"boards-list card\">\r\n                                                <h2>\r\n                                                    {account && account.username === \"GameMaster\"\r\n                                                        ? \"All Boards\"\r\n                                                        : \"Your Diplomatic Channels\"}\r\n                                                </h2>\r\n                                                <div className=\"boards-list-header\">\r\n                                                    <span className=\"boards-list-count\">\r\n                                                        {filteredBoards.length} {filteredBoards.length === 1 ? \"channel\" : \"channels\"}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <ul className=\"boards-list-ul\">\r\n                                                    {filteredBoards.length === 0 && (\r\n                                                        <li className=\"no-channels\">No channels available.</li>\r\n                                                    )}\r\n                                                    {filteredBoards.map(([a, b]) => {\r\n                                                        const key = a + '|' + b;\r\n                                                        // Modular: allow custom cutoff per context\r\n                                                        const maxNameLen = 16;\r\n                                                        return (\r\n                                                            <li key={key} className={`boards-list-item${selected === key ? ' active' : ''}`}>\r\n                                                                <button\r\n                                                                    className=\"board-btn\"\r\n                                                                    onClick={() => handleBoardSelect([a, b])}\r\n                                                                >\r\n                                                                    <span className=\"board-nations\" title={a}>\r\n                                                                        {cutOffDotter.cut(a, maxNameLen)}\r\n                                                                    </span>\r\n                                                                    <span className=\"board-arrow\">↔</span>\r\n                                                                    <span className=\"board-nations\" title={b}>\r\n                                                                        {cutOffDotter.cut(b, maxNameLen)}\r\n                                                                    </span>\r\n                                                                </button>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"channels-content\">\r\n                                            <div className=\"board-messages card\">\r\n                                                {(selected && filteredBoards.length > 0) ? (\r\n                                                    <div className=\"board-messages-inner\">\r\n                                                        <div className=\"board-title-row\">\r\n                                                            <h2 className=\"board-title\">{selected.replace('|', ' ↔ ')}</h2>\r\n                                                        </div>\r\n                                                        <div className=\"messages-panel\">\r\n                                                            <div className=\"messages-list-container\">\r\n                                                                <MessageList\r\n                                                                    messages={messages[selected] || []}\r\n                                                                    selected={selected}\r\n                                                                    account={account}\r\n                                                                    gmPermissions={gmPermissions}\r\n                                                                    handleDeleteMessage={handleDeleteMessage}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <form onSubmit={postMessage} className=\"message-form message-form-bottom\">\r\n                                                                <input\r\n                                                                    placeholder=\"Your empire\"\r\n                                                                    value={account.username}\r\n                                                                    disabled\r\n                                                                    required\r\n                                                                    className=\"author-input\"\r\n                                                                />\r\n                                                                <input\r\n                                                                    placeholder=\"Message\"\r\n                                                                    value={text}\r\n                                                                    onChange={e => setText(e.target.value)}\r\n                                                                    required\r\n                                                                    className=\"text-input\"\r\n                                                                />\r\n                                                                <button type=\"submit\" className=\"send-btn\">Send</button>\r\n                                                            </form>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div className=\"no-messages\">Select a channel to view messages.</div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </main>\r\n            <footer className=\"footer\">\r\n                <span>Stellaris RP Chronicler &copy; {new Date().getFullYear()}</span>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,eAAe,CACtB,MAAO,oBAAoB,CAC3B,MAAO,mBAAmB,CAC1B,MAAO,kBAAkB,CACzB,MAAO,oBAAoB,CAC3B,OAASC,cAAc,KAAQ,wBAAwB,CACvD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,eAAe,KAAM,8BAA8B,CAC1D,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,OACIC,mBAAmB,CACnBC,kBAAkB,CAClBC,mBAAmB,CACnBC,oBAAoB,CACpBC,mBAAmB,CACnBC,kBAAkB,KACf,qBAAqB,CAC5B,OAASC,aAAa,KAAQ,yBAAyB,CACvD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,OAASC,eAAe,KAAQ,wBAAwB,CACxD,OAASC,qBAAqB,KAAQ,6BAA6B,CACnE,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,OAASC,YAAY,CAAEC,cAAc,KAAQ,uBAAuB,CACpE,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,YAAY,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEhD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGpC,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACqC,QAAQ,CAAEC,WAAW,CAAC,CAAGtC,QAAQ,CAAC,IAAM,CAC3C,KAAM,CAAAuC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC,CAC5D,MAAO,CAAAF,KAAK,CAAGA,KAAK,CAAG,IAAI,CAC/B,CAAC,CAAC,CACF,KAAM,CAACG,QAAQ,CAAEC,WAAW,CAAC,CAAG3C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC5C,KAAM,CAAC4C,IAAI,CAAEC,OAAO,CAAC,CAAG7C,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAAA8C,UAAU,CAAG5C,MAAM,CAAC,CAAC,CAC3B,KAAM,CAAA6C,cAAc,CAAG7C,MAAM,CAAC,IAAI,CAAC,CACnC,KAAM,CAAC8C,QAAQ,CAAEC,WAAW,CAAC,CAAGjD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC5C,KAAM,CAACkD,cAAc,CAAEC,iBAAiB,CAAC,CAAGnD,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACoD,OAAO,CAAEC,UAAU,CAAC,CAAGrD,QAAQ,CAAC,IAAM,CACzC,KAAM,CAAAuC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CACtD,MAAO,CAAAF,KAAK,CAAGe,IAAI,CAACC,KAAK,CAAChB,KAAK,CAAC,CAAG,IAAI,CAC3C,CAAC,CAAC,CACF,KAAM,CAACiB,SAAS,CAAEC,YAAY,CAAC,CAAGzD,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAC0D,SAAS,CAAEC,YAAY,CAAC,CAAG3D,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAC4D,KAAK,CAAEC,QAAQ,CAAC,CAAG7D,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAAC8D,SAAS,CAAEC,YAAY,CAAC,CAAG/D,QAAQ,CAAC,UAAU,CAAC,CACtD,KAAM,CAACgE,UAAU,CAAEC,aAAa,CAAC,CAAGjE,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACkE,UAAU,CAAEC,aAAa,CAAC,CAAGnE,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACoE,UAAU,CAAEC,aAAa,CAAC,CAAGrE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEhD;AACA,KAAM,CAACsE,cAAc,CAAEC,iBAAiB,CAAC,CAAGvE,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACwE,cAAc,CAAEC,iBAAiB,CAAC,CAAGzE,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAAC0E,YAAY,CAAEC,eAAe,CAAC,CAAG3E,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAAC4E,cAAc,CAAEC,iBAAiB,CAAC,CAAG7E,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAAC8E,kBAAkB,CAAEC,qBAAqB,CAAC,CAAG/E,QAAQ,CAAC,KAAK,CAAC,CACnE,KAAM,CAACgF,WAAW,CAAEC,cAAc,CAAC,CAAGjF,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACkF,eAAe,CAAEC,kBAAkB,CAAC,CAAGnF,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACoF,eAAe,CAAEC,kBAAkB,CAAC,CAAGrF,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACsF,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGvF,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACwF,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGzF,QAAQ,CAAC,KAAK,CAAC,CAEnE;AACA,KAAM,CAAC0F,aAAa,CAAEC,gBAAgB,CAAC,CAAG3F,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAAC4F,cAAc,CAAEC,iBAAiB,CAAC,CAAG7F,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAAC8F,gBAAgB,CAAEC,mBAAmB,CAAC,CAAG/F,QAAQ,CAAC,KAAK,CAAC,CAE/D;AACA,KAAM,CAACgG,QAAQ,CAAEC,WAAW,CAAC,CAAGjG,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACkG,cAAc,CAAEC,iBAAiB,CAAC,CAAGnG,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACoG,YAAY,CAAEC,eAAe,CAAC,CAAGrG,QAAQ,CAAC,CAAEsG,IAAI,CAAE,KAAK,CAAEC,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CACzF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAG1G,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAC2G,YAAY,CAAEC,eAAe,CAAC,CAAG5G,QAAQ,CAAC,KAAK,CAAC,CAEvD;AACA,KAAM,CAAC6G,oBAAoB,CAAEC,uBAAuB,CAAC,CAAG9G,QAAQ,CAAC,KAAK,CAAC,CACvE,KAAM,CAAC+G,cAAc,CAAEC,iBAAiB,CAAC,CAAGhH,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACiH,eAAe,CAAEC,kBAAkB,CAAC,CAAGlH,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACmH,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGpH,QAAQ,CAAC,KAAK,CAAC,CAE/D,QAAS,CAAAqH,oBAAoBA,CAAA,CAAG,CAC5BH,kBAAkB,CAAC,EAAE,CAAC,CACtBE,mBAAmB,CAAC,KAAK,CAAC,CAC1B;AACAE,KAAK,CAAC,oBAAoB,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CACnCC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVQ,iBAAiB,CAAC1D,IAAI,CAACsE,SAAS,CAACpB,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAChDM,uBAAuB,CAAC,IAAI,CAAC,CACjC,CAAC,CAAC,CACDe,KAAK,CAAC,IAAM,CACTb,iBAAiB,CAAC,IAAI,CAAC,CACvBF,uBAAuB,CAAC,IAAI,CAAC,CACjC,CAAC,CAAC,CACV,CACA,QAAS,CAAAgB,qBAAqBA,CAAA,CAAG,CAC7BhB,uBAAuB,CAAC,KAAK,CAAC,CAC9BI,kBAAkB,CAAC,EAAE,CAAC,CACtBE,mBAAmB,CAAC,KAAK,CAAC,CAC9B,CACA,QAAS,CAAAW,sBAAsBA,CAACC,CAAC,CAAE,CAC/BhB,iBAAiB,CAACgB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CACjChB,kBAAkB,CAAC,EAAE,CAAC,CAC1B,CACA,QAAS,CAAAiB,sBAAsBA,CAACH,CAAC,CAAE,CAC/BA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClBlB,kBAAkB,CAAC,EAAE,CAAC,CACtBE,mBAAmB,CAAC,IAAI,CAAC,CACzB,GAAI,CAAAiB,MAAM,CACV,GAAI,CACAA,MAAM,CAAG/E,IAAI,CAACC,KAAK,CAACwD,cAAc,CAAC,CACnC,GAAI,CAACuB,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,CAAE,KAAM,IAAI,CAAAG,KAAK,CAAC,iCAAiC,CAAC,CAClF,CAAE,MAAOC,GAAG,CAAE,CACVvB,kBAAkB,CAAC,gBAAgB,CAAGuB,GAAG,CAACC,OAAO,CAAC,CAClDtB,mBAAmB,CAAC,KAAK,CAAC,CAC1B,OACJ,CACAE,KAAK,CAAC,oBAAoB,CAAE,CACxBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAACS,MAAM,CAC/B,CAAC,CAAC,CACDZ,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd7C,WAAW,CAACoC,MAAM,CAAC,CACnBvB,uBAAuB,CAAC,KAAK,CAAC,CAClC,CAAC,IAAM,CACHI,kBAAkB,CAACV,IAAI,CAAC5C,KAAK,EAAI,8BAA8B,CAAC,CACpE,CACJ,CAAC,CAAC,CACDiE,KAAK,CAAC,IAAMX,kBAAkB,CAAC,8BAA8B,CAAC,CAAC,CAC/D6B,OAAO,CAAC,IAAM3B,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAC9C,CAEA;AACA,KAAM,CAAC4B,YAAY,CAAEC,eAAe,CAAC,CAAGjJ,QAAQ,CAAC,IAAMwC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EAAI,EAAE,CAAC,CAClG,KAAM,CAACyG,YAAY,CAAEC,eAAe,CAAC,CAAGnJ,QAAQ,CAAC,IAAMwC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EAAI,EAAE,CAAC,CAClG;AACA,KAAM,CAAC2G,UAAU,CAAEC,aAAa,CAAC,CAAGrJ,QAAQ,CAAC,OAAO,CAAC,CACrD,KAAM,CAACsJ,UAAU,CAAEC,aAAa,CAAC,CAAGvJ,QAAQ,CAAC,MAAM,CAAC,CACpD;AAEA;AACA,QAAS,CAAAwJ,aAAaA,CAAA,CAAG,CACrBlC,KAAK,CAAC,oBAAoB,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CACnCC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVP,WAAW,CAACqC,KAAK,CAACC,OAAO,CAAC/B,IAAI,CAAC,CAAGA,IAAI,CAAG,EAAE,CAAC,CAC5CL,iBAAiB,CAAC,IAAI,CAAC,CAC3B,CAAC,CAAC,CACD0B,KAAK,CAAC,IAAM1B,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAC7C,CACAlG,SAAS,CAAC,IAAM,CAAEuJ,aAAa,CAAC,CAAC,CAAE,CAAC,CAAE,EAAE,CAAC,CAEzC;AACA,QAAS,CAAAC,gBAAgBA,CAAClD,IAAI,CAAe,IAAb,CAAAC,IAAI,CAAAkD,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACvCrD,eAAe,CAAC,CAAEC,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAEC,IAAK,CAAC,CAAC,CAC3CE,cAAc,CAAC,EAAE,CAAC,CACtB,CACA,QAAS,CAAAmD,iBAAiBA,CAAA,CAAG,CACzBxD,eAAe,CAAC,CAAEC,IAAI,CAAE,KAAK,CAAEC,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CACxDE,cAAc,CAAC,EAAE,CAAC,CACtB,CACA,QAAS,CAAAoD,gBAAgBA,CAACC,IAAI,CAAE,KAAAC,qBAAA,CAC5BpD,eAAe,CAAC,IAAI,CAAC,CACrBF,cAAc,CAAC,EAAE,CAAC,CAClB,KAAM,CAAAuD,OAAO,CAAG,CAAE,GAAGF,IAAK,CAAC,CAC3B,GAAI,CAACE,OAAO,CAACC,KAAK,EAAI,CAACD,OAAO,CAACE,OAAO,EAAI,GAAAH,qBAAA,CAACC,OAAO,CAACG,YAAY,UAAAJ,qBAAA,WAApBA,qBAAA,CAAsBL,MAAM,EAAE,CACrEjD,cAAc,CAAC,4DAA4D,CAAC,CAC5EE,eAAe,CAAC,KAAK,CAAC,CACtB,OACJ,CACA,GAAI,CAACqD,OAAO,CAACI,KAAK,CAAEJ,OAAO,CAACI,KAAK,CAAG,CAAAjH,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEkH,QAAQ,GAAI,EAAE,CAC3D,GAAI,CAACL,OAAO,CAACM,MAAM,CAAEN,OAAO,CAACM,MAAM,CAAG,YAAY,CAClD,GAAI,CAACN,OAAO,CAACO,EAAE,CAAEP,OAAO,CAACO,EAAE,CAAGjD,IAAI,CAACC,GAAG,CAAC,CAAC,CAACiD,QAAQ,CAAC,CAAC,CAEnDnD,KAAK,CAAC,eAAe,CAAE,CACnBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAACqC,OAAO,CAChC,CAAC,CAAC,CACDxC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd;AACA7C,WAAW,CAACyE,IAAI,EAAI,CAChB;AACA,KAAM,CAAAC,GAAG,CAAGD,IAAI,CAACE,SAAS,CAACC,CAAC,EAAIA,CAAC,CAACL,EAAE,GAAKP,OAAO,CAACO,EAAE,CAAC,CACpD,GAAIG,GAAG,GAAK,CAAC,CAAC,CAAE,CACZ,KAAM,CAAAG,OAAO,CAAG,CAAC,GAAGJ,IAAI,CAAC,CACzBI,OAAO,CAACH,GAAG,CAAC,CAAG,CAAE,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAE,GAAGV,OAAQ,CAAC,CAC3C,MAAO,CAAAa,OAAO,CAClB,CAAC,IAAM,CACH,MAAO,CAAC,GAAGJ,IAAI,CAAET,OAAO,CAAC,CAC7B,CACJ,CAAC,CAAC,CACFJ,iBAAiB,CAAC,CAAC,CACvB,CAAC,IAAM,CACHnD,cAAc,CAACF,IAAI,CAAC5C,KAAK,EAAI,uBAAuB,CAAC,CACzD,CACJ,CAAC,CAAC,CACDiE,KAAK,CAAC,IAAMnB,cAAc,CAAC,uBAAuB,CAAC,CAAC,CACpDqC,OAAO,CAAC,IAAMnC,eAAe,CAAC,KAAK,CAAC,CAAC,CAC1C,CACA,QAAS,CAAAmE,yBAAyBA,CAACP,EAAE,CAAEQ,QAAQ,CAAE,CAC7CpE,eAAe,CAAC,IAAI,CAAC,CACrBU,KAAK,CAAC,wBAAwB,CAAE,CAC5BqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAE4C,EAAE,CAAEQ,QAAS,CAAC,CACzC,CAAC,CAAC,CACDvD,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAEU,aAAa,CAAC,CAAC,CACrC,CAAC,CAAC,CACDT,OAAO,CAAC,IAAMnC,eAAe,CAAC,KAAK,CAAC,CAAC,CAC1C,CAEA;AACA,QAAS,CAAAqE,aAAaA,CAACC,MAAM,CAAE,CAC3B,GAAI,CAAC9H,OAAO,CAAE,MAAO,MAAK,CAC1B,MAAO,CAAAA,OAAO,CAACkH,QAAQ,GAAKY,MAAM,CAACb,KAAK,EAAIjH,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACjF,CACA,QAAS,CAAAa,iBAAiBA,CAACD,MAAM,CAAE,CAC/B,MAAO,CAAA9H,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACvD,CAEA,KAAM,CACFc,QAAQ,CACRC,eAAe,CACfC,aAAa,CACbC,WAAW,CACXC,gBAAgB,CAChBC,eAAe,CACfC,uBAAuB,CACvBC,sBAAsB,CACtBC,mBAAmB,CACnBC,eAAe,CACfC,sBACJ,CAAC,CAAG/K,aAAa,CAACqC,OAAO,CAAC,CAE1B;AACA;AACAnD,SAAS,CAAC,IAAM,CACZ,GACI6D,SAAS,GAAK,SAAS,EACvB,CAACI,UAAU,EACX,CAACF,UAAU,CACb,CACE;AACAsD,KAAK,CAAC,uBAAuBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CACrCC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVnC,aAAa,CAACmC,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAGA,IAAI,CAAG,CAAC,CAAC,CAAC,CAC/D,CAAC,CAAC,CACDqB,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC,CACxB,CACJ;AACA,CAAC,CAAE,CAAC/D,SAAS,CAAEI,UAAU,CAAEF,UAAU,CAAC,CAAC,CAEvC;AACA,QAAS,CAAA+H,cAAcA,CAAA,CAAG,CACtB;AACA,MAAO,CAAA5J,OAAO,CAAC6J,GAAG,CAAChE,CAAC,EAAIA,CAAC,CAACiE,IAAI,CAAC,CACnC,CAEA;AACA,QAAS,CAAAC,eAAeA,CAAA,CAAG,CACvB,KAAM,CAAAC,KAAK,CAAGJ,cAAc,CAAC,CAAC,CAC9B,MAAO,CAAA5L,cAAc,CAACgM,KAAK,CAAC,CAChC,CAEA;AACA,QAAS,CAAAC,gBAAgBA,CAACC,UAAU,CAAE,CAClC,KAAM,CAAAC,GAAG,CAAGnK,OAAO,CAACoK,IAAI,CAACvE,CAAC,EAAIA,CAAC,CAACiE,IAAI,GAAKI,UAAU,CAAC,CACpD,MAAO,CAAAC,GAAG,EAAIA,GAAG,CAAClJ,OAAO,CAAGkJ,GAAG,CAAClJ,OAAO,CAAG,IAAI,CAClD,CAEA;AACA,KAAM,CAAAoJ,cAAc,CAAGpJ,OAAO,CACxBA,OAAO,CAACkH,QAAQ,GAAK,YAAY,CAC7B4B,eAAe,CAAC,CAAC,CACjBA,eAAe,CAAC,CAAC,CAACO,MAAM,CAACC,IAAA,MAAC,CAACC,CAAC,CAAEC,CAAC,CAAC,CAAAF,IAAA,OAC9B,CAAAN,gBAAgB,CAACO,CAAC,CAAC,GAAKvJ,OAAO,CAACkH,QAAQ,EAAI8B,gBAAgB,CAACQ,CAAC,CAAC,GAAKxJ,OAAO,CAACkH,QAAQ,EACxF,CAAC,CACH,EAAE,CAER;AACA,QAAS,CAAAuC,iBAAiBA,CAACR,UAAU,CAAES,WAAW,CAAE,CAChDxF,KAAK,CAAC,mBAAmB,CAAE,CACvBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAEyE,UAAU,CAAES,WAAY,CAAC,CACpD,CAAC,CAAC,CACDrF,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd1G,UAAU,CAACsI,IAAI,EACXA,IAAI,CAACsB,GAAG,CAAChE,CAAC,EAAIA,CAAC,CAACiE,IAAI,GAAKI,UAAU,CAAG,CAAE,GAAGrE,CAAC,CAAE5E,OAAO,CAAE0J,WAAY,CAAC,CAAG9E,CAAC,CAC5E,CAAC,CACL,CACJ,CAAC,CAAC,CACN,CACA,QAAS,CAAA+E,mBAAmBA,CAACV,UAAU,CAAE,CACrC/E,KAAK,CAAC,qBAAqB,CAAE,CACzBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAEyE,UAAW,CAAC,CACvC,CAAC,CAAC,CACD5E,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd1G,UAAU,CAACsI,IAAI,EACXA,IAAI,CAACsB,GAAG,CAAChE,CAAC,EAAIA,CAAC,CAACiE,IAAI,GAAKI,UAAU,CAAG,CAAE,GAAGrE,CAAC,CAAE5E,OAAO,CAAE,IAAK,CAAC,CAAG4E,CAAC,CACrE,CAAC,CACL,CACJ,CAAC,CAAC,CACN,CACA;AACA,QAAS,CAAAgF,iBAAiBA,CAACC,IAAI,CAAE,CAC7B,KAAM,CAAAC,GAAG,CAAGD,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC,CAC1B7K,WAAW,CAAC4K,GAAG,CAAC,CAChB1K,YAAY,CAAC4K,OAAO,CAAC,wBAAwB,CAAEF,GAAG,CAAC,CACvD,CAEA;AACAjN,SAAS,CAAC,IAAM,CACZ;AACA,GACI,CAACoC,QAAQ,EACTyB,SAAS,GAAK,UAAU,EACxBI,UAAU,EACVF,UAAU,CACZ,CACE;AACA,GAAIlB,UAAU,CAACuK,OAAO,CAAE,CACpBC,aAAa,CAACxK,UAAU,CAACuK,OAAO,CAAC,CACjCvK,UAAU,CAACuK,OAAO,CAAG,IAAI,CAC7B,CACA,OACJ,CAEA;AACA,KAAM,CAAAH,GAAG,CAAG7K,QAAQ,CAEpB;AACA,KAAM,CAAAkL,aAAa,CAAGA,CAAA,GAAM,CACxBjG,KAAK,CAAC,uBAAuBkG,kBAAkB,CAACN,GAAG,CAAC,EAAE,CAAC,CAClDzF,IAAI,CAACC,GAAG,EAAI,CACT,GAAI,CAACA,GAAG,CAAC+F,EAAE,CAAE,KAAM,IAAI,CAAAjF,KAAK,CAAC,6BAA6B,CAAC,CAC3D,MAAO,CAAAd,GAAG,CAACC,IAAI,CAAC,CAAC,CACrB,CAAC,CAAC,CACDF,IAAI,CAACjB,IAAI,EAAI,CACV7D,WAAW,CAAC+H,IAAI,GAAK,CACjB,GAAGA,IAAI,CACP,CAACwC,GAAG,EAAG1G,IACX,CAAC,CAAC,CAAC,CACP,CAAC,CAAC,CACDqB,KAAK,CAAEY,GAAG,EAAK,CACZ9F,WAAW,CAAC+H,IAAI,GAAK,CACjB,GAAGA,IAAI,CACP,CAACwC,GAAG,EAAG,EACX,CAAC,CAAC,CAAC,CACHQ,OAAO,CAAC9J,KAAK,CAAC,2BAA2B,CAAE6E,GAAG,CAAC,CACnD,CAAC,CAAC,CACV,CAAC,CAED;AACA8E,aAAa,CAAC,CAAC,CAEf;AACAzK,UAAU,CAACuK,OAAO,CAAGM,WAAW,CAACJ,aAAa,CAAE,IAAI,CAAC,CAErD;AACA,MAAO,IAAM,CACT,GAAIzK,UAAU,CAACuK,OAAO,CAAE,CACpBC,aAAa,CAACxK,UAAU,CAACuK,OAAO,CAAC,CACjCvK,UAAU,CAACuK,OAAO,CAAG,IAAI,CAC7B,CACJ,CAAC,CACL,CAAC,CAAE,CAAChL,QAAQ,CAAEyB,SAAS,CAAEI,UAAU,CAAEF,UAAU,CAAC,CAAC,CAEjD;AACA,KAAM,CAAA4J,qBAAqB,CAAG1N,MAAM,CAAC,CAAC,CAAC,CACvCD,SAAS,CAAC,IAAM,CACZ,GAAI,CAACoC,QAAQ,CAAE,OACf,KAAM,CAAAwL,eAAe,CAAGnL,QAAQ,CAACL,QAAQ,CAAC,EAAI,EAAE,CAChD,GAAIwL,eAAe,CAAClE,MAAM,GAAKiE,qBAAqB,CAACP,OAAO,CAAE,CAC1D,GAAItK,cAAc,CAACsK,OAAO,CAAE,CACxBtK,cAAc,CAACsK,OAAO,CAACS,cAAc,CAAC,CAAEC,QAAQ,CAAE,MAAO,CAAC,CAAC,CAC/D,CACAH,qBAAqB,CAACP,OAAO,CAAGQ,eAAe,CAAClE,MAAM,CAC1D,CACJ,CAAC,CAAE,CAACjH,QAAQ,CAAEL,QAAQ,CAAC,CAAC,CAExB;AACA,QAAS,CAAA2L,WAAWA,CAAChG,CAAC,CAAE,CACpBA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClB,GAAI,CAAC/F,QAAQ,EAAI,CAACe,OAAO,EAAI,CAACR,IAAI,CAACqL,IAAI,CAAC,CAAC,CAAE,OAC3C,KAAM,CAAAf,GAAG,CAAG7K,QAAQ,CACpB,KAAM,CAAA6L,GAAG,CAAG,CACRC,KAAK,CAAEjB,GAAG,CACVkB,MAAM,CAAEhL,OAAO,CAACkH,QAAQ,CACxB1H,IAAI,CACJyL,SAAS,CAAE9G,IAAI,CAACC,GAAG,CAAC,CACxB,CAAC,CACDF,KAAK,CAAC,eAAe,CAAE,CACnBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAACsG,GAAG,CAC5B,CAAC,CAAC,CACDzG,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAAC,IAAM,CACRH,KAAK,CAAC,uBAAuBkG,kBAAkB,CAACN,GAAG,CAAC,EAAE,CAAC,CAClDzF,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV7D,WAAW,CAAC+H,IAAI,GAAK,CACjB,GAAGA,IAAI,CACP,CAACwC,GAAG,EAAG1G,IACX,CAAC,CAAC,CAAC,CACP,CAAC,CAAC,CACV,CAAC,CAAC,CACF3D,OAAO,CAAC,EAAE,CAAC,CACf,CAEA;AACA5C,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAqO,GAAG,CAAG,oBAAoB,CAAG/G,IAAI,CAACC,GAAG,CAAC,CAAC,CAC7CkG,OAAO,CAACa,GAAG,CAAC,yBAAyB,CAAED,GAAG,CAAC,CAC3ChH,KAAK,CAACgH,GAAG,CAAC,CACL7G,IAAI,CAACC,GAAG,EAAI,CACTgG,OAAO,CAACa,GAAG,CAAC,6BAA6B,CAAE7G,GAAG,CAAC6C,MAAM,CAAE7C,GAAG,CAAC8G,UAAU,CAAC,CACtE,GAAI,CAAC9G,GAAG,CAAC+F,EAAE,CAAE,KAAM,IAAI,CAAAjF,KAAK,CAAC,QAAQd,GAAG,CAAC6C,MAAM,KAAK7C,GAAG,CAAC8G,UAAU,EAAE,CAAC,CACrE,MAAO,CAAA9G,GAAG,CAACC,IAAI,CAAC,CAAC,CACrB,CAAC,CAAC,CACDF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAI,CAACA,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,EAAI8B,KAAK,CAACC,OAAO,CAAC/B,IAAI,CAAC,CAAE,CAC1DvD,WAAW,CAAC,CAAC,CAAC,CAAC,CACfY,QAAQ,CAAC,sCAAsC,CAAC,CACpD,CAAC,IAAM,CACHZ,WAAW,CAACuD,IAAI,CAAC,CACjB3C,QAAQ,CAAC,EAAE,CAAC,CAChB,CACAV,iBAAiB,CAAC,IAAI,CAAC,CAC3B,CAAC,CAAC,CACD0E,KAAK,CAACY,GAAG,EAAI,CACViF,OAAO,CAAC9J,KAAK,CAAC,gCAAgC,CAAE6E,GAAG,CAAC,CAAE;AACtDxF,WAAW,CAAC,CAAC,CAAC,CAAC,CACfY,QAAQ,CAAC,4BAA4B4E,GAAG,CAACC,OAAO,EAAE,CAAC,CACnDvF,iBAAiB,CAAC,IAAI,CAAC,CAC3B,CAAC,CAAC,CACV,CAAC,CAAE,EAAE,CAAC,CAEN;AACAlD,SAAS,CAAC,IAAM,CACZqH,KAAK,CAAC,eAAe,CAAC,CACjBG,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVpE,UAAU,CAACkG,KAAK,CAACC,OAAO,CAAC/B,IAAI,CAAC,CAAGA,IAAI,CAAG,EAAE,CAAC,CAC/C,CAAC,CAAC,CACV,CAAC,CAAE,EAAE,CAAC,CAEN;AACAvG,SAAS,CAAC,IAAM,CACZqH,KAAK,CAAC,gBAAgB,CAAC,CAClBG,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVP,WAAW,CAACqC,KAAK,CAACC,OAAO,CAAC/B,IAAI,CAAC,CAAGA,IAAI,CAAG,EAAE,CAAC,CAC5CL,iBAAiB,CAAC,IAAI,CAAC,CAC3B,CAAC,CAAC,CACD0B,KAAK,CAAC,IAAM1B,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAC7C,CAAC,CAAE,EAAE,CAAC,CAEN,QAAS,CAAAsI,WAAWA,CAACzG,CAAC,CAAE,CACpBA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClB;AACA,GAAI,CAAClF,cAAc,CAAE,CACjBW,QAAQ,CAAC,4CAA4C,CAAC,CACtD,OACJ,CACA,KAAM,CAAAyG,QAAQ,CAAG9G,SAAS,CAACyK,IAAI,CAAC,CAAC,CACjC,KAAM,CAAAS,QAAQ,CAAGhL,SAAS,CAACuK,IAAI,CAAC,CAAC,CACjC,GAAI,CAACjL,QAAQ,CAACsH,QAAQ,CAAC,CAAE,CACrBzG,QAAQ,CAAC,qBAAqB,CAAC,CAC/B,OACJ,CACA,GAAIb,QAAQ,CAACsH,QAAQ,CAAC,GAAKoE,QAAQ,CAAE,CACjC7K,QAAQ,CAAC,qBAAqB,CAAC,CAC/B,OACJ,CACAR,UAAU,CAAC,CAAEiH,QAAS,CAAC,CAAC,CACxB9H,YAAY,CAAC4K,OAAO,CAAC,kBAAkB,CAAE9J,IAAI,CAACsE,SAAS,CAAC,CAAE0C,QAAS,CAAC,CAAC,CAAC,CACtEzG,QAAQ,CAAC,EAAE,CAAC,CAChB,CAEA,QAAS,CAAA8K,YAAYA,CAAA,CAAG,CACpBtL,UAAU,CAAC,IAAI,CAAC,CAChBb,YAAY,CAACoM,UAAU,CAAC,kBAAkB,CAAC,CAC3C;AACA7K,YAAY,CAAC,UAAU,CAAC,CACxBE,aAAa,CAAC,IAAI,CAAC,CACnBE,aAAa,CAAC,IAAI,CAAC,CACnBc,cAAc,CAAC,IAAI,CAAC,CACpBoB,eAAe,CAAC,CAAEC,IAAI,CAAE,KAAK,CAAEC,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CAC5D,CAEA;AACA,QAAS,CAAAqI,cAAcA,CAAC5C,IAAI,CAAE6C,IAAI,CAAE,CAChC,MAAO,CAAAxH,KAAK,CAAC,iBAAiB,CAAE,CAC5BqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAEqE,IAAI,CAAE6C,IAAK,CAAC,CACvC,CAAC,CAAC,CACDrH,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAAC,IAAM,CACR;AACA,MAAO,CAAAH,KAAK,CAAC,uBAAuBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAC5CC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACVnC,aAAa,CAACmC,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAGA,IAAI,CAAG,CAAC,CAAC,CAAC,CAC/D,CAAC,CAAC,CACV,CAAC,CAAC,CACN,CAEA;AACA,QAAS,CAAAlG,eAAeA,CAAAyO,KAAA,CAAqB,IAApB,CAAE9C,IAAI,CAAE+C,QAAS,CAAC,CAAAD,KAAA,CACvC;AACA,KAAM,CAAAD,IAAI,CAAG1K,UAAU,CAAC6H,IAAI,CAAC,EAAI,CAAC,CAAC,CACnC,KAAM,CAACgD,IAAI,CAAEC,OAAO,CAAC,CAAGlP,QAAQ,CAAC8O,IAAI,CAAC,CAEtC;AACA;AAEA,QAAS,CAAAK,YAAYA,CAACnH,CAAC,CAAE,CACrBkH,OAAO,CAAC,CAAE,GAAGD,IAAI,CAAE,CAACjH,CAAC,CAACC,MAAM,CAACgE,IAAI,EAAGjE,CAAC,CAACC,MAAM,CAACC,KAAM,CAAC,CAAC,CACzD,CACA,QAAS,CAAAkH,UAAUA,CAACpH,CAAC,CAAE,CACnBA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClByG,cAAc,CAAC5C,IAAI,CAAEgD,IAAI,CAAC,CAACxH,IAAI,CAAC,IAAM,CAClCuH,QAAQ,CAAC,CAAC,CACd,CAAC,CAAC,CACN,CAEA,mBACIjN,KAAA,SAAMsN,SAAS,CAAC,kBAAkB,CAACC,QAAQ,CAAEF,UAAW,CAAAG,QAAA,eACpDxN,KAAA,UAAAwN,QAAA,EAAO,OAEH,cAAA1N,IAAA,aACIoK,IAAI,CAAC,MAAM,CACX/D,KAAK,CAAE+G,IAAI,CAACO,IAAI,EAAI,EAAG,CACvBC,QAAQ,CAAEN,YAAa,CACvBO,IAAI,CAAE,CAAE,CACX,CAAC,EACC,CAAC,cACR3N,KAAA,UAAAwN,QAAA,EAAO,QAEH,cAAA1N,IAAA,UAAOoK,IAAI,CAAC,OAAO,CAAC/D,KAAK,CAAE+G,IAAI,CAACU,KAAK,EAAI,EAAG,CAACF,QAAQ,CAAEN,YAAa,CAAE,CAAC,EACpE,CAAC,cACRpN,KAAA,UAAAwN,QAAA,EAAO,SAEH,cAAA1N,IAAA,UAAOoK,IAAI,CAAC,QAAQ,CAAC/D,KAAK,CAAE+G,IAAI,CAACW,MAAM,EAAI,EAAG,CAACH,QAAQ,CAAEN,YAAa,CAAE,CAAC,EACtE,CAAC,cACRpN,KAAA,UAAAwN,QAAA,EAAO,SAEH,cAAA1N,IAAA,UAAOoK,IAAI,CAAC,QAAQ,CAAC/D,KAAK,CAAE+G,IAAI,CAACY,MAAM,EAAI,EAAG,CAACJ,QAAQ,CAAEN,YAAa,CAAE,CAAC,EACtE,CAAC,cACRpN,KAAA,UAAAwN,QAAA,EAAO,eAEH,cAAA1N,IAAA,UAAOoK,IAAI,CAAC,SAAS,CAAC/D,KAAK,CAAE+G,IAAI,CAACa,OAAO,EAAI,EAAG,CAACL,QAAQ,CAAEN,YAAa,CAAE,CAAC,EACxE,CAAC,cACRpN,KAAA,QAAKgO,KAAK,CAAE,CAACC,OAAO,CAAE,MAAM,CAAEC,GAAG,CAAE,MAAM,CAAEC,SAAS,CAAE,MAAM,CAAE,CAAAX,QAAA,eAC1D1N,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAAAE,QAAA,CAAC,MAAI,CAAQ,CAAC,cAC/D1N,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAACe,OAAO,CAAEpB,QAAS,CAAAO,QAAA,CAAC,QAAM,CAAQ,CAAC,EACnF,CAAC,EACJ,CAAC,CAEf,CAEA;AACA,QAAS,CAAAtE,aAAaA,CAACC,MAAM,CAAE,CAC3B,GAAI,CAAC9H,OAAO,CAAE,MAAO,MAAK,CAC1B,MAAO,CAAAA,OAAO,CAACkH,QAAQ,GAAKY,MAAM,CAACb,KAAK,EAAIjH,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACjF,CACA,QAAS,CAAAa,iBAAiBA,CAACD,MAAM,CAAE,CAC/B,MAAO,CAAA9H,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACvD,CAEA;AACA,QAAS,CAAA+F,eAAeA,CAAA,CAAG,CACvBhK,eAAe,CAAC,CACZC,IAAI,CAAE,IAAI,CACVC,IAAI,CAAE,KAAK,CACXC,IAAI,CAAE,IACV,CAAC,CAAC,CACFE,cAAc,CAAC,EAAE,CAAC,CACtB,CAEA;AACA,QAAS,CAAA4J,gBAAgBA,CAACpF,MAAM,CAAE,CAC9B7E,eAAe,CAAC,CACZC,IAAI,CAAE,IAAI,CACVC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE0E,MACV,CAAC,CAAC,CACFxE,cAAc,CAAC,EAAE,CAAC,CACtB,CAEA;AACA,QAAS,CAAA6J,gBAAgBA,CAACrF,MAAM,CAAE,CAC9B7E,eAAe,CAAC,CACZC,IAAI,CAAE,IAAI,CACVC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE0E,MACV,CAAC,CAAC,CACFxE,cAAc,CAAC,EAAE,CAAC,CACtB,CAEA;AACA,QAAS,CAAA8J,sBAAsBA,CAAA,CAAG,CAC9BnK,eAAe,CAAC,CACZC,IAAI,CAAE,KAAK,CACXC,IAAI,CAAE,IAAI,CACVC,IAAI,CAAE,IACV,CAAC,CAAC,CACFE,cAAc,CAAC,EAAE,CAAC,CACtB,CAEA;AACA,QAAS,CAAA+J,gBAAgBA,CAACzI,CAAC,CAAE,CACzBA,CAAC,CAACI,cAAc,CAAC,CAAC,CAClB1B,cAAc,CAAC,EAAE,CAAC,CAClBE,eAAe,CAAC,IAAI,CAAC,CACrB,KAAM,CAAA8J,MAAM,CAAGC,YAAY,EAAI,IAAI,CACnC,KAAM,CAAA5G,IAAI,CAAG,CAAE,GAAG6G,UAAW,CAAC,CAC9B,GAAI,CAAC7G,IAAI,CAACG,KAAK,CAAC+D,IAAI,CAAC,CAAC,EAAI,CAAClE,IAAI,CAACI,OAAO,CAAC8D,IAAI,CAAC,CAAC,EAAI,CAAClE,IAAI,CAACK,YAAY,CAACT,MAAM,CAAE,CACzEjD,cAAc,CAAC,4DAA4D,CAAC,CAC5EE,eAAe,CAAC,KAAK,CAAC,CACtB,OACJ,CACA,GAAI,CAACmD,IAAI,CAACM,KAAK,CAAEN,IAAI,CAACM,KAAK,CAAGjH,OAAO,CAAGA,OAAO,CAACkH,QAAQ,CAAG,EAAE,CAC7D,GAAI,CAACP,IAAI,CAACQ,MAAM,CAAER,IAAI,CAACQ,MAAM,CAAG,YAAY,CAC5C,GAAI,CAACR,IAAI,CAACS,EAAE,CAAET,IAAI,CAACS,EAAE,CAAGkG,MAAM,CAAGC,YAAY,CAAGpJ,IAAI,CAACC,GAAG,CAAC,CAAC,CAACiD,QAAQ,CAAC,CAAC,CAErEnD,KAAK,CAAC,eAAe,CAAE,CACnBqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAACmC,IAAI,CAC7B,CAAC,CAAC,CACDtC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd;AACA,MAAO,CAAAxB,KAAK,CAAC,oBAAoB,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAC1CC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACoJ,KAAK,EAAI,CACX5K,WAAW,CAACqC,KAAK,CAACC,OAAO,CAACsI,KAAK,CAAC,CAAGA,KAAK,CAAG,EAAE,CAAC,CAC9CC,aAAa,CAAC,IAAI,CAAC,CACnBC,eAAe,CAAC,IAAI,CAAC,CACrBC,iBAAiB,CAAC,KAAK,CAAC,CACxBC,eAAe,CAAClH,IAAI,CAACS,EAAE,CAAC,CAC5B,CAAC,CAAC,CACV,CAAC,IAAM,CACH9D,cAAc,CAACF,IAAI,CAAC5C,KAAK,EAAI,uBAAuB,CAAC,CACzD,CACJ,CAAC,CAAC,CACDiE,KAAK,CAAC,IAAMnB,cAAc,CAAC,uBAAuB,CAAC,CAAC,CACpDqC,OAAO,CAAC,IAAMnC,eAAe,CAAC,KAAK,CAAC,CAAC,CAC1C,CAEA;AACA,QAAS,CAAAsK,yBAAyBA,CAAChG,MAAM,CAAEF,QAAQ,CAAE,CACjD,GAAI,CAACG,iBAAiB,CAACD,MAAM,CAAC,CAAE,OAChCtE,eAAe,CAAC,IAAI,CAAC,CACrBU,KAAK,CAAC,wBAAwB,CAAE,CAC5BqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAE4C,EAAE,CAAEU,MAAM,CAACV,EAAE,CAAEQ,QAAS,CAAC,CACpD,CAAC,CAAC,CACDvD,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV,GAAIA,IAAI,CAACsC,OAAO,CAAE,CACd,MAAO,CAAAxB,KAAK,CAAC,gBAAgB,CAAC,CACzBG,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACoJ,KAAK,EAAI5K,WAAW,CAACqC,KAAK,CAACC,OAAO,CAACsI,KAAK,CAAC,CAAGA,KAAK,CAAG,EAAE,CAAC,CAAC,CACtE,CACJ,CAAC,CAAC,CACD9H,OAAO,CAAC,IAAMnC,eAAe,CAAC,KAAK,CAAC,CAAC,CAC1C,CAEA;AACA,QAAS,CAAAuK,sBAAsBA,CAACnJ,CAAC,CAAE,CAC/B,KAAM,CAAEiE,IAAI,CAAE/D,KAAK,CAAEiI,IAAI,CAAEiB,OAAQ,CAAC,CAAGpJ,CAAC,CAACC,MAAM,CAC/C,GAAIkI,IAAI,GAAK,iBAAiB,CAAE,CAC5B,KAAM,CAAAkB,IAAI,CAAG/I,KAAK,CAACgJ,IAAI,CAACF,OAAO,CAAC,CAAC3E,MAAM,CAAC8E,CAAC,EAAIA,CAAC,CAAClP,QAAQ,CAAC,CAAC2J,GAAG,CAACuF,CAAC,EAAIA,CAAC,CAACrJ,KAAK,CAAC,CAC1E4I,aAAa,CAACU,CAAC,GAAK,CAAE,GAAGA,CAAC,CAAE,CAACvF,IAAI,EAAGoF,IAAK,CAAC,CAAC,CAAC,CAChD,CAAC,IAAM,CACHP,aAAa,CAACU,CAAC,GAAK,CAAE,GAAGA,CAAC,CAAE,CAACvF,IAAI,EAAG/D,KAAM,CAAC,CAAC,CAAC,CACjD,CACJ,CAEA;AACA,QAAS,CAAAuJ,gBAAgBA,CAAA,CAAG,CACxB,GAAI,CAACb,UAAU,CAAE,MAAO,KAAI,CAC5B,mBACI7O,KAAA,SAAMsN,SAAS,CAAC,kBAAkB,CAACC,QAAQ,CAAEmB,gBAAiB,CAAAlB,QAAA,eAC1DxN,KAAA,QAAKsN,SAAS,CAAC,oBAAoB,CAAAE,QAAA,eAC/B1N,IAAA,UACIoK,IAAI,CAAC,OAAO,CACZyF,WAAW,CAAC,cAAc,CAC1BxJ,KAAK,CAAE0I,UAAU,CAAC1G,KAAM,CACxBuF,QAAQ,CAAE0B,sBAAuB,CACjC9B,SAAS,CAAC,aAAa,CACvBsC,QAAQ,MACRC,QAAQ,CAAEjL,YAAa,CAC1B,CAAC,cACF9E,IAAA,CAACH,QAAQ,EACLwG,KAAK,CAAE0I,UAAU,CAACrG,MAAO,CACzBkF,QAAQ,CAAE0B,sBAAuB,CACjCC,OAAO,CAAElQ,qBAAsB,CAC/BwQ,WAAW,CAAC,kBAAkB,CAC9BrC,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAEjL,YAAa,CAC1B,CAAC,EACD,CAAC,cACN5E,KAAA,QAAKsN,SAAS,CAAC,0BAA0B,CAAAE,QAAA,eACrCxN,KAAA,QAAKsN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,eAChC1N,IAAA,UAAOwN,SAAS,CAAC,oBAAoB,CAAAE,QAAA,CAAC,cAAY,CAAO,CAAC,cAC1D1N,IAAA,WACIoK,IAAI,CAAC,cAAc,CACnB/D,KAAK,CAAE0I,UAAU,CAACxG,YAAa,CAC/BqF,QAAQ,CAAE0B,sBAAuB,CACjC9B,SAAS,CAAC,aAAa,CACvBwC,QAAQ,MACRD,QAAQ,CAAEjL,YAAa,CAAA4I,QAAA,CAEtBxD,cAAc,CAAC,CAAC,CAACC,GAAG,CAAChE,CAAC,eACnBnG,IAAA,WAAgBqG,KAAK,CAAEF,CAAE,CAAAuH,QAAA,CAAEvH,CAAC,EAAfA,CAAwB,CACxC,CAAC,CACE,CAAC,EACR,CAAC,CACL5E,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,eACzCvI,KAAA,QAAKsN,SAAS,CAAC,cAAc,CAAAE,QAAA,eACzB1N,IAAA,UAAOwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,QAAM,CAAO,CAAC,cAC7C1N,IAAA,CAACH,QAAQ,EACLwG,KAAK,CAAE0I,UAAU,CAACvG,KAAM,CACxBoF,QAAQ,CAAE0B,sBAAuB,CACjCC,OAAO,CAAEU,MAAM,CAACC,IAAI,CAAC/O,QAAQ,CAAC,CAACgJ,GAAG,CAACgG,GAAG,GAAK,CAAE9J,KAAK,CAAE8J,GAAG,CAAEC,KAAK,CAAED,GAAI,CAAC,CAAC,CAAE,CACxEN,WAAW,CAAC,iBAAiB,CAC7BrC,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAEjL,YAAa,CAC1B,CAAC,EACD,CACR,EACA,CAAC,cACN9E,IAAA,UAAOwN,SAAS,CAAC,sBAAsB,CAAAE,QAAA,CAAC,gBAAc,CAAO,CAAC,cAC9D1N,IAAA,aACIoK,IAAI,CAAC,SAAS,CACdyF,WAAW,CAAC,gBAAgB,CAC5BxJ,KAAK,CAAE0I,UAAU,CAACzG,OAAQ,CAC1BsF,QAAQ,CAAE0B,sBAAuB,CACjC9B,SAAS,CAAC,aAAa,CACvBK,IAAI,CAAE,CAAE,CACRiC,QAAQ,MACX,CAAC,cACF5P,KAAA,QAAKsN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,eAChC1N,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAACuC,QAAQ,CAAEjL,YAAa,CAAA4I,QAAA,CACpEoB,YAAY,CAAG,cAAc,CAAG,eAAe,CAC5C,CAAC,cACT9O,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAACe,OAAO,CAAEI,sBAAuB,CAACoB,QAAQ,CAAEjL,YAAa,CAAA4I,QAAA,CAAC,QAAM,CAAQ,CAAC,CACzH9I,WAAW,eAAI5E,IAAA,CAACL,YAAY,EAAC6N,SAAS,CAAC,cAAc,CAAAE,QAAA,CAAE9I,WAAW,CAAe,CAAC,EAClF,CAAC,EACJ,CAAC,CAEf,CAEA,QAAS,CAAAyL,gBAAgBA,CAAChH,MAAM,CAAE,CAC9B,KAAM,CAAAiH,SAAS,CAAGlR,eAAe,CAACsL,IAAI,CAAC6F,CAAC,EAAIA,CAAC,CAAClK,KAAK,GAAKgD,MAAM,CAACX,MAAM,CAAC,CACtE,mBACIxI,KAAA,QAAKsN,SAAS,CAAC,kBAAkB,CAAAE,QAAA,eAC7BxN,KAAA,QAAKsN,SAAS,CAAC,oBAAoB,CAAAE,QAAA,eAC/B1N,IAAA,OAAIwN,SAAS,CAAC,cAAc,CAAAE,QAAA,CAAErE,MAAM,CAAChB,KAAK,CAAK,CAAC,cAChDrI,IAAA,SAAMwN,SAAS,CAAC,eAAe,CAACU,KAAK,CAAE,CAACsC,KAAK,CAAEF,SAAS,CAACE,KAAK,CAAE,CAAA9C,QAAA,CAAE4C,SAAS,CAAGA,SAAS,CAACF,KAAK,CAAG/G,MAAM,CAACX,MAAM,CAAO,CAAC,EACpH,CAAC,cACNxI,KAAA,QAAKsN,SAAS,CAAC,mBAAmB,CAAAE,QAAA,EAAC,SACxB,CAACrE,MAAM,CAACb,KAAK,EACnB,CAAC,cACNtI,KAAA,QAAKsN,SAAS,CAAC,0BAA0B,CAAAE,QAAA,eACrC1N,IAAA,MAAA0N,QAAA,CAAG,eAAa,CAAG,CAAC,IAAC,CAACrE,MAAM,CAACd,YAAY,EAAIc,MAAM,CAACd,YAAY,CAACT,MAAM,CAAG,CAAC,CAAGuB,MAAM,CAACd,YAAY,CAAC+C,IAAI,CAAC,IAAI,CAAC,cAAGtL,IAAA,MAAA0N,QAAA,CAAG,MAAI,CAAG,CAAC,EACzH,CAAC,cACN1N,IAAA,QAAKwN,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CACjCrE,MAAM,CAACf,OAAO,CACd,CAAC,cACNpI,KAAA,QAAKsN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,eAChC1N,IAAA,WAAQwN,SAAS,CAAC,iBAAiB,CAACe,OAAO,CAAEA,CAAA,GAAMa,eAAe,CAAC,IAAI,CAAE,CAAA1B,QAAA,CAAC,MAAI,CAAQ,CAAC,CACtFtE,aAAa,CAACC,MAAM,CAAC,eAClBrJ,IAAA,WAAQwN,SAAS,CAAC,iBAAiB,CAACe,OAAO,CAAEA,CAAA,GAAME,gBAAgB,CAACpF,MAAM,CAAE,CAAAqE,QAAA,CAAC,MAAI,CAAQ,CAC5F,CACApE,iBAAiB,CAACD,MAAM,CAAC,eACtBrJ,IAAA,WACIqG,KAAK,CAAEgD,MAAM,CAACb,KAAM,CACpBoF,QAAQ,CAAEzH,CAAC,EAAIkJ,yBAAyB,CAAChG,MAAM,CAAElD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CACjEmH,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CAEhCuC,MAAM,CAACC,IAAI,CAAC/O,QAAQ,CAAC,CAACgJ,GAAG,CAACgG,GAAG,eAC1BnQ,IAAA,WAAkBqG,KAAK,CAAE8J,GAAI,CAAAzC,QAAA,CAAEyC,GAAG,EAArBA,GAA8B,CAC9C,CAAC,CACE,CACX,EACA,CAAC,EACL,CAAC,CAEd,CAEA;AACA,KAAM,CAAAM,eAAe,CAAGlP,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACpE,KAAM,CAAAiI,IAAI,CAAG,CACT,CAAErF,GAAG,CAAE,UAAU,CAAE+E,KAAK,CAAE,UAAW,CAAC,CACtC,CAAE/E,GAAG,CAAE,SAAS,CAAE+E,KAAK,CAAE,SAAU,CAAC,CACpC,CAAE/E,GAAG,CAAE,UAAU,CAAE+E,KAAK,CAAE,UAAW,CAAC,CACzC,CACD,GAAIK,eAAe,CAAE,CACjBC,IAAI,CAACC,IAAI,CAAC,CAAEtF,GAAG,CAAE,UAAU,CAAE+E,KAAK,CAAE,iBAAkB,CAAC,CAAC,CACxDM,IAAI,CAACC,IAAI,CAAC,CAAEtF,GAAG,CAAE,gBAAgB,CAAE+E,KAAK,CAAE,gBAAiB,CAAC,CAAC,CACjE,CAEA;AACA,KAAM,CAAAQ,mBAAmB,CAAGvS,MAAM,CAAC,IAAI,CAAC,CAExC;AACAD,SAAS,CAAC,IAAM,CACZ,GAAI+E,WAAW,EAAIyN,mBAAmB,CAACpF,OAAO,CAAE,CAC5CoF,mBAAmB,CAACpF,OAAO,CAACS,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAQ,CAAE2E,KAAK,CAAE,QAAS,CAAC,CAAC,CACvF,CACJ,CAAC,CAAE,CAAC1N,WAAW,CAAC,CAAC,CAEjB;AACA,QAAS,CAAA2N,mBAAmBA,CAACC,QAAQ,CAAEC,MAAM,CAAE,CAC3C,GAAI,CAACzP,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,EAAI,CAACgB,aAAa,CAACwH,iBAAiB,CAAE,OACvF,GAAI,CAACC,MAAM,CAACC,OAAO,CAAC,sBAAsB,CAAC,CAAE,OAC7C1L,KAAK,CAAC,sBAAsB,CAAE,CAC1BqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEvF,IAAI,CAACsE,SAAS,CAAC,CAAEuG,KAAK,CAAEyE,QAAQ,CAAEK,KAAK,CAAEC,MAAM,CAACL,MAAM,CAAE,CAAC,CACnE,CAAC,CAAC,CACDpL,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAAC,IAAM,CACRH,KAAK,CAAC,uBAAuBkG,kBAAkB,CAACoF,QAAQ,CAAC,EAAE,CAAC,CACvDnL,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACjB,IAAI,EAAI,CACV7D,WAAW,CAAC+H,IAAI,GAAK,CACjB,GAAGA,IAAI,CACP,CAACkI,QAAQ,EAAGpM,IAChB,CAAC,CAAC,CAAC,CACP,CAAC,CAAC,CACV,CAAC,CAAC,CACN,CAEA;AACA,KAAM,CAAA2M,gBAAgB,CAAGnK,YAAY,CAACiF,IAAI,CAAC,CAAC,CACtCjI,QAAQ,CAACyG,MAAM,CAAC5B,CAAC,EACdA,CAAC,CAACX,KAAK,EAAIW,CAAC,CAACX,KAAK,CAACkJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrK,YAAY,CAACoK,WAAW,CAAC,CAAC,CAAC,EACrEvI,CAAC,CAACV,OAAO,EAAIU,CAAC,CAACV,OAAO,CAACiJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrK,YAAY,CAACoK,WAAW,CAAC,CAAC,CAAE,EAC1EvI,CAAC,CAACR,KAAK,EAAIQ,CAAC,CAACR,KAAK,CAAC+I,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrK,YAAY,CAACoK,WAAW,CAAC,CAAC,CAAE,EACtE9K,KAAK,CAACC,OAAO,CAACsC,CAAC,CAACT,YAAY,CAAC,EAAIS,CAAC,CAACT,YAAY,CAACkJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrK,YAAY,CAACoK,WAAW,CAAC,CAAC,CAAC,CACnH,CAAC,CACCpN,QAAQ,CACd,KAAM,CAAAwN,cAAc,CAAG,CAAC,GAAGL,gBAAgB,CAAC,CAACM,IAAI,CAAC,CAAC9G,CAAC,CAAEC,CAAC,GAAK,CACxD,GAAIxD,UAAU,GAAK,OAAO,CAAE,MAAO,CAAAuD,CAAC,CAACzC,KAAK,CAACwJ,aAAa,CAAC9G,CAAC,CAAC1C,KAAK,CAAC,CACjE,GAAId,UAAU,GAAK,OAAO,CAAE,MAAO,CAAAuD,CAAC,CAACtC,KAAK,CAACqJ,aAAa,CAAC9G,CAAC,CAACvC,KAAK,CAAC,CACjE,MAAO,EAAC,CACZ,CAAC,CAAC,CAEF;AACA,KAAM,CAAAsJ,eAAe,CAAGzK,YAAY,CAAC+E,IAAI,CAAC,CAAC,CACrClC,cAAc,CAAC,CAAC,CAACU,MAAM,CAACzE,CAAC,EAAIA,CAAC,CAACoL,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACnK,YAAY,CAACkK,WAAW,CAAC,CAAC,CAAC,CAAC,CAClFrH,cAAc,CAAC,CAAC,CACtB,KAAM,CAAA6H,aAAa,CAAG,CAAC,GAAGD,eAAe,CAAC,CAACF,IAAI,CAAC,CAAC9G,CAAC,CAAEC,CAAC,GAAK,CACtD,GAAItD,UAAU,GAAK,MAAM,CAAE,MAAO,CAAAqD,CAAC,CAAC+G,aAAa,CAAC9G,CAAC,CAAC,CACpD,MAAO,EAAC,CACZ,CAAC,CAAC,CAEF;AACA,GAAI,CAACxJ,OAAO,CAAE,CACV,mBACIrB,KAAA,QAAKsN,SAAS,CAAC,eAAe,CAAAE,QAAA,eAC1B1N,IAAA,WAAQwN,SAAS,CAAC,QAAQ,CAAAE,QAAA,cACtB1N,IAAA,OAAA0N,QAAA,CAAI,yBAAuB,CAAI,CAAC,CAC5B,CAAC,cACT1N,IAAA,SAAMwN,SAAS,CAAC,cAAc,CAAAE,QAAA,cAC1BxN,KAAA,YAASsN,SAAS,CAAC,sBAAsB,CAAAE,QAAA,eACrC1N,IAAA,OAAIwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,OAAK,CAAI,CAAC,cACtCxN,KAAA,SAAMuN,QAAQ,CAAEb,WAAY,CAACY,SAAS,CAAC,yBAAyB,CAAAE,QAAA,eAC5DxN,KAAA,QAAKsN,SAAS,CAAC,cAAc,CAAAE,QAAA,eACzB1N,IAAA,UACI6P,WAAW,CAAC,aAAa,CACzBxJ,KAAK,CAAE1E,SAAU,CACjBiM,QAAQ,CAAEzH,CAAC,EAAIvE,YAAY,CAACuE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAC5CyJ,QAAQ,MACRC,QAAQ,CAAE,CAAC1O,cAAe,CAC1BmM,SAAS,CAAC,aAAa,CAC1B,CAAC,cACFxN,IAAA,UACIsO,IAAI,CAAC,UAAU,CACfuB,WAAW,CAAC,UAAU,CACtBxJ,KAAK,CAAExE,SAAU,CACjB+L,QAAQ,CAAEzH,CAAC,EAAIrE,YAAY,CAACqE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAC5CyJ,QAAQ,MACRC,QAAQ,CAAE,CAAC1O,cAAe,CAC1BmM,SAAS,CAAC,aAAa,CAC1B,CAAC,EACD,CAAC,cACNxN,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACyB,QAAQ,CAAE,CAAC1O,cAAe,CAACmM,SAAS,CAAC,WAAW,CAAAE,QAAA,CAAC,OAAK,CAAQ,CAAC,EACnF,CAAC,CACN,CAACrM,cAAc,EAAI,CAACU,KAAK,eAAI/B,IAAA,CAACJ,cAAc,EAAA8N,QAAA,CAAC,qBAAmB,CAAgB,CAAC,CACjF3L,KAAK,eAAI/B,IAAA,CAACL,YAAY,EAAA+N,QAAA,CAAE3L,KAAK,CAAe,CAAC,EACzC,CAAC,CACR,CAAC,cACP/B,IAAA,WAAQwN,SAAS,CAAC,QAAQ,CAAAE,QAAA,cACtBxN,KAAA,SAAAwN,QAAA,EAAM,+BAA+B,CAAC,GAAI,CAAAhI,IAAI,CAAC,CAAC,CAACsM,WAAW,CAAC,CAAC,EAAO,CAAC,CAClE,CAAC,EACR,CAAC,CAEd,CAEA,mBACI9R,KAAA,QAAKsN,SAAS,CAAC,eAAe,CAAAE,QAAA,eAC1BxN,KAAA,WAAQsN,SAAS,CAAC,QAAQ,CAAAE,QAAA,eACtB1N,IAAA,OAAA0N,QAAA,CAAI,yBAAuB,CAAI,CAAC,cAChCxN,KAAA,QAAKsN,SAAS,CAAC,UAAU,CAAAE,QAAA,EACpBgD,IAAI,CAACvG,GAAG,CAAC8H,GAAG,eACTjS,IAAA,WAEIwN,SAAS,CAAE,UAAUvL,SAAS,GAAKgQ,GAAG,CAAC5G,GAAG,CAAG,SAAS,CAAG,EAAE,EAAG,CAC9DkD,OAAO,CAAEA,CAAA,GAAM,CACXrM,YAAY,CAAC+P,GAAG,CAAC5G,GAAG,CAAC,CACrBjJ,aAAa,CAAC,IAAI,CAAC,CACnBE,aAAa,CAAC,IAAI,CAAC,CACnBc,cAAc,CAAC,IAAI,CAAC,CACpB;AACJ,CAAE,CAAAsK,QAAA,CAEDuE,GAAG,CAAC7B,KAAK,EAVL6B,GAAG,CAAC5G,GAWL,CACX,CAAC,cACFrL,IAAA,CAACrB,YAAY,EACT4K,QAAQ,CAAEA,QAAS,CACnBC,eAAe,CAAEA,eAAgB,CACjCE,WAAW,CAAEA,WAAY,CACzBC,gBAAgB,CAAEA,gBAAiB,CACnCmD,YAAY,CAAEA,YAAa,CAC3BvL,OAAO,CAAEA,OAAQ,CACjBsI,uBAAuB,CAAEA,uBAAwB,CACjDJ,aAAa,CAAEA,aAAc,CAC7BK,sBAAsB,CAAEA,sBAAuB,CAC/CC,mBAAmB,CAAEA,mBAAoB,CACzCC,eAAe,CAAEA,eAAgB,CACjCC,sBAAsB,CAAEA,sBAAuB,CAClD,CAAC,EACD,CAAC,EACF,CAAC,cACTjK,IAAA,SAAMwN,SAAS,CAAC,cAAc,CAAAE,QAAA,CACzBhE,WAAW,cACR1J,IAAA,CAACb,UAAU,EAAC+S,OAAO,CAAEnI,mBAAoB,CAAE,CAAC,CAC5C9H,SAAS,GAAK,UAAU,cACxB/B,KAAA,YAASsN,SAAS,CAAC,uBAAuB,CAAAE,QAAA,eACtCxN,KAAA,QAAKsN,SAAS,CAAC,iBAAiB,CAAAE,QAAA,eAC5B1N,IAAA,OAAA0N,QAAA,CAAI,kCAAgC,CAAI,CAAC,cACzCxN,KAAA,QAAKgO,KAAK,CAAE,CAACC,OAAO,CAAE,MAAM,CAAEC,GAAG,CAAE,MAAM,CAAE+D,UAAU,CAAE,QAAQ,CAAE,CAAAzE,QAAA,EAC5DnM,OAAO,eACJvB,IAAA,WACIwN,SAAS,CAAC,iBAAiB,CAC3Be,OAAO,CAAEA,CAAA,GAAM3G,gBAAgB,CAAC,KAAK,CAAE,CAAA8F,QAAA,CAC1C,kBAED,CAAQ,CACX,CACAnM,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,eACzCzI,IAAA,WACIwN,SAAS,CAAC,iBAAiB,CAC3BU,KAAK,CAAE,CAACkE,UAAU,CAAE,MAAM,CAAE,CAC5B7D,OAAO,CAAE/I,oBAAqB,CAC9B6C,KAAK,CAAC,6BAA6B,CAAAqF,QAAA,CACtC,oBAED,CAAQ,CACX,EACA,CAAC,EACL,CAAC,CAEL1I,oBAAoB,EAAIzD,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,eACjEzI,IAAA,QAAKwN,SAAS,CAAC,eAAe,CAACe,OAAO,CAAEtI,qBAAsB,CAAAyH,QAAA,cAC1DxN,KAAA,QAAKsN,SAAS,CAAC,eAAe,CAACU,KAAK,CAAE,CAACmE,QAAQ,CAAE,GAAG,CAAEC,KAAK,CAAE,MAAM,CAAE,CAAC/D,OAAO,CAAEpI,CAAC,EAAIA,CAAC,CAACoM,eAAe,CAAC,CAAE,CAAA7E,QAAA,eACpG1N,IAAA,OAAA0N,QAAA,CAAI,MAAI,CAAI,CAAC,cACbxN,KAAA,SAAMuN,QAAQ,CAAEnH,sBAAuB,CAAAoH,QAAA,eACnC1N,IAAA,aACIqG,KAAK,CAAEnB,cAAe,CACtB0I,QAAQ,CAAE1H,sBAAuB,CACjC2H,IAAI,CAAE,EAAG,CACTK,KAAK,CAAE,CACHoE,KAAK,CAAE,MAAM,CACbE,UAAU,CAAE,WAAW,CACvBC,QAAQ,CAAE,KAAK,CACfC,YAAY,CAAE,CAAC,CACfC,MAAM,CAAE,2BAA2B,CACnCP,UAAU,CAAE,mBAAmB,CAC/B5B,KAAK,CAAE,aAAa,CACpBoC,YAAY,CAAE,KAClB,CAAE,CACFC,UAAU,CAAE,KAAM,CAClB9C,QAAQ,CAAEzK,gBAAiB,CAC9B,CAAC,CACDF,eAAe,eAAIpF,IAAA,CAACL,YAAY,EAAA+N,QAAA,CAAEtI,eAAe,CAAe,CAAC,cAClElF,KAAA,QAAKgO,KAAK,CAAE,CAACC,OAAO,CAAE,MAAM,CAAEC,GAAG,CAAE,MAAM,CAAE0E,cAAc,CAAE,UAAU,CAAE,CAAApF,QAAA,eACnE1N,IAAA,WACIsO,IAAI,CAAC,QAAQ,CACbd,SAAS,CAAC,iBAAiB,CAC3BU,KAAK,CAAE,CAACkE,UAAU,CAAE,MAAM,CAAE,CAC5B7D,OAAO,CAAEtI,qBAAsB,CAC/B8J,QAAQ,CAAEzK,gBAAiB,CAAAoI,QAAA,CAC9B,QAAM,CAAQ,CAAC,cAChB1N,IAAA,WACIsO,IAAI,CAAC,QAAQ,CACbd,SAAS,CAAC,iBAAiB,CAC3BuC,QAAQ,CAAEzK,gBAAiB,CAAAoI,QAAA,CAC9B,oBAAkB,CAAQ,CAAC,EAC3B,CAAC,EACJ,CAAC,EACN,CAAC,CACL,CACR,cAED1N,IAAA,CAACN,aAAa,EACVqT,WAAW,CAAE5L,YAAa,CAC1B6L,cAAc,CAAE5L,eAAgB,CAChC6L,aAAa,CAAEA,CAAA,GAAM7L,eAAe,CAAC,EAAE,CAAE,CACzC8L,SAAS,CAAE3L,UAAW,CACtB4L,YAAY,CAAE3L,aAAc,CAC5B4L,WAAW,CAAE,CACT,CAAE/M,KAAK,CAAE,OAAO,CAAE+J,KAAK,CAAE,eAAgB,CAAC,CAC1C,CAAE/J,KAAK,CAAE,OAAO,CAAE+J,KAAK,CAAE,eAAgB,CAAC,CAC5C,CACFP,WAAW,CAAC,6DAA6D,CACzEwD,WAAW,CAAC,qBAAqB,CACjCC,SAAS,CAAC,oBAAoB,CACjC,CAAC,CAED/O,YAAY,CAACE,IAAI,EAAIF,YAAY,CAACG,IAAI,GAAK,MAAM,eAC9C1E,IAAA,CAACzB,YAAY,EACTkG,IAAI,CAAEF,YAAY,CAACE,IAAK,CACxBC,IAAI,CAAEH,YAAY,CAACG,IAAK,CACxBC,IAAI,CAAEJ,YAAY,CAACI,IAAK,CACxB4O,MAAM,CAAEtL,gBAAiB,CACzBiK,OAAO,CAAElK,iBAAkB,CAC3BjG,KAAK,CAAE6C,WAAY,CACnB4O,MAAM,CAAE1O,YAAa,CACrBxE,OAAO,CAAEA,OAAO,CAAC6J,GAAG,CAAChE,CAAC,EAAIA,CAAC,CAACiE,IAAI,CAAE,CAClCjJ,QAAQ,CAAEA,QAAS,CACnBI,OAAO,CAAEA,OAAQ,CACpB,CACJ,CACAgD,YAAY,CAACE,IAAI,EAAIF,YAAY,CAACG,IAAI,GAAK,MAAM,eAC9C1E,IAAA,CAACxB,UAAU,EACP6K,MAAM,CAAE9E,YAAY,CAACI,IAAK,CAC1B8O,MAAM,CAAEzL,iBAAkB,CAC1B0L,MAAM,CAAEA,CAAA,GAAM9L,gBAAgB,CAAC,MAAM,CAAErD,YAAY,CAACI,IAAI,CAAE,CAC1DgP,UAAU,CAAExK,QAAQ,EAAID,yBAAyB,CAAC3E,YAAY,CAACI,IAAI,CAACgE,EAAE,CAAEQ,QAAQ,CAAE,CAClFyK,OAAO,CAAExK,aAAa,CAAC7E,YAAY,CAACI,IAAI,CAAE,CAC1CkP,WAAW,CAAEvK,iBAAiB,CAAC/E,YAAY,CAACI,IAAI,CAAE,CAClDxD,QAAQ,CAAEA,QAAS,CACtB,CACJ,cAEDnB,IAAA,CAACP,UAAU,EACP0E,QAAQ,CAAEwN,cAAe,CACzBmC,MAAM,CAAEzP,cAAe,CACvB0P,MAAM,CAAE1K,MAAM,EAAI7E,eAAe,CAAC,CAAEC,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,MAAM,CAAEC,IAAI,CAAE0E,MAAO,CAAC,CAAE,CAC9ED,aAAa,CAAEA,aAAc,CAC7BsK,MAAM,CAAE9L,gBAAiB,CAC5B,CAAC,EACG,CAAC,CACV3F,SAAS,GAAK,gBAAgB,EAAIwO,eAAe,cACjDvQ,KAAA,YAASsN,SAAS,CAAC,6BAA6B,CAAAE,QAAA,eAC5C1N,IAAA,OAAA0N,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvB1N,IAAA,SACIyN,QAAQ,CAAEtH,CAAC,EAAItH,kBAAkB,CAC7BsH,CAAC,CACDtC,aAAa,CACbvD,OAAO,CACP0D,iBAAiB,CACjBE,mBAAmB,CACnB3D,UAAU,CACVuD,gBACJ,CAAE,CACF0J,SAAS,CAAC,cAAc,CAAAE,QAAA,cAExBxN,KAAA,QAAKsN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,eAChC1N,IAAA,UACI6P,WAAW,CAAC,iBAAiB,CAC7BxJ,KAAK,CAAExC,aAAc,CACrB+J,QAAQ,CAAEzH,CAAC,EAAIrC,gBAAgB,CAACqC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAChDyJ,QAAQ,MACRtC,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAE9L,gBAAiB,CAC9B,CAAC,cACFjE,IAAA,WACIsO,IAAI,CAAC,QAAQ,CACbd,SAAS,CAAC,WAAW,CACrBuC,QAAQ,CAAE9L,gBAAiB,CAC3BsK,OAAO,CAAEpI,CAAC,EAAIA,CAAC,CAACoM,eAAe,CAAC,CAAE,CAAA7E,QAAA,CACrC,eAAa,CAAQ,CAAC,EACtB,CAAC,CACJ,CAAC,CACN3J,cAAc,eAAI/D,IAAA,CAACL,YAAY,EAAA+N,QAAA,CAAE3J,cAAc,CAAe,CAAC,cAChE/D,IAAA,OAAA0N,QAAA,CAAI,8BAA4B,CAAI,CAAC,cACrC1N,IAAA,CAACR,UAAU,EACPc,OAAO,CAAEA,OAAQ,CACjBa,QAAQ,CAAEA,QAAS,CACnB6S,MAAM,CAAEhJ,iBAAkB,CAC1BiJ,QAAQ,CAAE/I,mBAAoB,CAC9BgJ,QAAQ,CAAG9J,IAAI,EAAKnL,kBAAkB,CAClCmL,IAAI,CACJlG,mBAAmB,CACnBF,iBAAiB,CACjBzD,UACJ,CAAE,CACF4T,OAAO,CAAElQ,gBAAiB,CAC7B,CAAC,EACG,CAAC,CACVhC,SAAS,GAAK,UAAU,EAAIwO,eAAe,cAC3CvQ,KAAA,YAASsN,SAAS,CAAC,6BAA6B,CAAAE,QAAA,eAC5C1N,IAAA,OAAA0N,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxB1N,IAAA,SACIyN,QAAQ,CAAEtH,CAAC,EAAIvH,mBAAmB,CAC9BuH,CAAC,CACD1D,cAAc,CACdE,cAAc,CACdxB,QAAQ,CACR2B,eAAe,CACfE,iBAAiB,CACjBE,qBAAqB,CACrB9B,WAAW,CACXsB,iBAAiB,CACjBE,iBACJ,CAAE,CACF4K,SAAS,CAAC,cAAc,CAAAE,QAAA,cAExBxN,KAAA,QAAKsN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,eAChC1N,IAAA,UACI6P,WAAW,CAAC,cAAc,CAC1BxJ,KAAK,CAAE5D,cAAe,CACtBmL,QAAQ,CAAEzH,CAAC,EAAIzD,iBAAiB,CAACyD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CACjDyJ,QAAQ,MACRtC,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAE9M,kBAAmB,CAChC,CAAC,cACFjD,IAAA,UACIsO,IAAI,CAAC,UAAU,CACfuB,WAAW,CAAC,UAAU,CACtBxJ,KAAK,CAAE1D,cAAe,CACtBiL,QAAQ,CAAEzH,CAAC,EAAIvD,iBAAiB,CAACuD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CACjDyJ,QAAQ,MACRtC,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAE9M,kBAAmB,CAChC,CAAC,cACFjD,IAAA,WACIsO,IAAI,CAAC,QAAQ,CACbd,SAAS,CAAC,WAAW,CACrBuC,QAAQ,CAAE9M,kBAAmB,CAC7BsL,OAAO,CAAEpI,CAAC,EAAIA,CAAC,CAACoM,eAAe,CAAC,CAAE,CAAA7E,QAAA,CACrC,gBAAc,CAAQ,CAAC,EACvB,CAAC,CACJ,CAAC,CACN7K,YAAY,eAAI7C,IAAA,CAACL,YAAY,EAAA+N,QAAA,CAAE7K,YAAY,CAAe,CAAC,CAC3DE,cAAc,eAAI/C,IAAA,CAACJ,cAAc,EAACsO,KAAK,CAAE,CAACsC,KAAK,CAAC,WAAW,CAAE,CAAA9C,QAAA,CAAE3K,cAAc,CAAiB,CAAC,cAGhG/C,IAAA,OAAA0N,QAAA,CAAI,cAAY,CAAI,CAAC,cACrB1N,IAAA,CAACV,WAAW,EACR6B,QAAQ,CAAEA,QAAS,CACnBuS,MAAM,CAAEvD,GAAG,EAAI,CACX/M,cAAc,CAAC+M,GAAG,CAAC,CACnB7M,kBAAkB,CAAC6M,GAAG,CAAC,CACvB3M,kBAAkB,CAAC,EAAE,CAAC,CACtBE,mBAAmB,CAAC,EAAE,CAAC,CAC3B,CAAE,CACFwQ,QAAQ,CAAE/D,GAAG,EAAInR,mBAAmB,CAChCmR,GAAG,CACHvM,qBAAqB,CACrBF,mBAAmB,CACnBtC,WAAW,CACX4B,iBACJ,CAAE,CACFW,kBAAkB,CAAEA,kBAAmB,CAC1C,CAAC,CACDR,WAAW,eACRjD,KAAA,QACIsN,SAAS,CAAC,yBAAyB,CACnC4G,GAAG,CAAExD,mBAAoB,CAAAlD,QAAA,eAEzBxN,KAAA,OAAAwN,QAAA,EAAI,gBAAc,cAAA1N,IAAA,MAAA0N,QAAA,CAAIvK,WAAW,CAAI,CAAC,EAAI,CAAC,cAC3CjD,KAAA,SAAMuN,QAAQ,CAAEtH,CAAC,EAAIrH,mBAAmB,CACpCqH,CAAC,CACDhD,WAAW,CACXE,eAAe,CACfO,qBAAqB,CACrBF,mBAAmB,CACnBtC,WAAW,CACXgC,cAAc,CACdJ,iBACJ,CAAE,CAACwK,SAAS,CAAC,mBAAmB,CAAAE,QAAA,eAC5BxN,KAAA,UAAAwN,QAAA,EAAO,YAEH,cAAA1N,IAAA,UACIqG,KAAK,CAAEhD,eAAgB,CACvBuK,QAAQ,CAAEzH,CAAC,EAAI7C,kBAAkB,CAAC6C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAClDmH,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAEpM,kBAAmB,CAChC,CAAC,EACC,CAAC,cACR3D,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAACuC,QAAQ,CAAEpM,kBAAmB,CAAA+J,QAAA,CAAC,QAAM,CAAQ,CAAC,EAC7F,CAAC,cACPxN,KAAA,SAAMuN,QAAQ,CAAEtH,CAAC,EAAIpH,oBAAoB,CACrCoH,CAAC,CACDhD,WAAW,CACXI,eAAe,CACfK,qBAAqB,CACrBF,mBAAmB,CACnBtC,WAAW,CACXgC,cAAc,CACdJ,iBACJ,CAAE,CAACwK,SAAS,CAAC,sBAAsB,CAAAE,QAAA,eAC/BxN,KAAA,UAAAwN,QAAA,EAAO,eAEH,cAAA1N,IAAA,UACIsO,IAAI,CAAC,UAAU,CACfjI,KAAK,CAAE9C,eAAgB,CACvBqK,QAAQ,CAAEzH,CAAC,EAAI3C,kBAAkB,CAAC2C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAClDmH,SAAS,CAAC,aAAa,CACvBuC,QAAQ,CAAEpM,kBAAmB,CAChC,CAAC,EACC,CAAC,cACR3D,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,iBAAiB,CAACuC,QAAQ,CAAEpM,kBAAmB,CAAA+J,QAAA,CAAC,iBAAe,CAAQ,CAAC,EACtG,CAAC,CACNjK,gBAAgB,eAAIzD,IAAA,QAAKwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAEjK,gBAAgB,CAAM,CAAC,cAC1EzD,IAAA,WAAQwN,SAAS,CAAC,iBAAiB,CAACe,OAAO,CAAEA,CAAA,GAAMnL,cAAc,CAAC,IAAI,CAAE,CAAC2M,QAAQ,CAAEpM,kBAAmB,CAAA+J,QAAA,CAAC,QAAM,CAAQ,CAAC,EACrH,CACR,EACI,CAAC,CACVzL,SAAS,GAAK,SAAS,CACvBI,UAAU,cACNnC,KAAA,YAASsN,SAAS,CAAC,2BAA2B,CAAAE,QAAA,eAC1CxN,KAAA,OAAAwN,QAAA,EAAI,OAAK,CAACrL,UAAU,EAAK,CAAC,cAC1BrC,IAAA,CAACvB,eAAe,EACZ2L,IAAI,CAAE/H,UAAW,CACjB8K,QAAQ,CAAEA,CAAA,GAAM7K,aAAa,CAAC,IAAI,CAAE,CACpCC,UAAU,CAAEA,UAAW,CACvByK,cAAc,CAAEA,cAAe,CAClC,CAAC,EACG,CAAC,CACV7K,UAAU,cACVnC,IAAA,CAACtB,WAAW,EACR0L,IAAI,CAAEjI,UAAW,CACjByR,OAAO,CAAErS,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAKtG,UAAW,CACpDI,UAAU,CAAEA,UAAW,CACvBgI,gBAAgB,CAAEA,gBAAiB,CACnCnI,aAAa,CAAEA,aAAc,CAC7BE,aAAa,CAAEA,aAAc,CAChC,CAAC,cAEFpC,KAAA,YAASsN,SAAS,CAAC,2BAA2B,CAAAE,QAAA,eAC1C1N,IAAA,QAAKwN,SAAS,CAAC,gBAAgB,CAAAE,QAAA,cAC3B1N,IAAA,OAAA0N,QAAA,CAAI,SAAO,CAAI,CAAC,CACf,CAAC,cACN1N,IAAA,CAACN,aAAa,EACVqT,WAAW,CAAE1L,YAAa,CAC1B2L,cAAc,CAAE1L,eAAgB,CAChC2L,aAAa,CAAEA,CAAA,GAAM3L,eAAe,CAAC,EAAE,CAAE,CACzC4L,SAAS,CAAEzL,UAAW,CACtB0L,YAAY,CAAEzL,aAAc,CAC5B0L,WAAW,CAAE,CACT,CAAE/M,KAAK,CAAE,MAAM,CAAE+J,KAAK,CAAE,cAAe,CAAC,CAC1C,CACFP,WAAW,CAAC,2BAA2B,CACvCwD,WAAW,CAAC,qBAAqB,CACjCC,SAAS,CAAC,oBAAoB,CACjC,CAAC,cACFtT,IAAA,QAAKwN,SAAS,CAAC,mBAAmB,CAACU,KAAK,CAAE,CAACC,OAAO,CAAE,MAAM,CAAEkG,QAAQ,CAAE,MAAM,CAAEjG,GAAG,CAAE,QAAQ,CAAE0E,cAAc,CAAE,YAAY,CAAE,CAAApF,QAAA,cACvH1N,IAAA,CAACR,UAAU,EACPc,OAAO,CAAEyR,aAAa,CAAC5H,GAAG,CAACC,IAAI,EAAI9J,OAAO,CAACoK,IAAI,CAACvE,CAAC,EAAIA,CAAC,CAACiE,IAAI,GAAKA,IAAI,CAAC,CAAE,CACvEjJ,QAAQ,CAAEA,QAAS,CACnBI,OAAO,CAAEA,OAAQ,CACjBa,aAAa,CAAEA,aAAc,CAC7BE,aAAa,CAAEA,aAAc,CAC7BiI,gBAAgB,CAAEA,gBAAiB,CACtC,CAAC,CACD,CAAC,EACD,CACZ,cAEDvK,IAAA,CAAAI,SAAA,EAAAsN,QAAA,CACK,CAACnM,OAAO,cACLrB,KAAA,YAASsN,SAAS,CAAC,sBAAsB,CAAAE,QAAA,eACrC1N,IAAA,OAAIwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,OAAK,CAAI,CAAC,cACtCxN,KAAA,SAAMuN,QAAQ,CAAEb,WAAY,CAACY,SAAS,CAAC,yBAAyB,CAAAE,QAAA,eAC5DxN,KAAA,QAAKsN,SAAS,CAAC,cAAc,CAAAE,QAAA,eACzB1N,IAAA,UACI6P,WAAW,CAAC,aAAa,CACzBxJ,KAAK,CAAE1E,SAAU,CACjBiM,QAAQ,CAAEzH,CAAC,EAAIvE,YAAY,CAACuE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAC5CyJ,QAAQ,MACRC,QAAQ,CAAE,CAAC1O,cAAe,CAC1BmM,SAAS,CAAC,aAAa,CAC1B,CAAC,cACFxN,IAAA,UACIsO,IAAI,CAAC,UAAU,CACfuB,WAAW,CAAC,UAAU,CACtBxJ,KAAK,CAAExE,SAAU,CACjB+L,QAAQ,CAAEzH,CAAC,EAAIrE,YAAY,CAACqE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CAC5CyJ,QAAQ,MACRC,QAAQ,CAAE,CAAC1O,cAAe,CAC1BmM,SAAS,CAAC,aAAa,CAC1B,CAAC,EACD,CAAC,cACNxN,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACyB,QAAQ,CAAE,CAAC1O,cAAe,CAACmM,SAAS,CAAC,WAAW,CAAAE,QAAA,CAAC,OAAK,CAAQ,CAAC,EACnF,CAAC,CACN,CAACrM,cAAc,eAAIrB,IAAA,CAACJ,cAAc,EAAA8N,QAAA,CAAC,qBAAmB,CAAgB,CAAC,CACvE3L,KAAK,eAAI/B,IAAA,CAACL,YAAY,EAAA+N,QAAA,CAAE3L,KAAK,CAAe,CAAC,EACzC,CAAC,cAEV;AACA/B,IAAA,QAAKkO,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAE2E,cAAc,CAAE,QAAQ,CAAER,KAAK,CAAE,MAAO,CAAE,CAAA5E,QAAA,cACrE1N,IAAA,YAASwN,SAAS,CAAC,gBAAgB,CAAAE,QAAA,cAC/BxN,KAAA,QAAKsN,SAAS,CAAC,eAAe,CAAAE,QAAA,eAC1B1N,IAAA,QAAKwN,SAAS,CAAC,kBAAkB,CAAAE,QAAA,cAC7BxN,KAAA,QAAKsN,SAAS,CAAC,kBAAkB,CAAAE,QAAA,eAC7B1N,IAAA,OAAA0N,QAAA,CACKnM,OAAO,EAAIA,OAAO,CAACkH,QAAQ,GAAK,YAAY,CACvC,YAAY,CACZ,0BAA0B,CAChC,CAAC,cACLzI,IAAA,QAAKwN,SAAS,CAAC,oBAAoB,CAAAE,QAAA,cAC/BxN,KAAA,SAAMsN,SAAS,CAAC,mBAAmB,CAAAE,QAAA,EAC9B/C,cAAc,CAAC7C,MAAM,CAAC,GAAC,CAAC6C,cAAc,CAAC7C,MAAM,GAAK,CAAC,CAAG,SAAS,CAAG,UAAU,EAC3E,CAAC,CACN,CAAC,cACN5H,KAAA,OAAIsN,SAAS,CAAC,gBAAgB,CAAAE,QAAA,EACzB/C,cAAc,CAAC7C,MAAM,GAAK,CAAC,eACxB9H,IAAA,OAAIwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,wBAAsB,CAAI,CACzD,CACA/C,cAAc,CAACR,GAAG,CAACmK,KAAA,EAAY,IAAX,CAACxJ,CAAC,CAAEC,CAAC,CAAC,CAAAuJ,KAAA,CACvB,KAAM,CAAAjJ,GAAG,CAAGP,CAAC,CAAG,GAAG,CAAGC,CAAC,CACvB;AACA,KAAM,CAAAwJ,UAAU,CAAG,EAAE,CACrB,mBACIvU,IAAA,OAAcwN,SAAS,CAAE,mBAAmBhN,QAAQ,GAAK6K,GAAG,CAAG,SAAS,CAAG,EAAE,EAAG,CAAAqC,QAAA,cAC5ExN,KAAA,WACIsN,SAAS,CAAC,WAAW,CACrBe,OAAO,CAAEA,CAAA,GAAMpD,iBAAiB,CAAC,CAACL,CAAC,CAAEC,CAAC,CAAC,CAAE,CAAA2C,QAAA,eAEzC1N,IAAA,SAAMwN,SAAS,CAAC,eAAe,CAACnF,KAAK,CAAEyC,CAAE,CAAA4C,QAAA,CACpC5N,YAAY,CAAC0U,GAAG,CAAC1J,CAAC,CAAEyJ,UAAU,CAAC,CAC9B,CAAC,cACPvU,IAAA,SAAMwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,QAAC,CAAM,CAAC,cACtC1N,IAAA,SAAMwN,SAAS,CAAC,eAAe,CAACnF,KAAK,CAAE0C,CAAE,CAAA2C,QAAA,CACpC5N,YAAY,CAAC0U,GAAG,CAACzJ,CAAC,CAAEwJ,UAAU,CAAC,CAC9B,CAAC,EACH,CAAC,EAZJlJ,GAaL,CAAC,CAEb,CAAC,CAAC,EACF,CAAC,EACJ,CAAC,CACL,CAAC,cACNrL,IAAA,QAAKwN,SAAS,CAAC,kBAAkB,CAAAE,QAAA,cAC7B1N,IAAA,QAAKwN,SAAS,CAAC,qBAAqB,CAAAE,QAAA,CAC9BlN,QAAQ,EAAImK,cAAc,CAAC7C,MAAM,CAAG,CAAC,cACnC5H,KAAA,QAAKsN,SAAS,CAAC,sBAAsB,CAAAE,QAAA,eACjC1N,IAAA,QAAKwN,SAAS,CAAC,iBAAiB,CAAAE,QAAA,cAC5B1N,IAAA,OAAIwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAElN,QAAQ,CAACiU,OAAO,CAAC,GAAG,CAAE,KAAK,CAAC,CAAK,CAAC,CAC9D,CAAC,cACNvU,KAAA,QAAKsN,SAAS,CAAC,gBAAgB,CAAAE,QAAA,eAC3B1N,IAAA,QAAKwN,SAAS,CAAC,yBAAyB,CAAAE,QAAA,cACpC1N,IAAA,CAACT,WAAW,EACRsB,QAAQ,CAAEA,QAAQ,CAACL,QAAQ,CAAC,EAAI,EAAG,CACnCA,QAAQ,CAAEA,QAAS,CACnBe,OAAO,CAAEA,OAAQ,CACjBkI,aAAa,CAAEA,aAAc,CAC7BqH,mBAAmB,CAAEA,mBAAoB,CAC5C,CAAC,CACD,CAAC,cACN5Q,KAAA,SAAMuN,QAAQ,CAAEtB,WAAY,CAACqB,SAAS,CAAC,kCAAkC,CAAAE,QAAA,eACrE1N,IAAA,UACI6P,WAAW,CAAC,aAAa,CACzBxJ,KAAK,CAAE9E,OAAO,CAACkH,QAAS,CACxBsH,QAAQ,MACRD,QAAQ,MACRtC,SAAS,CAAC,cAAc,CAC3B,CAAC,cACFxN,IAAA,UACI6P,WAAW,CAAC,SAAS,CACrBxJ,KAAK,CAAEtF,IAAK,CACZ6M,QAAQ,CAAEzH,CAAC,EAAInF,OAAO,CAACmF,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE,CACvCyJ,QAAQ,MACRtC,SAAS,CAAC,YAAY,CACzB,CAAC,cACFxN,IAAA,WAAQsO,IAAI,CAAC,QAAQ,CAACd,SAAS,CAAC,UAAU,CAAAE,QAAA,CAAC,MAAI,CAAQ,CAAC,EACtD,CAAC,EACN,CAAC,EACL,CAAC,cAEN1N,IAAA,QAAKwN,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAC,oCAAkC,CAAK,CACvE,CACA,CAAC,CACL,CAAC,EACL,CAAC,CACD,CAAC,CACT,CACR,CACH,CACL,CACC,CAAC,cACP1N,IAAA,WAAQwN,SAAS,CAAC,QAAQ,CAAAE,QAAA,cACtBxN,KAAA,SAAAwN,QAAA,EAAM,+BAA+B,CAAC,GAAI,CAAAhI,IAAI,CAAC,CAAC,CAACsM,WAAW,CAAC,CAAC,EAAO,CAAC,CAClE,CAAC,EACR,CAAC,CAEd,CACA,cAAe,CAAA3R,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}