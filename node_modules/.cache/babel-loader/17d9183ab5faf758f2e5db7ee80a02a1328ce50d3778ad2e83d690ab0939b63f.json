{"ast":null,"code":"// Account handlers\nexport function handleRenameAccount(e,editAccount,editAccountName,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess){e.preventDefault();setEditAccountLoading(true);setEditAccountError('');if(!editAccountName.trim()){setEditAccountError('Account name is required.');setEditAccountLoading(false);return;}fetch('/api/accounts/rename',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({oldName:editAccount,newName:editAccountName.trim()})}).then(res=>res.json()).then(data=>{if(data.success){setAccounts(prev=>{const updated={...prev};updated[editAccountName.trim()]=updated[editAccount];delete updated[editAccount];return updated;});setEditAccount(null);setAccountSuccess('Account renamed successfully.');}else{setEditAccountError(data.error||'Failed to rename account.');}}).catch(()=>setEditAccountError('Failed to rename account.')).finally(()=>setEditAccountLoading(false));}export function handleChangePassword(e,editAccount,editAccountPass,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess){e.preventDefault();setEditAccountLoading(true);setEditAccountError('');if(!editAccountPass.trim()){setEditAccountError('Password is required.');setEditAccountLoading(false);return;}fetch('/api/accounts/changePassword',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:editAccount,pass:editAccountPass.trim()})}).then(res=>res.json()).then(data=>{if(data.success){setAccounts(prev=>({...prev,[editAccount]:editAccountPass.trim()}));setEditAccount(null);setAccountSuccess('Password changed successfully.');}else{setEditAccountError(data.error||'Failed to change password.');}}).catch(()=>setEditAccountError('Failed to change password.')).finally(()=>setEditAccountLoading(false));}export function handleDeleteAccount(acc,setEditAccountLoading,setEditAccountError,setAccounts,setAccountSuccess){setEditAccountLoading(true);setEditAccountError('');if(!window.confirm(`Delete account \"${acc}\"? This cannot be undone.`)){setEditAccountLoading(false);return;}fetch('/api/accounts/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:acc})}).then(res=>res.json()).then(data=>{if(data.success){setAccounts(prev=>{const updated={...prev};delete updated[acc];return updated;});setAccountSuccess('Account deleted.');}else{setEditAccountError(data.error||'Failed to delete account.');}}).catch(()=>setEditAccountError('Failed to delete account.')).finally(()=>setEditAccountLoading(false));}export function handleCreateAccount(e,newAccountName,newAccountPass,accounts,setAccountError,setAccountSuccess,setAccountsTabLoading,setAccounts,setNewAccountName,setNewAccountPass){e.preventDefault();setAccountError('');setAccountSuccess('');setAccountsTabLoading(true);const name=newAccountName.trim();const pass=newAccountPass.trim();if(!name||!pass){setAccountError('Account name and password are required.');setAccountsTabLoading(false);return;}if(accounts[name]){setAccountError('Account name already exists.');setAccountsTabLoading(false);return;}fetch('/api/accounts/create',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,pass})}).then(res=>res.json()).then(data=>{if(data.success){setAccounts(prev=>({...prev,[name]:pass}));setNewAccountName('');setNewAccountPass('');setAccountSuccess('Account created successfully.');}else{setAccountError(data.error||'Failed to create account.');}}).catch(()=>setAccountError('Failed to create account.')).finally(()=>setAccountsTabLoading(false));}// Empire handlers\nexport function handleDeleteEmpire(empireName,setNewEmpireLoading,setNewEmpireError,setEmpires){setNewEmpireLoading(true);setNewEmpireError('');if(!window.confirm(`Delete empire \"${empireName}\"? This cannot be undone.`)){setNewEmpireLoading(false);return;}fetch('/api/empires/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:empireName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.filter(e=>e.name!==empireName));}else{setNewEmpireError(data.error||'Failed to delete empire.');}}).catch(()=>setNewEmpireError('Failed to delete empire.')).finally(()=>setNewEmpireLoading(false));}export function handleCreateEmpire(e,newEmpireName,empires,setNewEmpireError,setNewEmpireLoading,setEmpires,setNewEmpireName){e.preventDefault();setNewEmpireError('');setNewEmpireLoading(true);const name=newEmpireName.trim();if(!name){setNewEmpireError('Empire name is required.');setNewEmpireLoading(false);return;}if(empires.some(e=>e.name===name)){setNewEmpireError('Empire name already exists.');setNewEmpireLoading(false);return;}fetch('/api/empires/create',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>[...prev,{name,account:null}]);setNewEmpireName('');}else{setNewEmpireError(data.error||'Failed to create empire.');}}).catch(()=>setNewEmpireError('Failed to create empire.')).finally(()=>setNewEmpireLoading(false));}","map":{"version":3,"names":["handleRenameAccount","e","editAccount","editAccountName","setEditAccountLoading","setEditAccountError","setAccounts","setEditAccount","setAccountSuccess","preventDefault","trim","fetch","method","headers","body","JSON","stringify","oldName","newName","then","res","json","data","success","prev","updated","error","catch","finally","handleChangePassword","editAccountPass","name","pass","handleDeleteAccount","acc","window","confirm","handleCreateAccount","newAccountName","newAccountPass","accounts","setAccountError","setAccountsTabLoading","setNewAccountName","setNewAccountPass","handleDeleteEmpire","empireName","setNewEmpireLoading","setNewEmpireError","setEmpires","filter","handleCreateEmpire","newEmpireName","empires","setNewEmpireName","some","account"],"sources":["C:/Users/Admin/Dokumente/Stellaris/project/StellarisRP-Site/src/handlers.js"],"sourcesContent":["// Account handlers\r\nexport function handleRenameAccount(e, editAccount, editAccountName, setEditAccountLoading, setEditAccountError, setAccounts, setEditAccount, setAccountSuccess) {\r\n    e.preventDefault();\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    if (!editAccountName.trim()) {\r\n        setEditAccountError('Account name is required.');\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/accounts/rename', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ oldName: editAccount, newName: editAccountName.trim() })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setAccounts(prev => {\r\n                const updated = { ...prev };\r\n                updated[editAccountName.trim()] = updated[editAccount];\r\n                delete updated[editAccount];\r\n                return updated;\r\n            });\r\n            setEditAccount(null);\r\n            setAccountSuccess('Account renamed successfully.');\r\n        } else {\r\n            setEditAccountError(data.error || 'Failed to rename account.');\r\n        }\r\n    })\r\n    .catch(() => setEditAccountError('Failed to rename account.'))\r\n    .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\nexport function handleChangePassword(e, editAccount, editAccountPass, setEditAccountLoading, setEditAccountError, setAccounts, setEditAccount, setAccountSuccess) {\r\n    e.preventDefault();\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    if (!editAccountPass.trim()) {\r\n        setEditAccountError('Password is required.');\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/accounts/changePassword', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: editAccount, pass: editAccountPass.trim() })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setAccounts(prev => ({ ...prev, [editAccount]: editAccountPass.trim() }));\r\n            setEditAccount(null);\r\n            setAccountSuccess('Password changed successfully.');\r\n        } else {\r\n            setEditAccountError(data.error || 'Failed to change password.');\r\n        }\r\n    })\r\n    .catch(() => setEditAccountError('Failed to change password.'))\r\n    .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\nexport function handleDeleteAccount(acc, setEditAccountLoading, setEditAccountError, setAccounts, setAccountSuccess) {\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    if (!window.confirm(`Delete account \"${acc}\"? This cannot be undone.`)) {\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/accounts/delete', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: acc })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setAccounts(prev => {\r\n                const updated = { ...prev };\r\n                delete updated[acc];\r\n                return updated;\r\n            });\r\n            setAccountSuccess('Account deleted.');\r\n        } else {\r\n            setEditAccountError(data.error || 'Failed to delete account.');\r\n        }\r\n    })\r\n    .catch(() => setEditAccountError('Failed to delete account.'))\r\n    .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\nexport function handleCreateAccount(\r\n    e,\r\n    newAccountName,\r\n    newAccountPass,\r\n    accounts,\r\n    setAccountError,\r\n    setAccountSuccess,\r\n    setAccountsTabLoading,\r\n    setAccounts,\r\n    setNewAccountName,\r\n    setNewAccountPass\r\n) {\r\n    e.preventDefault();\r\n    setAccountError('');\r\n    setAccountSuccess('');\r\n    setAccountsTabLoading(true);\r\n    const name = newAccountName.trim();\r\n    const pass = newAccountPass.trim();\r\n    if (!name || !pass) {\r\n        setAccountError('Account name and password are required.');\r\n        setAccountsTabLoading(false);\r\n        return;\r\n    }\r\n    if (accounts[name]) {\r\n        setAccountError('Account name already exists.');\r\n        setAccountsTabLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/accounts/create', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, pass })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setAccounts(prev => ({ ...prev, [name]: pass }));\r\n            setNewAccountName('');\r\n            setNewAccountPass('');\r\n            setAccountSuccess('Account created successfully.');\r\n        } else {\r\n            setAccountError(data.error || 'Failed to create account.');\r\n        }\r\n    })\r\n    .catch(() => setAccountError('Failed to create account.'))\r\n    .finally(() => setAccountsTabLoading(false));\r\n}\r\n\r\n// Empire handlers\r\nexport function handleDeleteEmpire(empireName, setNewEmpireLoading, setNewEmpireError, setEmpires) {\r\n    setNewEmpireLoading(true);\r\n    setNewEmpireError('');\r\n    if (!window.confirm(`Delete empire \"${empireName}\"? This cannot be undone.`)) {\r\n        setNewEmpireLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/empires/delete', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: empireName })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setEmpires(prev => prev.filter(e => e.name !== empireName));\r\n        } else {\r\n            setNewEmpireError(data.error || 'Failed to delete empire.');\r\n        }\r\n    })\r\n    .catch(() => setNewEmpireError('Failed to delete empire.'))\r\n    .finally(() => setNewEmpireLoading(false));\r\n}\r\n\r\nexport function handleCreateEmpire(\r\n    e,\r\n    newEmpireName,\r\n    empires,\r\n    setNewEmpireError,\r\n    setNewEmpireLoading,\r\n    setEmpires,\r\n    setNewEmpireName\r\n) {\r\n    e.preventDefault();\r\n    setNewEmpireError('');\r\n    setNewEmpireLoading(true);\r\n    const name = newEmpireName.trim();\r\n    if (!name) {\r\n        setNewEmpireError('Empire name is required.');\r\n        setNewEmpireLoading(false);\r\n        return;\r\n    }\r\n    if (empires.some(e => e.name === name)) {\r\n        setNewEmpireError('Empire name already exists.');\r\n        setNewEmpireLoading(false);\r\n        return;\r\n    }\r\n    fetch('/api/empires/create', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            setEmpires(prev => [...prev, { name, account: null }]);\r\n            setNewEmpireName('');\r\n        } else {\r\n            setNewEmpireError(data.error || 'Failed to create empire.');\r\n        }\r\n    })\r\n    .catch(() => setNewEmpireError('Failed to create empire.'))\r\n    .finally(() => setNewEmpireLoading(false));\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}