{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./css/App.css';import'./css/Treaties.css';import'./css/Empires.css';import'./css/Boards.css';import'./css/Accounts.css';import{getNationPairs}from'./utils/getNationPairs';import TreatyDialog from'./components/TreatyDialog';import TreatyView from'./components/TreatyView';import EmpireEditPanel from'./components/EmpireEditPanel';import EmpirePanel from'./components/EmpirePanel';import MenuDropdown from'./components/MenuDropdown';import{handleCreateAccount,handleCreateEmpire,handleRenameAccount,handleChangePassword,handleDeleteAccount,handleDeleteEmpire}from'./handlers/handlers';import{useBurgerMenu}from'./components/BurgerMenu';import RoadmapTab from'./components/RoadmapTab';import{TREATY_STATUSES}from'./utils/treatyStatuses';import{TREATY_STATUS_OPTIONS}from'./utils/treatyStatusOptions';import AccountList from'./components/AccountList';import MessageList from'./components/MessageList';import EmpireList from'./components/EmpireList';import TreatyList from'./components/TreatyList';import SearchSortBar from'./components/SearchSortBar';import{ErrorMessage,LoadingMessage}from'./components/Messages';import Dropdown from'./components/Dropdown';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[empires,setEmpires]=useState([]);const[selected,setSelected]=useState(()=>{const saved=localStorage.getItem('stellarisSelectedBoard');return saved?saved:null;});const[messages,setMessages]=useState({});const[text,setText]=useState('');const pollingRef=useRef();const messagesEndRef=useRef(null);const[accounts,setAccounts]=useState({});const[accountsLoaded,setAccountsLoaded]=useState(false);const[account,setAccount]=useState(()=>{const saved=localStorage.getItem('stellarisAccount');return saved?JSON.parse(saved):null;});const[loginUser,setLoginUser]=useState('');const[loginPass,setLoginPass]=useState('');const[error,setError]=useState('');const[activeTab,setActiveTab]=useState('channels');const[empirePage,setEmpirePage]=useState(null);const[editEmpire,setEditEmpire]=useState(null);const[empireInfo,setEmpireInfo]=useState({});// Account creation and management\nconst[newAccountName,setNewAccountName]=useState('');const[newAccountPass,setNewAccountPass]=useState('');const[accountError,setAccountError]=useState('');const[accountSuccess,setAccountSuccess]=useState('');const[accountsTabLoading,setAccountsTabLoading]=useState(false);const[editAccount,setEditAccount]=useState(null);const[editAccountName,setEditAccountName]=useState('');const[editAccountPass,setEditAccountPass]=useState('');const[editAccountError,setEditAccountError]=useState('');const[editAccountLoading,setEditAccountLoading]=useState(false);// Manage Empires tab\nconst[newEmpireName,setNewEmpireName]=useState('');const[newEmpireError,setNewEmpireError]=useState('');const[newEmpireLoading,setNewEmpireLoading]=useState(false);// --- Treaties State (NEW IMPLEMENTATION) ---\nconst[treaties,setTreaties]=useState([]);const[treatiesLoaded,setTreatiesLoaded]=useState(false);const[treatyDialog,setTreatyDialog]=useState({open:false,mode:null,data:null});const[treatyError,setTreatyError]=useState('');const[treatySaving,setTreatySaving]=useState(false);// --- Add search states ---\nconst[treatySearch,setTreatySearch]=useState(()=>localStorage.getItem('treatySearch')||'');const[empireSearch,setEmpireSearch]=useState(()=>localStorage.getItem('empireSearch')||'');// --- Add sort states ---\nconst[treatySort,setTreatySort]=useState('title');const[empireSort,setEmpireSort]=useState('name');// --- End states ---\n// --- Fetch treaties ---\nfunction fetchTreaties(){fetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data=>{setTreaties(Array.isArray(data)?data:[]);setTreatiesLoaded(true);}).catch(()=>setTreatiesLoaded(true));}useEffect(()=>{fetchTreaties();},[]);// --- Treaty CRUD ---\nfunction openTreatyDialog(mode){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;setTreatyDialog({open:true,mode,data});setTreatyError('');}function closeTreatyDialog(){setTreatyDialog({open:false,mode:null,data:null});setTreatyError('');}function handleTreatySave(form){var _payload$participants;setTreatySaving(true);setTreatyError('');const payload={...form};if(!payload.title||!payload.content||!((_payload$participants=payload.participants)!==null&&_payload$participants!==void 0&&_payload$participants.length)){setTreatyError('Title, content, and at least one participant are required.');setTreatySaving(false);return;}if(!payload.owner)payload.owner=(account===null||account===void 0?void 0:account.username)||'';if(!payload.status)payload.status='discussion';if(!payload.id)payload.id=Date.now().toString();fetch('/api/treaties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}).then(res=>res.json()).then(data=>{if(data.success){// --- FIX: update treaties state locally, just like accounts ---\nsetTreaties(prev=>{// If editing, replace; if new, add\nconst idx=prev.findIndex(t=>t.id===payload.id);if(idx!==-1){const updated=[...prev];updated[idx]={...prev[idx],...payload};return updated;}else{return[...prev,payload];}});closeTreatyDialog();}else{setTreatyError(data.error||'Failed to save treaty');}}).catch(()=>setTreatyError('Failed to save treaty')).finally(()=>setTreatySaving(false));}function handleTreatyTransferOwner(id,newOwner){setTreatySaving(true);fetch('/api/treaties/transfer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,newOwner})}).then(res=>res.json()).then(data=>{if(data.success)fetchTreaties();}).finally(()=>setTreatySaving(false));}// --- Treaty Permissions ---\nfunction canEditTreaty(treaty){if(!account)return false;return account.username===treaty.owner||account.username===\"GameMaster\";}function canTransferTreaty(treaty){return account&&account.username===\"GameMaster\";}const{showMenu,showPermissions,gmPermissions,showRoadmap,handleMenuToggle,handleMenuClose,handlePermissionsToggle,handlePermissionChange,handleRoadmapToggle,menuDropdownRef,permissionsDropdownRef}=useBurgerMenu(account);// Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\n// This prevents any reloads while editing or viewing an empire.\nuseEffect(()=>{if(activeTab==='empires'&&!editEmpire&&!empirePage){// Add cache-busting query param\nfetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});}).catch(()=>{});}// Only run when switching tabs, or leaving view/edit mode\n},[activeTab,editEmpire,empirePage]);// Helper: get empire names\nfunction getEmpireNames(){// Only include empires that exist (already the case)\nreturn empires.map(e=>e.name);}// Helper: get boards from linked empires\nfunction getLinkedBoards(){const names=getEmpireNames();return getNationPairs(names);}// Helper: get account linked to empire\nfunction getEmpireAccount(empireName){const emp=empires.find(e=>e.name===empireName);return emp&&emp.account?emp.account:null;}// Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\nconst filteredBoards=account?account.username===\"GameMaster\"?getLinkedBoards():getLinkedBoards().filter(_ref=>{let[a,b]=_ref;return getEmpireAccount(a)===account.username||getEmpireAccount(b)===account.username;}):[];// GameMaster: link/unlink accounts to empires\nfunction handleLinkAccount(empireName,accountName){fetch('/api/empires/link',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName,accountName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:accountName}:e));}});}function handleUnlinkAccount(empireName){fetch('/api/empires/unlink',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:null}:e));}});}if(!account){return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Stellaris RP Chronicler\"})}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(\"section\",{className:\"account-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-title\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,className:\"account-form login-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"login-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Empire name\",value:loginUser,onChange:e=>setLoginUser(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:loginPass,onChange:e=>setLoginPass(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!accountsLoaded,className:\"login-btn\",children:\"Login\"})]}),!accountsLoaded&&/*#__PURE__*/_jsx(LoadingMessage,{children:\"Loading accounts...\"}),error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error})]})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Stellaris RP Chronicler \\xA9 \",new Date().getFullYear()]})})]});}// Save selected board to localStorage\nfunction handleBoardSelect(pair){const key=pair.join('|');setSelected(key);localStorage.setItem('stellarisSelectedBoard',key);}// Fetch messages for the selected board from the server\nuseEffect(()=>{// Only poll messages if on channels tab and not editing/viewing empire\nif(!selected||activeTab!=='channels'||editEmpire||empirePage){// Stop polling if not in correct state\nif(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}return;}// Use selected as key\nconst key=selected;// Function to fetch messages\nconst fetchMessages=()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>{if(!res.ok)throw new Error('Network response was not ok');return res.json();}).then(data=>{setMessages(prev=>({...prev,[key]:data}));}).catch(err=>{setMessages(prev=>({...prev,[key]:[]}));console.error('Failed to fetch messages:',err);});};// Initial fetch\nfetchMessages();// Set up polling\npollingRef.current=setInterval(fetchMessages,2000);// Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\nreturn()=>{if(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}};},[selected,activeTab,editEmpire,empirePage]);// Scroll to bottom only when messages actually change for the selected board\nconst prevMessagesLengthRef=useRef(0);useEffect(()=>{if(!selected)return;const currentMessages=messages[selected]||[];if(currentMessages.length!==prevMessagesLengthRef.current){if(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:'auto'});}prevMessagesLengthRef.current=currentMessages.length;}},[messages,selected]);// When posting, always use the logged-in account's empire name\nfunction postMessage(e){e.preventDefault();if(!selected||!account||!text.trim())return;const key=selected;const msg={board:key,author:account.username,text,timestamp:Date.now()};fetch('/api/messages',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg)}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[key]:data}));});});setText('');}// Fetch accounts from server (accounts.json)\nuseEffect(()=>{fetch('/accounts.json').then(res=>res.json()).then(data=>{setAccounts(data);setAccountsLoaded(true);}).catch(()=>setAccountsLoaded(true));},[]);// Load empires from empires.json\nuseEffect(()=>{fetch('/empires.json').then(res=>res.json()).then(data=>{setEmpires(Array.isArray(data)?data:[]);});},[]);// Fetch treaties from backend\nuseEffect(()=>{fetch('/treaties.json').then(res=>res.json()).then(data=>{setTreaties(Array.isArray(data)?data:[]);setTreatiesLoaded(true);}).catch(()=>setTreatiesLoaded(true));},[]);function handleLogin(e){e.preventDefault();// Wait until accounts are loaded\nif(!accountsLoaded){setError('Accounts are still loading, please wait...');return;}const username=loginUser.trim();const password=loginPass.trim();if(!accounts[username]){setError('Invalid credentials');return;}if(accounts[username]!==password){setError('Invalid credentials');return;}setAccount({username});localStorage.setItem('stellarisAccount',JSON.stringify({username}));setError('');}function handleLogout(){setAccount(null);localStorage.removeItem('stellarisAccount');// Reset UI state to avoid rendering issues after logout\nsetActiveTab('channels');setEmpirePage(null);setEditEmpire(null);setEditAccount(null);setTreatyDialog({open:false,mode:null,data:null});}// Save empire info to backend and update local state\nfunction saveEmpireInfo(name,info){return fetch('/api/empireInfo',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,info})}).then(res=>res.json()).then(()=>{// After saving, reload from backend with cache-busting param\nreturn fetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});});});}// Edit panel for empire info\nfunction EmpireEditPanel(_ref2){let{name,onCancel}=_ref2;// Only initialize edit state from empireInfo[name] when the component mounts\nconst info=empireInfo[name]||{};const[edit,setEdit]=useState(info);// Do NOT use useEffect to update edit state from empireInfo.\n// This ensures the text fields are not reset while editing.\nfunction handleChange(e){setEdit({...edit,[e.target.name]:e.target.value});}function handleSave(e){e.preventDefault();saveEmpireInfo(name,edit).then(()=>{onCancel();});}return/*#__PURE__*/_jsxs(\"form\",{className:\"empire-edit-form\",onSubmit:handleSave,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Lore:\",/*#__PURE__*/_jsx(\"textarea\",{name:\"lore\",value:edit.lore||'',onChange:handleChange,rows:3})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Stats:\",/*#__PURE__*/_jsx(\"input\",{name:\"stats\",value:edit.stats||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Ethics:\",/*#__PURE__*/_jsx(\"input\",{name:\"ethics\",value:edit.ethics||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Civics:\",/*#__PURE__*/_jsx(\"input\",{name:\"civics\",value:edit.civics||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Special Info:\",/*#__PURE__*/_jsx(\"input\",{name:\"special\",value:edit.special||'',onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem',marginTop:'1rem'},children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",children:\"Save\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"empire-back-btn\",onClick:onCancel,children:\"Cancel\"})]})]});}// Treaties: permissions\nfunction canEditTreaty(treaty){if(!account)return false;return account.username===treaty.owner||account.username===\"GameMaster\";}function canTransferTreaty(treaty){return account&&account.username===\"GameMaster\";}// Treaties: open new form\nfunction handleAddTreaty(){setTreatyDialog({open:true,mode:'new',data:null});setTreatyError('');}// Treaties: open edit\nfunction handleEditTreaty(treaty){setTreatyDialog({open:true,mode:'edit',data:treaty});setTreatyError('');}// Treaties: open view\nfunction handleViewTreaty(treaty){setTreatyDialog({open:true,mode:'view',data:treaty});setTreatyError('');}// Treaties: cancel form\nfunction handleCancelTreatyForm(){setTreatyDialog({open:false,mode:null,data:null});setTreatyError('');}// Treaties: save (create or update)\nfunction handleSaveTreaty(e){e.preventDefault();setTreatyError('');setTreatySaving(true);const isEdit=treatyEditId!=null;const form={...treatyForm};if(!form.title.trim()||!form.content.trim()||!form.participants.length){setTreatyError('Title, content, and at least one participant are required.');setTreatySaving(false);return;}if(!form.owner)form.owner=account?account.username:'';if(!form.status)form.status='discussion';if(!form.id)form.id=isEdit?treatyEditId:Date.now().toString();fetch('/api/treaties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(form)}).then(res=>res.json()).then(data=>{if(data.success){// Always fetch the latest treaties from /treaties.json after save\nreturn fetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data2=>{setTreaties(Array.isArray(data2)?data2:[]);setTreatyForm(null);setTreatyEditId(null);setShowTreatyForm(false);setTreatyViewId(form.id);});}else{setTreatyError(data.error||'Failed to save treaty');}}).catch(()=>setTreatyError('Failed to save treaty')).finally(()=>setTreatySaving(false));}// Treaties: transfer ownership (GM only)\nfunction handleTransferTreatyOwner(treaty,newOwner){if(!canTransferTreaty(treaty))return;setTreatySaving(true);fetch('/api/treaties/transfer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id:treaty.id,newOwner})}).then(res=>res.json()).then(data=>{if(data.success){return fetch('/treaties.json').then(res=>res.json()).then(data2=>setTreaties(Array.isArray(data2)?data2:[]));}}).finally(()=>setTreatySaving(false));}// Treaties: form field change\nfunction handleTreatyFormChange(e){const{name,value,type,options}=e.target;if(type==='select-multiple'){const vals=Array.from(options).filter(o=>o.selected).map(o=>o.value);setTreatyForm(f=>({...f,[name]:vals}));}else{setTreatyForm(f=>({...f,[name]:value}));}}// Treaties: render\nfunction renderTreatyForm(){if(!treatyForm)return null;return/*#__PURE__*/_jsxs(\"form\",{className:\"treaty-form card\",onSubmit:handleSaveTreaty,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-header\",children:[/*#__PURE__*/_jsx(\"input\",{name:\"title\",placeholder:\"Treaty Title\",value:treatyForm.title,onChange:handleTreatyFormChange,className:\"login-input\",required:true,disabled:treatySaving}),/*#__PURE__*/_jsx(Dropdown,{value:treatyForm.status,onChange:handleTreatyFormChange,options:TREATY_STATUS_OPTIONS,placeholder:\"Select status...\",className:\"login-input\",disabled:treatySaving})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-participants\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"participants-select\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"participants-label\",children:\"Participants\"}),/*#__PURE__*/_jsx(\"select\",{name:\"participants\",value:treatyForm.participants,onChange:handleTreatyFormChange,className:\"login-input\",multiple:true,disabled:treatySaving,children:getEmpireNames().map(e=>/*#__PURE__*/_jsx(\"option\",{value:e,children:e},e))})]}),account&&account.username===\"GameMaster\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"owner-select\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"owner-label\",children:\"Owner:\"}),/*#__PURE__*/_jsx(Dropdown,{value:treatyForm.owner,onChange:handleTreatyFormChange,options:Object.keys(accounts).map(acc=>({value:acc,label:acc})),placeholder:\"Select owner...\",className:\"login-input\",disabled:treatySaving})]})]}),/*#__PURE__*/_jsx(\"label\",{className:\"treaty-content-label\",children:\"Treaty Content\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"content\",placeholder:\"Treaty Content\",value:treatyForm.content,onChange:handleTreatyFormChange,className:\"login-input\",rows:9,required:true,disabled:treatySaving}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-form-actions\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:treatySaving,children:treatyEditId?\"Save Changes\":\"Create Treaty\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"empire-back-btn\",onClick:handleCancelTreatyForm,disabled:treatySaving,children:\"Cancel\"}),treatyError&&/*#__PURE__*/_jsx(ErrorMessage,{className:\"treaty-error\",children:treatyError})]})]});}function renderTreatyView(treaty){const statusObj=TREATY_STATUSES.find(s=>s.value===treaty.status);return/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-header\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"treaty-title\",children:treaty.title}),/*#__PURE__*/_jsx(\"span\",{className:\"treaty-status\",style:{color:statusObj.color},children:statusObj?statusObj.label:treaty.status})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-owner\",children:[\"Owner: \",treaty.owner]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-participants\",children:[/*#__PURE__*/_jsx(\"b\",{children:\"Participants:\"}),\" \",treaty.participants&&treaty.participants.length>0?treaty.participants.join(', '):/*#__PURE__*/_jsx(\"i\",{children:\"None\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"treaty-content-static\",children:treaty.content}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-view-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"empire-back-btn\",onClick:()=>setTreatyViewId(null),children:\"Back\"}),canEditTreaty(treaty)&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",onClick:()=>handleEditTreaty(treaty),children:\"Edit\"}),canTransferTreaty(treaty)&&/*#__PURE__*/_jsx(\"select\",{value:treaty.owner,onChange:e=>handleTransferTreatyOwner(treaty,e.target.value),className:\"owner-transfer-select\",children:Object.keys(accounts).map(acc=>/*#__PURE__*/_jsx(\"option\",{value:acc,children:acc},acc))})]})]});}// Only show accounts tab for GameMaster\nconst showAccountsTab=account&&account.username===\"GameMaster\";const tabs=[{key:'channels',label:'Channels'},{key:'empires',label:'Empires'},{key:'treaties',label:'Treaties'}];if(showAccountsTab){tabs.push({key:'accounts',label:'Manage Accounts'});tabs.push({key:'manage-empires',label:'Manage Empires'});}// Ref for account edit panel\nconst accountEditPanelRef=useRef(null);// Scroll to edit panel when editAccount changes\nuseEffect(()=>{if(editAccount&&accountEditPanelRef.current){accountEditPanelRef.current.scrollIntoView({behavior:'smooth',block:'center'});}},[editAccount]);// --- MODIFIED: Only allow delete if GM and permission enabled ---\nfunction handleDeleteMessage(boardKey,msgIdx){if(!account||account.username!==\"GameMaster\"||!gmPermissions.canDeleteMessages)return;if(!window.confirm(\"Delete this message?\"))return;fetch('/api/messages/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({board:boardKey,index:Number(msgIdx)})}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(boardKey)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[boardKey]:data}));});});}// --- Treaties: filtered and sorted by search ---\nconst filteredTreaties=treatySearch.trim()?treaties.filter(t=>t.title&&t.title.toLowerCase().includes(treatySearch.toLowerCase())||t.content&&t.content.toLowerCase().includes(treatySearch.toLowerCase())||t.owner&&t.owner.toLowerCase().includes(treatySearch.toLowerCase())||Array.isArray(t.participants)&&t.participants.some(p=>p.toLowerCase().includes(treatySearch.toLowerCase()))):treaties;const sortedTreaties=[...filteredTreaties].sort((a,b)=>{if(treatySort==='title')return a.title.localeCompare(b.title);if(treatySort==='owner')return a.owner.localeCompare(b.owner);return 0;});// --- Empires: filtered and sorted by search ---\nconst filteredEmpires=empireSearch.trim()?getEmpireNames().filter(e=>e.toLowerCase().includes(empireSearch.toLowerCase())):getEmpireNames();const sortedEmpires=[...filteredEmpires].sort((a,b)=>{if(empireSort==='name')return a.localeCompare(b);return 0;});return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Stellaris RP Chronicler\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"tabs-bar\",children:[tabs.map(tab=>/*#__PURE__*/_jsx(\"button\",{className:`tab-btn${activeTab===tab.key?' active':''}`,onClick:()=>{setActiveTab(tab.key);setEmpirePage(null);setEditEmpire(null);setEditAccount(null);// Removed setTreatyViewId and setShowTreatyForm calls\n},children:tab.label},tab.key)),/*#__PURE__*/_jsx(MenuDropdown,{showMenu:showMenu,showPermissions:showPermissions,showRoadmap:showRoadmap,handleMenuToggle:handleMenuToggle,handleLogout:handleLogout,account:account,handlePermissionsToggle:handlePermissionsToggle,gmPermissions:gmPermissions,handlePermissionChange:handlePermissionChange,handleRoadmapToggle:handleRoadmapToggle,menuDropdownRef:menuDropdownRef,permissionsDropdownRef:permissionsDropdownRef})]})]}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:showRoadmap?/*#__PURE__*/_jsx(RoadmapTab,{onClose:handleRoadmapToggle}):activeTab==='treaties'?/*#__PURE__*/_jsxs(\"section\",{className:\"treaties-section card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaties-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Treaties, Contracts & Agreements\"}),account&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",onClick:()=>openTreatyDialog('new'),children:\"+ Add New Treaty\"})]}),/*#__PURE__*/_jsx(SearchSortBar,{searchValue:treatySearch,onSearchChange:setTreatySearch,onClearSearch:()=>setTreatySearch(''),sortValue:treatySort,onSortChange:setTreatySort,sortOptions:[{value:'title',label:'Sort by Title'},{value:'owner',label:'Sort by Owner'}],placeholder:\"Search treaties by title, content, owner, or participant...\",searchClass:\"treaty-search-input\",sortClass:\"treaty-sort-select\"}),treatyDialog.open&&treatyDialog.mode!=='view'&&/*#__PURE__*/_jsx(TreatyDialog,{open:treatyDialog.open,mode:treatyDialog.mode,data:treatyDialog.data,onSave:handleTreatySave,onClose:closeTreatyDialog,error:treatyError,saving:treatySaving,empires:empires.map(e=>e.name),accounts:accounts,account:account}),treatyDialog.open&&treatyDialog.mode==='view'&&/*#__PURE__*/_jsx(TreatyView,{treaty:treatyDialog.data,onBack:closeTreatyDialog,onEdit:()=>openTreatyDialog('edit',treatyDialog.data),onTransfer:newOwner=>handleTreatyTransferOwner(treatyDialog.data.id,newOwner),canEdit:canEditTreaty(treatyDialog.data),canTransfer:canTransferTreaty(treatyDialog.data),accounts:accounts}),/*#__PURE__*/_jsx(TreatyList,{treaties:sortedTreaties,loaded:treatiesLoaded,onView:treaty=>setTreatyDialog({open:true,mode:'view',data:treaty}),canEditTreaty:canEditTreaty,onEdit:openTreatyDialog})]}):activeTab==='manage-empires'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Empires\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateEmpire(e,newEmpireName,empires,setNewEmpireError,setNewEmpireLoading,setEmpires,setNewEmpireName),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"New empire name\",value:newEmpireName,onChange:e=>setNewEmpireName(e.target.value),required:true,className:\"login-input\",disabled:newEmpireLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:newEmpireLoading,onClick:e=>e.stopPropagation(),children:\"Create Empire\"})]})}),newEmpireError&&/*#__PURE__*/_jsx(ErrorMessage,{children:newEmpireError}),/*#__PURE__*/_jsx(\"h3\",{children:\"Empires & Account Assignment\"}),/*#__PURE__*/_jsx(EmpireList,{empires:empires,accounts:accounts,onLink:handleLinkAccount,onUnlink:handleUnlinkAccount,onDelete:name=>handleDeleteEmpire(name,setNewEmpireLoading,setNewEmpireError,setEmpires),loading:newEmpireLoading})]}):activeTab==='accounts'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Accounts\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateAccount(e,newAccountName,newAccountPass,accounts,setAccountError,setAccountSuccess,setAccountsTabLoading,setAccounts,setNewAccountName,setNewAccountPass),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Account name\",value:newAccountName,onChange:e=>setNewAccountName(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:newAccountPass,onChange:e=>setNewAccountPass(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:accountsTabLoading,onClick:e=>e.stopPropagation(),children:\"Create\"})]})}),accountError&&/*#__PURE__*/_jsx(ErrorMessage,{children:accountError}),accountSuccess&&/*#__PURE__*/_jsx(LoadingMessage,{style:{color:'limegreen'},children:accountSuccess}),/*#__PURE__*/_jsx(\"h3\",{children:\"All Accounts\"}),/*#__PURE__*/_jsx(AccountList,{accounts:accounts,onEdit:acc=>{setEditAccount(acc);setEditAccountName(acc);setEditAccountPass('');setEditAccountError('');},onDelete:acc=>handleDeleteAccount(acc,setEditAccountLoading,setEditAccountError,setAccounts,setAccountSuccess),editAccountLoading:editAccountLoading}),editAccount&&/*#__PURE__*/_jsxs(\"div\",{className:\"account-edit-panel card\",ref:accountEditPanelRef,children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Edit Account: \",/*#__PURE__*/_jsx(\"b\",{children:editAccount})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>handleRenameAccount(e,editAccount,editAccountName,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess),className:\"edit-account-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Rename to:\",/*#__PURE__*/_jsx(\"input\",{value:editAccountName,onChange:e=>setEditAccountName(e.target.value),className:\"login-input\",disabled:editAccountLoading})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:editAccountLoading,children:\"Rename\"})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>handleChangePassword(e,editAccount,editAccountPass,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess),className:\"change-password-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Password:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:editAccountPass,onChange:e=>setEditAccountPass(e.target.value),className:\"login-input\",disabled:editAccountLoading})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"empire-save-btn\",disabled:editAccountLoading,children:\"Change Password\"})]}),editAccountError&&/*#__PURE__*/_jsx(\"div\",{className:\"login-error\",children:editAccountError}),/*#__PURE__*/_jsx(\"button\",{className:\"empire-back-btn\",onClick:()=>setEditAccount(null),disabled:editAccountLoading,children:\"Cancel\"})]})]}):activeTab==='empires'?editEmpire?/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Edit \",editEmpire]}),/*#__PURE__*/_jsx(EmpireEditPanel,{name:editEmpire,onCancel:()=>setEditEmpire(null),empireInfo:empireInfo,saveEmpireInfo:saveEmpireInfo})]}):empirePage?/*#__PURE__*/_jsx(EmpirePanel,{name:empirePage,canEdit:account&&account.username===empirePage,empireInfo:empireInfo,getEmpireAccount:getEmpireAccount,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire}):/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsx(SearchSortBar,{searchValue:empireSearch,onSearchChange:setEmpireSearch,onClearSearch:()=>setEmpireSearch(''),sortValue:empireSort,onSortChange:setEmpireSort,sortOptions:[{value:'name',label:'Sort by Name'}],placeholder:\"Search empires by name...\",searchClass:\"empire-search-input\",sortClass:\"empire-sort-select\"}),/*#__PURE__*/_jsx(\"div\",{className:\"empires-info-list\",style:{display:'flex',flexWrap:'wrap',gap:'1.5rem',justifyContent:'flex-start'},children:/*#__PURE__*/_jsx(EmpireList,{empires:sortedEmpires.map(name=>empires.find(e=>e.name===name)),accounts:accounts,account:account,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire,getEmpireAccount:getEmpireAccount})})]}):/*#__PURE__*/_jsx(_Fragment,{children:!account?/*#__PURE__*/_jsxs(\"section\",{className:\"account-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-title\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,className:\"account-form login-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"login-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Empire name\",value:loginUser,onChange:e=>setLoginUser(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:loginPass,onChange:e=>setLoginPass(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!accountsLoaded,className:\"login-btn\",children:\"Login\"})]}),!accountsLoaded&&/*#__PURE__*/_jsx(LoadingMessage,{children:\"Loading accounts...\"}),error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error})]}):/*#__PURE__*/// Center the channels page\n_jsx(\"div\",{style:{display:'flex',justifyContent:'center',width:'100%'},children:/*#__PURE__*/_jsx(\"section\",{className:\"boards-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"channels-main\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"channels-sidebar\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"boards-list card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:account&&account.username===\"GameMaster\"?\"All Boards\":\"Your Diplomatic Channels\"}),/*#__PURE__*/_jsx(\"div\",{className:\"boards-list-header\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"boards-list-count\",children:[filteredBoards.length,\" \",filteredBoards.length===1?\"channel\":\"channels\"]})}),/*#__PURE__*/_jsxs(\"ul\",{className:\"boards-list-ul\",children:[filteredBoards.length===0&&/*#__PURE__*/_jsx(\"li\",{className:\"no-channels\",children:\"No channels available.\"}),filteredBoards.map(_ref3=>{let[a,b]=_ref3;const key=a+'|'+b;return/*#__PURE__*/_jsx(\"li\",{className:`boards-list-item${selected===key?' active':''}`,children:/*#__PURE__*/_jsxs(\"button\",{className:\"board-btn\",onClick:()=>handleBoardSelect([a,b]),children:[/*#__PURE__*/_jsx(\"span\",{className:\"board-nations\",children:a}),/*#__PURE__*/_jsx(\"span\",{className:\"board-arrow\",children:\"\\u2194\"}),/*#__PURE__*/_jsx(\"span\",{className:\"board-nations\",children:b})]})},key);})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"channels-content\",children:/*#__PURE__*/_jsx(\"div\",{className:\"board-messages card\",children:selected&&filteredBoards.length>0?/*#__PURE__*/_jsxs(\"div\",{className:\"board-messages-inner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"board-title-row\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"board-title\",children:selected.replace('|',' ↔ ')})}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages-panel\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"messages-list-container\",children:/*#__PURE__*/_jsx(MessageList,{messages:messages[selected]||[],selected:selected,account:account,gmPermissions:gmPermissions,handleDeleteMessage:handleDeleteMessage})}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:postMessage,className:\"message-form message-form-bottom\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Your empire\",value:account.username,disabled:true,required:true,className:\"author-input\"}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Message\",value:text,onChange:e=>setText(e.target.value),required:true,className:\"text-input\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-btn\",children:\"Send\"})]})]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\",children:\"Select a channel to view messages.\"})})})]})})})})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Stellaris RP Chronicler \\xA9 \",new Date().getFullYear()]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","getNationPairs","TreatyDialog","TreatyView","EmpireEditPanel","EmpirePanel","MenuDropdown","handleCreateAccount","handleCreateEmpire","handleRenameAccount","handleChangePassword","handleDeleteAccount","handleDeleteEmpire","useBurgerMenu","RoadmapTab","TREATY_STATUSES","TREATY_STATUS_OPTIONS","AccountList","MessageList","EmpireList","TreatyList","SearchSortBar","ErrorMessage","LoadingMessage","Dropdown","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","empires","setEmpires","selected","setSelected","saved","localStorage","getItem","messages","setMessages","text","setText","pollingRef","messagesEndRef","accounts","setAccounts","accountsLoaded","setAccountsLoaded","account","setAccount","JSON","parse","loginUser","setLoginUser","loginPass","setLoginPass","error","setError","activeTab","setActiveTab","empirePage","setEmpirePage","editEmpire","setEditEmpire","empireInfo","setEmpireInfo","newAccountName","setNewAccountName","newAccountPass","setNewAccountPass","accountError","setAccountError","accountSuccess","setAccountSuccess","accountsTabLoading","setAccountsTabLoading","editAccount","setEditAccount","editAccountName","setEditAccountName","editAccountPass","setEditAccountPass","editAccountError","setEditAccountError","editAccountLoading","setEditAccountLoading","newEmpireName","setNewEmpireName","newEmpireError","setNewEmpireError","newEmpireLoading","setNewEmpireLoading","treaties","setTreaties","treatiesLoaded","setTreatiesLoaded","treatyDialog","setTreatyDialog","open","mode","data","treatyError","setTreatyError","treatySaving","setTreatySaving","treatySearch","setTreatySearch","empireSearch","setEmpireSearch","treatySort","setTreatySort","empireSort","setEmpireSort","fetchTreaties","fetch","Date","now","then","res","json","Array","isArray","catch","openTreatyDialog","arguments","length","undefined","closeTreatyDialog","handleTreatySave","form","_payload$participants","payload","title","content","participants","owner","username","status","id","toString","method","headers","body","stringify","success","prev","idx","findIndex","t","updated","finally","handleTreatyTransferOwner","newOwner","canEditTreaty","treaty","canTransferTreaty","showMenu","showPermissions","gmPermissions","showRoadmap","handleMenuToggle","handleMenuClose","handlePermissionsToggle","handlePermissionChange","handleRoadmapToggle","menuDropdownRef","permissionsDropdownRef","getEmpireNames","map","e","name","getLinkedBoards","names","getEmpireAccount","empireName","emp","find","filteredBoards","filter","_ref","a","b","handleLinkAccount","accountName","handleUnlinkAccount","className","children","onSubmit","handleLogin","placeholder","value","onChange","target","required","disabled","type","getFullYear","handleBoardSelect","pair","key","join","setItem","current","clearInterval","fetchMessages","encodeURIComponent","ok","Error","err","console","setInterval","prevMessagesLengthRef","currentMessages","scrollIntoView","behavior","postMessage","preventDefault","trim","msg","board","author","timestamp","password","handleLogout","removeItem","saveEmpireInfo","info","_ref2","onCancel","edit","setEdit","handleChange","handleSave","lore","rows","stats","ethics","civics","special","style","display","gap","marginTop","onClick","handleAddTreaty","handleEditTreaty","handleViewTreaty","handleCancelTreatyForm","handleSaveTreaty","isEdit","treatyEditId","treatyForm","data2","setTreatyForm","setTreatyEditId","setShowTreatyForm","setTreatyViewId","handleTransferTreatyOwner","handleTreatyFormChange","options","vals","from","o","f","renderTreatyForm","multiple","Object","keys","acc","label","renderTreatyView","statusObj","s","color","showAccountsTab","tabs","push","accountEditPanelRef","block","handleDeleteMessage","boardKey","msgIdx","canDeleteMessages","window","confirm","index","Number","filteredTreaties","toLowerCase","includes","some","p","sortedTreaties","sort","localeCompare","filteredEmpires","sortedEmpires","tab","onClose","searchValue","onSearchChange","onClearSearch","sortValue","onSortChange","sortOptions","searchClass","sortClass","onSave","saving","onBack","onEdit","onTransfer","canEdit","canTransfer","loaded","onView","stopPropagation","onLink","onUnlink","onDelete","loading","ref","flexWrap","justifyContent","width","_ref3","replace"],"sources":["C:/Users/Admin/Dokumente/Stellaris/project/StellarisRP-Site/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './css/App.css';\r\nimport './css/Treaties.css';\r\nimport './css/Empires.css';\r\nimport './css/Boards.css';\r\nimport './css/Accounts.css';\r\nimport { getNationPairs } from './utils/getNationPairs';\r\nimport TreatyDialog from './components/TreatyDialog';\r\nimport TreatyView from './components/TreatyView';\r\nimport EmpireEditPanel from './components/EmpireEditPanel';\r\nimport EmpirePanel from './components/EmpirePanel';\r\nimport MenuDropdown from './components/MenuDropdown';\r\nimport {\r\n    handleCreateAccount,\r\n    handleCreateEmpire,\r\n    handleRenameAccount,\r\n    handleChangePassword,\r\n    handleDeleteAccount,\r\n    handleDeleteEmpire\r\n} from './handlers/handlers';\r\nimport { useBurgerMenu } from './components/BurgerMenu';\r\nimport RoadmapTab from './components/RoadmapTab';\r\nimport { TREATY_STATUSES } from './utils/treatyStatuses';\r\nimport { TREATY_STATUS_OPTIONS } from './utils/treatyStatusOptions';\r\nimport AccountList from './components/AccountList';\r\nimport MessageList from './components/MessageList';\r\nimport EmpireList from './components/EmpireList';\r\nimport TreatyList from './components/TreatyList';\r\nimport SearchSortBar from './components/SearchSortBar';\r\nimport { ErrorMessage, LoadingMessage } from './components/Messages';\r\nimport Dropdown from './components/Dropdown';\r\n\r\nfunction App() {\r\n    const [empires, setEmpires] = useState([]);\r\n    const [selected, setSelected] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisSelectedBoard');\r\n        return saved ? saved : null;\r\n    });\r\n    const [messages, setMessages] = useState({});\r\n    const [text, setText] = useState('');\r\n    const pollingRef = useRef();\r\n    const messagesEndRef = useRef(null);\r\n    const [accounts, setAccounts] = useState({});\r\n    const [accountsLoaded, setAccountsLoaded] = useState(false);\r\n    const [account, setAccount] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisAccount');\r\n        return saved ? JSON.parse(saved) : null;\r\n    });\r\n    const [loginUser, setLoginUser] = useState('');\r\n    const [loginPass, setLoginPass] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [activeTab, setActiveTab] = useState('channels');\r\n    const [empirePage, setEmpirePage] = useState(null);\r\n    const [editEmpire, setEditEmpire] = useState(null);\r\n    const [empireInfo, setEmpireInfo] = useState({});\r\n\r\n    // Account creation and management\r\n    const [newAccountName, setNewAccountName] = useState('');\r\n    const [newAccountPass, setNewAccountPass] = useState('');\r\n    const [accountError, setAccountError] = useState('');\r\n    const [accountSuccess, setAccountSuccess] = useState('');\r\n    const [accountsTabLoading, setAccountsTabLoading] = useState(false);\r\n    const [editAccount, setEditAccount] = useState(null);\r\n    const [editAccountName, setEditAccountName] = useState('');\r\n    const [editAccountPass, setEditAccountPass] = useState('');\r\n    const [editAccountError, setEditAccountError] = useState('');\r\n    const [editAccountLoading, setEditAccountLoading] = useState(false);\r\n\r\n    // Manage Empires tab\r\n    const [newEmpireName, setNewEmpireName] = useState('');\r\n    const [newEmpireError, setNewEmpireError] = useState('');\r\n    const [newEmpireLoading, setNewEmpireLoading] = useState(false);\r\n\r\n    // --- Treaties State (NEW IMPLEMENTATION) ---\r\n    const [treaties, setTreaties] = useState([]);\r\n    const [treatiesLoaded, setTreatiesLoaded] = useState(false);\r\n    const [treatyDialog, setTreatyDialog] = useState({ open: false, mode: null, data: null });\r\n    const [treatyError, setTreatyError] = useState('');\r\n    const [treatySaving, setTreatySaving] = useState(false);\r\n\r\n    // --- Add search states ---\r\n    const [treatySearch, setTreatySearch] = useState(() => localStorage.getItem('treatySearch') || '');\r\n    const [empireSearch, setEmpireSearch] = useState(() => localStorage.getItem('empireSearch') || '');\r\n    // --- Add sort states ---\r\n    const [treatySort, setTreatySort] = useState('title');\r\n    const [empireSort, setEmpireSort] = useState('name');\r\n    // --- End states ---\r\n\r\n    // --- Fetch treaties ---\r\n    function fetchTreaties() {\r\n        fetch('/treaties.json?ts=' + Date.now())\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreaties(Array.isArray(data) ? data : []);\r\n                setTreatiesLoaded(true);\r\n            })\r\n            .catch(() => setTreatiesLoaded(true));\r\n    }\r\n    useEffect(() => { fetchTreaties(); }, []);\r\n\r\n    // --- Treaty CRUD ---\r\n    function openTreatyDialog(mode, data = null) {\r\n        setTreatyDialog({ open: true, mode, data });\r\n        setTreatyError('');\r\n    }\r\n    function closeTreatyDialog() {\r\n        setTreatyDialog({ open: false, mode: null, data: null });\r\n        setTreatyError('');\r\n    }\r\n    function handleTreatySave(form) {\r\n        setTreatySaving(true);\r\n        setTreatyError('');\r\n        const payload = { ...form };\r\n        if (!payload.title || !payload.content || !payload.participants?.length) {\r\n            setTreatyError('Title, content, and at least one participant are required.');\r\n            setTreatySaving(false);\r\n            return;\r\n        }\r\n        if (!payload.owner) payload.owner = account?.username || '';\r\n        if (!payload.status) payload.status = 'discussion';\r\n        if (!payload.id) payload.id = Date.now().toString();\r\n\r\n        fetch('/api/treaties', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                // --- FIX: update treaties state locally, just like accounts ---\r\n                setTreaties(prev => {\r\n                    // If editing, replace; if new, add\r\n                    const idx = prev.findIndex(t => t.id === payload.id);\r\n                    if (idx !== -1) {\r\n                        const updated = [...prev];\r\n                        updated[idx] = { ...prev[idx], ...payload };\r\n                        return updated;\r\n                    } else {\r\n                        return [...prev, payload];\r\n                    }\r\n                });\r\n                closeTreatyDialog();\r\n            } else {\r\n                setTreatyError(data.error || 'Failed to save treaty');\r\n            }\r\n        })\r\n        .catch(() => setTreatyError('Failed to save treaty'))\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n    function handleTreatyTransferOwner(id, newOwner) {\r\n        setTreatySaving(true);\r\n        fetch('/api/treaties/transfer', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id, newOwner })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) fetchTreaties();\r\n        })\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // --- Treaty Permissions ---\r\n    function canEditTreaty(treaty) {\r\n        if (!account) return false;\r\n        return account.username === treaty.owner || account.username === \"GameMaster\";\r\n    }\r\n    function canTransferTreaty(treaty) {\r\n        return account && account.username === \"GameMaster\";\r\n    }\r\n\r\n    const {\r\n        showMenu,\r\n        showPermissions,\r\n        gmPermissions,\r\n        showRoadmap,\r\n        handleMenuToggle,\r\n        handleMenuClose,\r\n        handlePermissionsToggle,\r\n        handlePermissionChange,\r\n        handleRoadmapToggle,\r\n        menuDropdownRef,\r\n        permissionsDropdownRef\r\n    } = useBurgerMenu(account);\r\n\r\n    // Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\r\n    // This prevents any reloads while editing or viewing an empire.\r\n    useEffect(() => {\r\n        if (\r\n            activeTab === 'empires' &&\r\n            !editEmpire &&\r\n            !empirePage\r\n        ) {\r\n            // Add cache-busting query param\r\n            fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                })\r\n                .catch(() => {});\r\n        }\r\n    // Only run when switching tabs, or leaving view/edit mode\r\n    }, [activeTab, editEmpire, empirePage]);\r\n\r\n    // Helper: get empire names\r\n    function getEmpireNames() {\r\n        // Only include empires that exist (already the case)\r\n        return empires.map(e => e.name);\r\n    }\r\n\r\n    // Helper: get boards from linked empires\r\n    function getLinkedBoards() {\r\n        const names = getEmpireNames();\r\n        return getNationPairs(names);\r\n    }\r\n\r\n    // Helper: get account linked to empire\r\n    function getEmpireAccount(empireName) {\r\n        const emp = empires.find(e => e.name === empireName);\r\n        return emp && emp.account ? emp.account : null;\r\n    }\r\n\r\n    // Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\r\n    const filteredBoards = account\r\n        ? account.username === \"GameMaster\"\r\n            ? getLinkedBoards()\r\n            : getLinkedBoards().filter(([a, b]) =>\r\n                getEmpireAccount(a) === account.username || getEmpireAccount(b) === account.username\r\n            )\r\n        : [];\r\n\r\n    // GameMaster: link/unlink accounts to empires\r\n    function handleLinkAccount(empireName, accountName) {\r\n        fetch('/api/empires/link', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName, accountName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: accountName } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    function handleUnlinkAccount(empireName) {\r\n        fetch('/api/empires/unlink', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: null } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    if (!account) {\r\n        return (\r\n            <div className=\"app-container\">\r\n                <header className=\"header\">\r\n                    <h1>Stellaris RP Chronicler</h1>\r\n                </header>\r\n                <main className=\"main-content\">\r\n                    <section className=\"account-section card\">\r\n                        <h2 className=\"login-title\">Login</h2>\r\n                        <form onSubmit={handleLogin} className=\"account-form login-form\">\r\n                            <div className=\"login-fields\">\r\n                                <input\r\n                                    placeholder=\"Empire name\"\r\n                                    value={loginUser}\r\n                                    onChange={e => setLoginUser(e.target.value)}\r\n                                    required\r\n                                    disabled={!accountsLoaded}\r\n                                    className=\"login-input\"\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={loginPass}\r\n                                    onChange={e => setLoginPass(e.target.value)}\r\n                                    required\r\n                                    disabled={!accountsLoaded}\r\n                                    className=\"login-input\"\r\n                                />\r\n                            </div>\r\n                            <button type=\"submit\" disabled={!accountsLoaded} className=\"login-btn\">Login</button>\r\n                        </form>\r\n                        {!accountsLoaded && <LoadingMessage>Loading accounts...</LoadingMessage>}\r\n                        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                    </section>\r\n                </main>\r\n                <footer className=\"footer\">\r\n                    <span>Stellaris RP Chronicler &copy; {new Date().getFullYear()}</span>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n    // Save selected board to localStorage\r\n    function handleBoardSelect(pair) {\r\n        const key = pair.join('|');\r\n        setSelected(key);\r\n        localStorage.setItem('stellarisSelectedBoard', key);\r\n    }\r\n\r\n    // Fetch messages for the selected board from the server\r\n    useEffect(() => {\r\n        // Only poll messages if on channels tab and not editing/viewing empire\r\n        if (\r\n            !selected ||\r\n            activeTab !== 'channels' ||\r\n            editEmpire ||\r\n            empirePage\r\n        ) {\r\n            // Stop polling if not in correct state\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Use selected as key\r\n        const key = selected;\r\n\r\n        // Function to fetch messages\r\n        const fetchMessages = () => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => {\r\n                    if (!res.ok) throw new Error('Network response was not ok');\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                })\r\n                .catch((err) => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: []\r\n                    }));\r\n                    console.error('Failed to fetch messages:', err);\r\n                });\r\n        };\r\n\r\n        // Initial fetch\r\n        fetchMessages();\r\n\r\n        // Set up polling\r\n        pollingRef.current = setInterval(fetchMessages, 2000);\r\n\r\n        // Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\r\n        return () => {\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n        };\r\n    }, [selected, activeTab, editEmpire, empirePage]);\r\n\r\n    // Scroll to bottom only when messages actually change for the selected board\r\n    const prevMessagesLengthRef = useRef(0);\r\n    useEffect(() => {\r\n        if (!selected) return;\r\n        const currentMessages = messages[selected] || [];\r\n        if (currentMessages.length !== prevMessagesLengthRef.current) {\r\n            if (messagesEndRef.current) {\r\n                messagesEndRef.current.scrollIntoView({ behavior: 'auto' });\r\n            }\r\n            prevMessagesLengthRef.current = currentMessages.length;\r\n        }\r\n    }, [messages, selected]);\r\n\r\n    // When posting, always use the logged-in account's empire name\r\n    function postMessage(e) {\r\n        e.preventDefault();\r\n        if (!selected || !account || !text.trim()) return;\r\n        const key = selected;\r\n        const msg = {\r\n            board: key,\r\n            author: account.username,\r\n            text,\r\n            timestamp: Date.now()\r\n        };\r\n        fetch('/api/messages', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(msg)\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                });\r\n        });\r\n        setText('');\r\n    }\r\n\r\n    // Fetch accounts from server (accounts.json)\r\n    useEffect(() => {\r\n        fetch('/accounts.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setAccounts(data);\r\n                setAccountsLoaded(true);\r\n            })\r\n            .catch(() => setAccountsLoaded(true));\r\n    }, []);\r\n\r\n    // Load empires from empires.json\r\n    useEffect(() => {\r\n        fetch('/empires.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setEmpires(Array.isArray(data) ? data : []);\r\n            });\r\n    }, []);\r\n\r\n    // Fetch treaties from backend\r\n    useEffect(() => {\r\n        fetch('/treaties.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreaties(Array.isArray(data) ? data : []);\r\n                setTreatiesLoaded(true);\r\n            })\r\n            .catch(() => setTreatiesLoaded(true));\r\n    }, []);\r\n\r\n    function handleLogin(e) {\r\n        e.preventDefault();\r\n        // Wait until accounts are loaded\r\n        if (!accountsLoaded) {\r\n            setError('Accounts are still loading, please wait...');\r\n            return;\r\n        }\r\n        const username = loginUser.trim();\r\n        const password = loginPass.trim();\r\n        if (!accounts[username]) {\r\n            setError('Invalid credentials');\r\n            return;\r\n        }\r\n        if (accounts[username] !== password) {\r\n            setError('Invalid credentials');\r\n            return;\r\n        }\r\n        setAccount({ username });\r\n        localStorage.setItem('stellarisAccount', JSON.stringify({ username }));\r\n        setError('');\r\n    }\r\n\r\n    function handleLogout() {\r\n        setAccount(null);\r\n        localStorage.removeItem('stellarisAccount');\r\n        // Reset UI state to avoid rendering issues after logout\r\n        setActiveTab('channels');\r\n        setEmpirePage(null);\r\n        setEditEmpire(null);\r\n        setEditAccount(null);\r\n        setTreatyDialog({ open: false, mode: null, data: null });\r\n    }\r\n\r\n    // Save empire info to backend and update local state\r\n    function saveEmpireInfo(name, info) {\r\n        return fetch('/api/empireInfo', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, info })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            // After saving, reload from backend with cache-busting param\r\n            return fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                });\r\n        });\r\n    }\r\n\r\n    // Edit panel for empire info\r\n    function EmpireEditPanel({ name, onCancel }) {\r\n        // Only initialize edit state from empireInfo[name] when the component mounts\r\n        const info = empireInfo[name] || {};\r\n        const [edit, setEdit] = useState(info);\r\n\r\n        // Do NOT use useEffect to update edit state from empireInfo.\r\n        // This ensures the text fields are not reset while editing.\r\n\r\n        function handleChange(e) {\r\n            setEdit({ ...edit, [e.target.name]: e.target.value });\r\n        }\r\n        function handleSave(e) {\r\n            e.preventDefault();\r\n            saveEmpireInfo(name, edit).then(() => {\r\n                onCancel();\r\n            });\r\n        }\r\n\r\n        return (\r\n            <form className=\"empire-edit-form\" onSubmit={handleSave}>\r\n                <label>\r\n                    Lore:\r\n                    <textarea\r\n                        name=\"lore\"\r\n                        value={edit.lore || ''}\r\n                        onChange={handleChange}\r\n                        rows={3}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Stats:\r\n                    <input name=\"stats\" value={edit.stats || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Ethics:\r\n                    <input name=\"ethics\" value={edit.ethics || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Civics:\r\n                    <input name=\"civics\" value={edit.civics || ''} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Special Info:\r\n                    <input name=\"special\" value={edit.special || ''} onChange={handleChange} />\r\n                </label>\r\n                <div style={{display: 'flex', gap: '1rem', marginTop: '1rem'}}>\r\n                    <button type=\"submit\" className=\"empire-save-btn\">Save</button>\r\n                    <button type=\"button\" className=\"empire-back-btn\" onClick={onCancel}>Cancel</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    // Treaties: permissions\r\n    function canEditTreaty(treaty) {\r\n        if (!account) return false;\r\n        return account.username === treaty.owner || account.username === \"GameMaster\";\r\n    }\r\n    function canTransferTreaty(treaty) {\r\n        return account && account.username === \"GameMaster\";\r\n    }\r\n\r\n    // Treaties: open new form\r\n    function handleAddTreaty() {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'new',\r\n            data: null\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: open edit\r\n    function handleEditTreaty(treaty) {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'edit',\r\n            data: treaty\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: open view\r\n    function handleViewTreaty(treaty) {\r\n        setTreatyDialog({\r\n            open: true,\r\n            mode: 'view',\r\n            data: treaty\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: cancel form\r\n    function handleCancelTreatyForm() {\r\n        setTreatyDialog({\r\n            open: false,\r\n            mode: null,\r\n            data: null\r\n        });\r\n        setTreatyError('');\r\n    }\r\n\r\n    // Treaties: save (create or update)\r\n    function handleSaveTreaty(e) {\r\n        e.preventDefault();\r\n        setTreatyError('');\r\n        setTreatySaving(true);\r\n        const isEdit = treatyEditId != null;\r\n        const form = { ...treatyForm };\r\n        if (!form.title.trim() || !form.content.trim() || !form.participants.length) {\r\n            setTreatyError('Title, content, and at least one participant are required.');\r\n            setTreatySaving(false);\r\n            return;\r\n        }\r\n        if (!form.owner) form.owner = account ? account.username : '';\r\n        if (!form.status) form.status = 'discussion';\r\n        if (!form.id) form.id = isEdit ? treatyEditId : Date.now().toString();\r\n\r\n        fetch('/api/treaties', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(form)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                // Always fetch the latest treaties from /treaties.json after save\r\n                return fetch('/treaties.json?ts=' + Date.now())\r\n                    .then(res => res.json())\r\n                    .then(data2 => {\r\n                        setTreaties(Array.isArray(data2) ? data2 : []);\r\n                        setTreatyForm(null);\r\n                        setTreatyEditId(null);\r\n                        setShowTreatyForm(false);\r\n                        setTreatyViewId(form.id);\r\n                    });\r\n            } else {\r\n                setTreatyError(data.error || 'Failed to save treaty');\r\n            }\r\n        })\r\n        .catch(() => setTreatyError('Failed to save treaty'))\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // Treaties: transfer ownership (GM only)\r\n    function handleTransferTreatyOwner(treaty, newOwner) {\r\n        if (!canTransferTreaty(treaty)) return;\r\n        setTreatySaving(true);\r\n        fetch('/api/treaties/transfer', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id: treaty.id, newOwner })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                return fetch('/treaties.json')\r\n                    .then(res => res.json())\r\n                    .then(data2 => setTreaties(Array.isArray(data2) ? data2 : []));\r\n            }\r\n        })\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // Treaties: form field change\r\n    function handleTreatyFormChange(e) {\r\n        const { name, value, type, options } = e.target;\r\n        if (type === 'select-multiple') {\r\n            const vals = Array.from(options).filter(o => o.selected).map(o => o.value);\r\n            setTreatyForm(f => ({ ...f, [name]: vals }));\r\n        } else {\r\n            setTreatyForm(f => ({ ...f, [name]: value }));\r\n        }\r\n    }\r\n\r\n    // Treaties: render\r\n    function renderTreatyForm() {\r\n        if (!treatyForm) return null;\r\n        return (\r\n            <form className=\"treaty-form card\" onSubmit={handleSaveTreaty}>\r\n                <div className=\"treaty-form-header\">\r\n                    <input\r\n                        name=\"title\"\r\n                        placeholder=\"Treaty Title\"\r\n                        value={treatyForm.title}\r\n                        onChange={handleTreatyFormChange}\r\n                        className=\"login-input\"\r\n                        required\r\n                        disabled={treatySaving}\r\n                    />\r\n                    <Dropdown\r\n                        value={treatyForm.status}\r\n                        onChange={handleTreatyFormChange}\r\n                        options={TREATY_STATUS_OPTIONS}\r\n                        placeholder=\"Select status...\"\r\n                        className=\"login-input\"\r\n                        disabled={treatySaving}\r\n                    />\r\n                </div>\r\n                <div className=\"treaty-form-participants\">\r\n                    <div className=\"participants-select\">\r\n                        <label className=\"participants-label\">Participants</label>\r\n                        <select\r\n                            name=\"participants\"\r\n                            value={treatyForm.participants}\r\n                            onChange={handleTreatyFormChange}\r\n                            className=\"login-input\"\r\n                            multiple\r\n                            disabled={treatySaving}\r\n                        >\r\n                            {getEmpireNames().map(e => (\r\n                                <option key={e} value={e}>{e}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    {account && account.username === \"GameMaster\" && (\r\n                        <div className=\"owner-select\">\r\n                            <label className=\"owner-label\">Owner:</label>\r\n                            <Dropdown\r\n                                value={treatyForm.owner}\r\n                                onChange={handleTreatyFormChange}\r\n                                options={Object.keys(accounts).map(acc => ({ value: acc, label: acc }))}\r\n                                placeholder=\"Select owner...\"\r\n                                className=\"login-input\"\r\n                                disabled={treatySaving}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <label className=\"treaty-content-label\">Treaty Content</label>\r\n                <textarea\r\n                    name=\"content\"\r\n                    placeholder=\"Treaty Content\"\r\n                    value={treatyForm.content}\r\n                    onChange={handleTreatyFormChange}\r\n                    className=\"login-input\"\r\n                    rows={9}\r\n                    required\r\n                    disabled={treatySaving}\r\n                />\r\n                <div className=\"treaty-form-actions\">\r\n                    <button type=\"submit\" className=\"empire-save-btn\" disabled={treatySaving}>\r\n                        {treatyEditId ? \"Save Changes\" : \"Create Treaty\"}\r\n                    </button>\r\n                    <button type=\"button\" className=\"empire-back-btn\" onClick={handleCancelTreatyForm} disabled={treatySaving}>Cancel</button>\r\n                    {treatyError && <ErrorMessage className=\"treaty-error\">{treatyError}</ErrorMessage>}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    function renderTreatyView(treaty) {\r\n        const statusObj = TREATY_STATUSES.find(s => s.value === treaty.status);\r\n        return (\r\n            <div className=\"treaty-view card\">\r\n                <div className=\"treaty-view-header\">\r\n                    <h2 className=\"treaty-title\">{treaty.title}</h2>\r\n                    <span className=\"treaty-status\" style={{color: statusObj.color}}>{statusObj ? statusObj.label : treaty.status}</span>\r\n                </div>\r\n                <div className=\"treaty-view-owner\">\r\n                    Owner: {treaty.owner}\r\n                </div>\r\n                <div className=\"treaty-view-participants\">\r\n                    <b>Participants:</b> {treaty.participants && treaty.participants.length > 0 ? treaty.participants.join(', ') : <i>None</i>}\r\n                </div>\r\n                <div className=\"treaty-content-static\">\r\n                    {treaty.content}\r\n                </div>\r\n                <div className=\"treaty-view-actions\">\r\n                    <button className=\"empire-back-btn\" onClick={() => setTreatyViewId(null)}>Back</button>\r\n                    {canEditTreaty(treaty) && (\r\n                        <button className=\"empire-save-btn\" onClick={() => handleEditTreaty(treaty)}>Edit</button>\r\n                    )}\r\n                    {canTransferTreaty(treaty) && (\r\n                        <select\r\n                            value={treaty.owner}\r\n                            onChange={e => handleTransferTreatyOwner(treaty, e.target.value)}\r\n                            className=\"owner-transfer-select\"\r\n                        >\r\n                            {Object.keys(accounts).map(acc => (\r\n                                <option key={acc} value={acc}>{acc}</option>\r\n                            ))}\r\n                        </select>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Only show accounts tab for GameMaster\r\n    const showAccountsTab = account && account.username === \"GameMaster\";\r\n    const tabs = [\r\n        { key: 'channels', label: 'Channels' },\r\n        { key: 'empires', label: 'Empires' },\r\n        { key: 'treaties', label: 'Treaties' }\r\n    ];\r\n    if (showAccountsTab) {\r\n        tabs.push({ key: 'accounts', label: 'Manage Accounts' });\r\n        tabs.push({ key: 'manage-empires', label: 'Manage Empires' });\r\n    }\r\n\r\n    // Ref for account edit panel\r\n    const accountEditPanelRef = useRef(null);\r\n\r\n    // Scroll to edit panel when editAccount changes\r\n    useEffect(() => {\r\n        if (editAccount && accountEditPanelRef.current) {\r\n            accountEditPanelRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, [editAccount]);\r\n\r\n    // --- MODIFIED: Only allow delete if GM and permission enabled ---\r\n    function handleDeleteMessage(boardKey, msgIdx) {\r\n        if (!account || account.username !== \"GameMaster\" || !gmPermissions.canDeleteMessages) return;\r\n        if (!window.confirm(\"Delete this message?\")) return;\r\n        fetch('/api/messages/delete', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ board: boardKey, index: Number(msgIdx) })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(boardKey)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [boardKey]: data\r\n                    }));\r\n                });\r\n        });\r\n    }\r\n\r\n    // --- Treaties: filtered and sorted by search ---\r\n    const filteredTreaties = treatySearch.trim()\r\n        ? treaties.filter(t =>\r\n            (t.title && t.title.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.content && t.content.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.owner && t.owner.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (Array.isArray(t.participants) && t.participants.some(p => p.toLowerCase().includes(treatySearch.toLowerCase())))\r\n        )\r\n        : treaties;\r\n    const sortedTreaties = [...filteredTreaties].sort((a, b) => {\r\n        if (treatySort === 'title') return a.title.localeCompare(b.title);\r\n        if (treatySort === 'owner') return a.owner.localeCompare(b.owner);\r\n        return 0;\r\n    });\r\n\r\n    // --- Empires: filtered and sorted by search ---\r\n    const filteredEmpires = empireSearch.trim()\r\n        ? getEmpireNames().filter(e => e.toLowerCase().includes(empireSearch.toLowerCase()))\r\n        : getEmpireNames();\r\n    const sortedEmpires = [...filteredEmpires].sort((a, b) => {\r\n        if (empireSort === 'name') return a.localeCompare(b);\r\n        return 0;\r\n    });\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <header className=\"header\">\r\n                <h1>Stellaris RP Chronicler</h1>\r\n                <div className=\"tabs-bar\">\r\n                    {tabs.map(tab => (\r\n                        <button\r\n                            key={tab.key}\r\n                            className={`tab-btn${activeTab === tab.key ? ' active' : ''}`}\r\n                            onClick={() => {\r\n                                setActiveTab(tab.key);\r\n                                setEmpirePage(null);\r\n                                setEditEmpire(null);\r\n                                setEditAccount(null);\r\n                                // Removed setTreatyViewId and setShowTreatyForm calls\r\n                            }}\r\n                        >\r\n                            {tab.label}\r\n                        </button>\r\n                    ))}\r\n                    <MenuDropdown\r\n                        showMenu={showMenu}\r\n                        showPermissions={showPermissions}\r\n                        showRoadmap={showRoadmap}\r\n                        handleMenuToggle={handleMenuToggle}\r\n                        handleLogout={handleLogout}\r\n                        account={account}\r\n                        handlePermissionsToggle={handlePermissionsToggle}\r\n                        gmPermissions={gmPermissions}\r\n                        handlePermissionChange={handlePermissionChange}\r\n                        handleRoadmapToggle={handleRoadmapToggle}\r\n                        menuDropdownRef={menuDropdownRef}\r\n                        permissionsDropdownRef={permissionsDropdownRef}\r\n                    />\r\n                </div>\r\n            </header>\r\n            <main className=\"main-content\">\r\n                {showRoadmap ? (\r\n                    <RoadmapTab onClose={handleRoadmapToggle} />\r\n                ) : activeTab === 'treaties' ? (\r\n                    <section className=\"treaties-section card\">\r\n                        <div className=\"treaties-header\">\r\n                            <h2>Treaties, Contracts & Agreements</h2>\r\n                            {account && (\r\n                                <button\r\n                                    className=\"empire-save-btn\"\r\n                                    onClick={() => openTreatyDialog('new')}\r\n                                >\r\n                                    + Add New Treaty\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                        {/* --- Treaty Search Input & Sort --- */}\r\n                        <SearchSortBar\r\n                            searchValue={treatySearch}\r\n                            onSearchChange={setTreatySearch}\r\n                            onClearSearch={() => setTreatySearch('')}\r\n                            sortValue={treatySort}\r\n                            onSortChange={setTreatySort}\r\n                            sortOptions={[\r\n                                { value: 'title', label: 'Sort by Title' },\r\n                                { value: 'owner', label: 'Sort by Owner' }\r\n                            ]}\r\n                            placeholder=\"Search treaties by title, content, owner, or participant...\"\r\n                            searchClass=\"treaty-search-input\"\r\n                            sortClass=\"treaty-sort-select\"\r\n                        />\r\n                        {/* Dialogs */}\r\n                        {treatyDialog.open && treatyDialog.mode !== 'view' && (\r\n                            <TreatyDialog\r\n                                open={treatyDialog.open}\r\n                                mode={treatyDialog.mode}\r\n                                data={treatyDialog.data}\r\n                                onSave={handleTreatySave}\r\n                                onClose={closeTreatyDialog}\r\n                                error={treatyError}\r\n                                saving={treatySaving}\r\n                                empires={empires.map(e => e.name)}\r\n                                accounts={accounts}\r\n                                account={account}\r\n                            />\r\n                        )}\r\n                        {treatyDialog.open && treatyDialog.mode === 'view' && (\r\n                            <TreatyView\r\n                                treaty={treatyDialog.data}\r\n                                onBack={closeTreatyDialog}\r\n                                onEdit={() => openTreatyDialog('edit', treatyDialog.data)}\r\n                                onTransfer={newOwner => handleTreatyTransferOwner(treatyDialog.data.id, newOwner)}\r\n                                canEdit={canEditTreaty(treatyDialog.data)}\r\n                                canTransfer={canTransferTreaty(treatyDialog.data)}\r\n                                accounts={accounts}\r\n                            />\r\n                        )}\r\n                        {/* List */}\r\n                        <TreatyList\r\n                            treaties={sortedTreaties}\r\n                            loaded={treatiesLoaded}\r\n                            onView={treaty => setTreatyDialog({ open: true, mode: 'view', data: treaty })}\r\n                            canEditTreaty={canEditTreaty}\r\n                            onEdit={openTreatyDialog}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'manage-empires' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Empires</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateEmpire(\r\n                                e,\r\n                                newEmpireName,\r\n                                empires,\r\n                                setNewEmpireError,\r\n                                setNewEmpireLoading,\r\n                                setEmpires,\r\n                                setNewEmpireName\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"New empire name\"\r\n                                    value={newEmpireName}\r\n                                    onChange={e => setNewEmpireName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={newEmpireLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={newEmpireLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create Empire</button>\r\n                            </div>\r\n                        </form>\r\n                        {newEmpireError && <ErrorMessage>{newEmpireError}</ErrorMessage>}\r\n                        <h3>Empires & Account Assignment</h3>\r\n                        <EmpireList\r\n                            empires={empires}\r\n                            accounts={accounts}\r\n                            onLink={handleLinkAccount}\r\n                            onUnlink={handleUnlinkAccount}\r\n                            onDelete={(name) => handleDeleteEmpire(\r\n                                name,\r\n                                setNewEmpireLoading,\r\n                                setNewEmpireError,\r\n                                setEmpires\r\n                            )}\r\n                            loading={newEmpireLoading}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'accounts' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Accounts</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateAccount(\r\n                                e,\r\n                                newAccountName,\r\n                                newAccountPass,\r\n                                accounts,\r\n                                setAccountError,\r\n                                setAccountSuccess,\r\n                                setAccountsTabLoading,\r\n                                setAccounts,\r\n                                setNewAccountName,\r\n                                setNewAccountPass\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"Account name\"\r\n                                    value={newAccountName}\r\n                                    onChange={e => setNewAccountName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={newAccountPass}\r\n                                    onChange={e => setNewAccountPass(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={accountsTabLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create</button>\r\n                            </div>\r\n                        </form>\r\n                        {accountError && <ErrorMessage>{accountError}</ErrorMessage>}\r\n                        {accountSuccess && <LoadingMessage style={{color:'limegreen'}}>{accountSuccess}</LoadingMessage>}\r\n\r\n                        {/* Restore account list with Edit/Delete buttons */}\r\n                        <h3>All Accounts</h3>\r\n                        <AccountList\r\n                            accounts={accounts}\r\n                            onEdit={acc => {\r\n                                setEditAccount(acc);\r\n                                setEditAccountName(acc);\r\n                                setEditAccountPass('');\r\n                                setEditAccountError('');\r\n                            }}\r\n                            onDelete={acc => handleDeleteAccount(\r\n                                acc,\r\n                                setEditAccountLoading,\r\n                                setEditAccountError,\r\n                                setAccounts,\r\n                                setAccountSuccess\r\n                            )}\r\n                            editAccountLoading={editAccountLoading}\r\n                        />\r\n                        {editAccount && (\r\n                            <div\r\n                                className=\"account-edit-panel card\"\r\n                                ref={accountEditPanelRef}\r\n                            >\r\n                                <h3>Edit Account: <b>{editAccount}</b></h3>\r\n                                <form onSubmit={e => handleRenameAccount(\r\n                                    e,\r\n                                    editAccount,\r\n                                    editAccountName,\r\n                                    setEditAccountLoading,\r\n                                    setEditAccountError,\r\n                                    setAccounts,\r\n                                    setEditAccount,\r\n                                    setAccountSuccess\r\n                                )} className=\"edit-account-form\">\r\n                                    <label>\r\n                                        Rename to:\r\n                                        <input\r\n                                            value={editAccountName}\r\n                                            onChange={e => setEditAccountName(e.target.value)}\r\n                                            className=\"login-input\"\r\n                                            disabled={editAccountLoading}\r\n                                        />\r\n                                    </label>\r\n                                    <button type=\"submit\" className=\"empire-save-btn\" disabled={editAccountLoading}>Rename</button>\r\n                                </form>\r\n                                <form onSubmit={e => handleChangePassword(\r\n                                    e,\r\n                                    editAccount,\r\n                                    editAccountPass,\r\n                                    setEditAccountLoading,\r\n                                    setEditAccountError,\r\n                                    setAccounts,\r\n                                    setEditAccount,\r\n                                    setAccountSuccess\r\n                                )} className=\"change-password-form\">\r\n                                    <label>\r\n                                        New Password:\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            value={editAccountPass}\r\n                                            onChange={e => setEditAccountPass(e.target.value)}\r\n                                            className=\"login-input\"\r\n                                            disabled={editAccountLoading}\r\n                                        />\r\n                                    </label>\r\n                                    <button type=\"submit\" className=\"empire-save-btn\" disabled={editAccountLoading}>Change Password</button>\r\n                                </form>\r\n                                {editAccountError && <div className=\"login-error\">{editAccountError}</div>}\r\n                                <button className=\"empire-back-btn\" onClick={() => setEditAccount(null)} disabled={editAccountLoading}>Cancel</button>\r\n                            </div>\r\n                        )}\r\n                    </section>\r\n                ) : activeTab === 'empires' ? (\r\n                    editEmpire ? (\r\n                        <section className=\"empires-info-section card\">\r\n                            <h2>Edit {editEmpire}</h2>\r\n                            <EmpireEditPanel\r\n                                name={editEmpire}\r\n                                onCancel={() => setEditEmpire(null)}\r\n                                empireInfo={empireInfo}\r\n                                saveEmpireInfo={saveEmpireInfo}\r\n                            />\r\n                        </section>\r\n                    ) : empirePage ? (\r\n                        <EmpirePanel\r\n                            name={empirePage}\r\n                            canEdit={account && account.username === empirePage}\r\n                            empireInfo={empireInfo}\r\n                            getEmpireAccount={getEmpireAccount}\r\n                            setEmpirePage={setEmpirePage}\r\n                            setEditEmpire={setEditEmpire}\r\n                        />\r\n                    ) : (\r\n                        <section className=\"empires-info-section card\">\r\n                            {/* --- Empire Search Input & Sort --- */}\r\n                            <SearchSortBar\r\n                                searchValue={empireSearch}\r\n                                onSearchChange={setEmpireSearch}\r\n                                onClearSearch={() => setEmpireSearch('')}\r\n                                sortValue={empireSort}\r\n                                onSortChange={setEmpireSort}\r\n                                sortOptions={[\r\n                                    { value: 'name', label: 'Sort by Name' }\r\n                                ]}\r\n                                placeholder=\"Search empires by name...\"\r\n                                searchClass=\"empire-search-input\"\r\n                                sortClass=\"empire-sort-select\"\r\n                            />\r\n                            <div className=\"empires-info-list\" style={{display: 'flex', flexWrap: 'wrap', gap: '1.5rem', justifyContent: 'flex-start'}}>\r\n                                <EmpireList\r\n                                    empires={sortedEmpires.map(name => empires.find(e => e.name === name))}\r\n                                    accounts={accounts}\r\n                                    account={account}\r\n                                    setEmpirePage={setEmpirePage}\r\n                                    setEditEmpire={setEditEmpire}\r\n                                    getEmpireAccount={getEmpireAccount}\r\n                                />\r\n                            </div>\r\n                        </section>\r\n                    )\r\n                ) : (\r\n                    <>\r\n                        {!account ? (\r\n                            <section className=\"account-section card\">\r\n                                <h2 className=\"login-title\">Login</h2>\r\n                                <form onSubmit={handleLogin} className=\"account-form login-form\">\r\n                                    <div className=\"login-fields\">\r\n                                        <input\r\n                                            placeholder=\"Empire name\"\r\n                                            value={loginUser}\r\n                                            onChange={e => setLoginUser(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            value={loginPass}\r\n                                            onChange={e => setLoginPass(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                    </div>\r\n                                    <button type=\"submit\" disabled={!accountsLoaded} className=\"login-btn\">Login</button>\r\n                                </form>\r\n                                {!accountsLoaded && <LoadingMessage>Loading accounts...</LoadingMessage>}\r\n                                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                            </section>\r\n                        ) : (\r\n                            // Center the channels page\r\n                            <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                                <section className=\"boards-section\">\r\n                                    <div className=\"channels-main\">\r\n                                        <div className=\"channels-sidebar\">\r\n                                            <div className=\"boards-list card\">\r\n                                                <h2>\r\n                                                    {account && account.username === \"GameMaster\"\r\n                                                        ? \"All Boards\"\r\n                                                        : \"Your Diplomatic Channels\"}\r\n                                                </h2>\r\n                                                <div className=\"boards-list-header\">\r\n                                                    <span className=\"boards-list-count\">\r\n                                                        {filteredBoards.length} {filteredBoards.length === 1 ? \"channel\" : \"channels\"}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <ul className=\"boards-list-ul\">\r\n                                                    {filteredBoards.length === 0 && (\r\n                                                        <li className=\"no-channels\">No channels available.</li>\r\n                                                    )}\r\n                                                    {filteredBoards.map(([a, b]) => {\r\n                                                        const key = a + '|' + b;\r\n                                                        return (\r\n                                                            <li key={key} className={`boards-list-item${selected === key ? ' active' : ''}`}>\r\n                                                                <button\r\n                                                                    className=\"board-btn\"\r\n                                                                    onClick={() => handleBoardSelect([a, b])}\r\n                                                                >\r\n                                                                    <span className=\"board-nations\">{a}</span>\r\n                                                                    <span className=\"board-arrow\">↔</span>\r\n                                                                    <span className=\"board-nations\">{b}</span>\r\n                                                                </button>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"channels-content\">\r\n                                            <div className=\"board-messages card\">\r\n                                                {(selected && filteredBoards.length > 0) ? (\r\n                                                    <div className=\"board-messages-inner\">\r\n                                                        <div className=\"board-title-row\">\r\n                                                            <h2 className=\"board-title\">{selected.replace('|', ' ↔ ')}</h2>\r\n                                                        </div>\r\n                                                        <div className=\"messages-panel\">\r\n                                                            <div className=\"messages-list-container\">\r\n                                                                <MessageList\r\n                                                                    messages={messages[selected] || []}\r\n                                                                    selected={selected}\r\n                                                                    account={account}\r\n                                                                    gmPermissions={gmPermissions}\r\n                                                                    handleDeleteMessage={handleDeleteMessage}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <form onSubmit={postMessage} className=\"message-form message-form-bottom\">\r\n                                                                <input\r\n                                                                    placeholder=\"Your empire\"\r\n                                                                    value={account.username}\r\n                                                                    disabled\r\n                                                                    required\r\n                                                                    className=\"author-input\"\r\n                                                                />\r\n                                                                <input\r\n                                                                    placeholder=\"Message\"\r\n                                                                    value={text}\r\n                                                                    onChange={e => setText(e.target.value)}\r\n                                                                    required\r\n                                                                    className=\"text-input\"\r\n                                                                />\r\n                                                                <button type=\"submit\" className=\"send-btn\">Send</button>\r\n                                                            </form>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div className=\"no-messages\">Select a channel to view messages.</div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </main>\r\n            <footer className=\"footer\">\r\n                <span>Stellaris RP Chronicler &copy; {new Date().getFullYear()}</span>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}