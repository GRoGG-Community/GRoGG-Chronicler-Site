{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./css/App.css';import'./css/Treaties.css';import'./css/Empires.css';import'./css/Boards.css';import'./css/Accounts.css';import{getNationPairs}from'./utils/getNationPairs';import TreatyDialog from'./components/TreatyDialog';import TreatyView from'./components/TreatyView';import EmpireEditPanel from'./components/EmpireEditPanel';import EmpirePanel from'./components/EmpirePanel';import MenuDropdown from'./components/MenuDropdown';import{handleCreateAccount,handleCreateEmpire,handleRenameAccount,handleChangePassword,handleDeleteAccount,handleDeleteEmpire}from'./handlers/handlers';import{useBurgerMenu}from'./components/BurgerMenu';import RoadmapTab from'./components/RoadmapTab';import{TREATY_STATUSES}from'./utils/treatyStatuses';import{TREATY_STATUS_OPTIONS}from'./utils/treatyStatusOptions';import AccountList from'./components/AccountList';import EmpireList from'./components/EmpireList';import TreatyList from'./components/TreatyList';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[empires,setEmpires]=useState([]);const[selected,setSelected]=useState(()=>{const saved=localStorage.getItem('stellarisSelectedBoard');return saved?saved:null;});const[messages,setMessages]=useState({});const[text,setText]=useState('');const pollingRef=useRef();const messagesEndRef=useRef(null);const[accounts,setAccounts]=useState({});const[accountsLoaded,setAccountsLoaded]=useState(false);const[account,setAccount]=useState(()=>{const saved=localStorage.getItem('stellarisAccount');return saved?JSON.parse(saved):null;});const[loginUser,setLoginUser]=useState('');const[loginPass,setLoginPass]=useState('');const[error,setError]=useState('');const[activeTab,setActiveTab]=useState('channels');const[empirePage,setEmpirePage]=useState(null);const[editEmpire,setEditEmpire]=useState(null);const[empireInfo,setEmpireInfo]=useState({});// Account creation and management\nconst[newAccountName,setNewAccountName]=useState('');const[newAccountPass,setNewAccountPass]=useState('');const[accountError,setAccountError]=useState('');const[accountSuccess,setAccountSuccess]=useState('');const[accountsTabLoading,setAccountsTabLoading]=useState(false);const[editAccount,setEditAccount]=useState(null);const[editAccountName,setEditAccountName]=useState('');const[editAccountPass,setEditAccountPass]=useState('');const[editAccountError,setEditAccountError]=useState('');const[editAccountLoading,setEditAccountLoading]=useState(false);// Manage Empires tab\nconst[newEmpireName,setNewEmpireName]=useState('');const[newEmpireError,setNewEmpireError]=useState('');const[newEmpireLoading,setNewEmpireLoading]=useState(false);// --- Treaties State (NEW IMPLEMENTATION) ---\nconst[treaties,setTreaties]=useState([]);const[treatiesLoaded,setTreatiesLoaded]=useState(false);const[treatyDialog,setTreatyDialog]=useState({open:false,mode:null,data:null});const[treatyError,setTreatyError]=useState('');const[treatySaving,setTreatySaving]=useState(false);// --- Add search states ---\nconst[treatySearch,setTreatySearch]=useState(()=>localStorage.getItem('treatySearch')||'');const[empireSearch,setEmpireSearch]=useState(()=>localStorage.getItem('empireSearch')||'');// --- Add sort states ---\nconst[treatySort,setTreatySort]=useState('title');const[empireSort,setEmpireSort]=useState('name');// --- End states ---\n// --- Fetch treaties ---\nuseEffect(()=>{fetch('/treaties.json?ts='+Date.now()).then(res=>res.json()).then(data=>{setTreaties(Array.isArray(data)?data:[]);setTreatiesLoaded(true);}).catch(()=>setTreatiesLoaded(true));},[]);// --- Fetch accounts ---\nuseEffect(()=>{fetch('/accounts.json').then(res=>res.json()).then(data=>{setAccounts(data);setAccountsLoaded(true);}).catch(()=>setAccountsLoaded(true));},[]);// --- Fetch empires ---\nuseEffect(()=>{fetch('/empires.json').then(res=>res.json()).then(data=>{setEmpires(Array.isArray(data)?data:[]);});},[]);// --- Fetch empireInfo when needed ---\nuseEffect(()=>{if(activeTab==='empires'&&!editEmpire&&!empirePage){fetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>setEmpireInfo(data&&typeof data==='object'?data:{})).catch(()=>{});}},[activeTab,editEmpire,empirePage]);// --- Treaty CRUD ---\nfunction openTreatyDialog(mode){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;setTreatyDialog({open:true,mode,data});setTreatyError('');}function closeTreatyDialog(){setTreatyDialog({open:false,mode:null,data:null});setTreatyError('');}function handleTreatySave(form){var _payload$participants;setTreatySaving(true);setTreatyError('');const payload={...form};if(!payload.title||!payload.content||!((_payload$participants=payload.participants)!==null&&_payload$participants!==void 0&&_payload$participants.length)){setTreatyError('Title, content, and at least one participant are required.');setTreatySaving(false);return;}if(!payload.owner)payload.owner=(account===null||account===void 0?void 0:account.username)||'';if(!payload.status)payload.status='discussion';if(!payload.id)payload.id=Date.now().toString();fetch('/api/treaties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}).then(res=>res.json()).then(data=>{if(data.success){// --- FIX: update treaties state locally, just like accounts ---\nsetTreaties(prev=>{// If editing, replace; if new, add\nconst idx=prev.findIndex(t=>t.id===payload.id);if(idx!==-1){const updated=[...prev];updated[idx]={...prev[idx],...payload};return updated;}else{return[...prev,payload];}});closeTreatyDialog();}else{setTreatyError(data.error||'Failed to save treaty');}}).catch(()=>setTreatyError('Failed to save treaty')).finally(()=>setTreatySaving(false));}function handleTreatyTransferOwner(id,newOwner){setTreatySaving(true);fetch('/api/treaties/transfer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,newOwner})}).then(res=>res.json()).then(data=>{if(data.success)fetchTreaties();}).finally(()=>setTreatySaving(false));}// --- Treaty Permissions ---\nfunction canEditTreaty(treaty){if(!account)return false;return account.username===treaty.owner||account.username===\"GameMaster\";}function canTransferTreaty(treaty){return account&&account.username===\"GameMaster\";}const{showMenu,showPermissions,gmPermissions,showRoadmap,handleMenuToggle,handleMenuClose,handlePermissionsToggle,handlePermissionChange,handleRoadmapToggle,menuDropdownRef,permissionsDropdownRef}=useBurgerMenu(account);// Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\nconst filteredBoards=account?account.username===\"GameMaster\"?getLinkedBoards():getLinkedBoards().filter(_ref=>{let[a,b]=_ref;return getEmpireAccount(a)===account.username||getEmpireAccount(b)===account.username;}):[];// GameMaster: link/unlink accounts to empires\nfunction handleLinkAccount(empireName,accountName){fetch('/api/empires/link',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName,accountName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:accountName}:e));}});}function handleUnlinkAccount(empireName){fetch('/api/empires/unlink',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:null}:e));}});}// Save selected board to localStorage\nfunction handleBoardSelect(pair){const key=pair.join('|');setSelected(key);localStorage.setItem('stellarisSelectedBoard',key);}// Fetch messages for the selected board from the server\nuseEffect(()=>{// Only poll messages if on channels tab and not editing/viewing empire\nif(!selected||activeTab!=='channels'||editEmpire||empirePage){// Stop polling if not in correct state\nif(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}return;}// Use selected as key\nconst key=selected;// Function to fetch messages\nconst fetchMessages=()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>{if(!res.ok)throw new Error('Network response was not ok');return res.json();}).then(data=>{setMessages(prev=>({...prev,[key]:data}));}).catch(err=>{setMessages(prev=>({...prev,[key]:[]}));console.error('Failed to fetch messages:',err);});};// Initial fetch\nfetchMessages();// Set up polling\npollingRef.current=setInterval(fetchMessages,2000);// Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\nreturn()=>{if(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}};},[selected,activeTab,editEmpire,empirePage]);// Scroll to bottom only when messages actually change for the selected board\nconst prevMessagesLengthRef=useRef(0);useEffect(()=>{if(!selected)return;const currentMessages=messages[selected]||[];if(currentMessages.length!==prevMessagesLengthRef.current){if(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:'auto'});}prevMessagesLengthRef.current=currentMessages.length;}},[messages,selected]);// When posting, always use the logged-in account's empire name\nfunction postMessage(e){e.preventDefault();if(!selected||!account||!text.trim())return;const key=selected;const msg={board:key,author:account.username,text,timestamp:Date.now()};fetch('/api/messages',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg)}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[key]:data}));});});setText('');}// Save empire info to backend and update local state\nfunction saveEmpireInfo(name,info){return fetch('/api/empireInfo',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,info})}).then(res=>res.json()).then(()=>{// After saving, reload from backend with cache-busting param\nreturn fetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});});});}// Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\n// This prevents any reloads while editing or viewing an empire.\nuseEffect(()=>{if(activeTab==='empires'&&!editEmpire&&!empirePage){// Add cache-busting query param\nfetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});}).catch(()=>{});}// Only run when switching tabs, or leaving view/edit mode\n},[activeTab,editEmpire,empirePage]);// Helper: get empire names\nfunction getEmpireNames(){// Only include empires that exist (already the case)\nreturn empires.map(e=>e.name);}// Helper: get boards from linked empires\nfunction getLinkedBoards(){const names=getEmpireNames();return getNationPairs(names);}// Helper: get account linked to empire\nfunction getEmpireAccount(empireName){const emp=empires.find(e=>e.name===empireName);return emp&&emp.account?emp.account:null;}// GameMaster: link/unlink accounts to empires\nfunction handleLinkAccount(empireName,accountName){fetch('/api/empires/link',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName,accountName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:accountName}:e));}});}function handleUnlinkAccount(empireName){fetch('/api/empires/unlink',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({empireName})}).then(res=>res.json()).then(data=>{if(data.success){setEmpires(prev=>prev.map(e=>e.name===empireName?{...e,account:null}:e));}});}// Save selected board to localStorage\nfunction handleBoardSelect(pair){const key=pair.join('|');setSelected(key);localStorage.setItem('stellarisSelectedBoard',key);}// Fetch messages for the selected board from the server\nuseEffect(()=>{// Only poll messages if on channels tab and not editing/viewing empire\nif(!selected||activeTab!=='channels'||editEmpire||empirePage){// Stop polling if not in correct state\nif(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}return;}// Use selected as key\nconst key=selected;// Function to fetch messages\nconst fetchMessages=()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>{if(!res.ok)throw new Error('Network response was not ok');return res.json();}).then(data=>{setMessages(prev=>({...prev,[key]:data}));}).catch(err=>{setMessages(prev=>({...prev,[key]:[]}));console.error('Failed to fetch messages:',err);});};// Initial fetch\nfetchMessages();// Set up polling\npollingRef.current=setInterval(fetchMessages,2000);// Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\nreturn()=>{if(pollingRef.current){clearInterval(pollingRef.current);pollingRef.current=null;}};},[selected,activeTab,editEmpire,empirePage]);// When posting, always use the logged-in account's empire name\nfunction postMessage(e){e.preventDefault();if(!selected||!account||!text.trim())return;const key=selected;const msg={board:key,author:account.username,text,timestamp:Date.now()};fetch('/api/messages',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg)}).then(res=>res.json()).then(()=>{fetch(`/api/messages?board=${encodeURIComponent(key)}`).then(res=>res.json()).then(data=>{setMessages(prev=>({...prev,[key]:data}));});});setText('');}// Save empire info to backend and update local state\nfunction saveEmpireInfo(name,info){return fetch('/api/empireInfo',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,info})}).then(res=>res.json()).then(()=>{// After saving, reload from backend with cache-busting param\nreturn fetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});});});}// Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\n// This prevents any reloads while editing or viewing an empire.\nuseEffect(()=>{if(activeTab==='empires'&&!editEmpire&&!empirePage){// Add cache-busting query param\nfetch(`/empireInfo.json?ts=${Date.now()}`).then(res=>res.json()).then(data=>{setEmpireInfo(data&&typeof data==='object'?data:{});}).catch(()=>{});}// Only run when switching tabs, or leaving view/edit mode\n},[activeTab,editEmpire,empirePage]);// --- Treaties: filtered and sorted by search ---\nconst filteredTreaties=treatySearch.trim()?treaties.filter(t=>t.title&&t.title.toLowerCase().includes(treatySearch.toLowerCase())||t.content&&t.content.toLowerCase().includes(treatySearch.toLowerCase())||t.owner&&t.owner.toLowerCase().includes(treatySearch.toLowerCase())||Array.isArray(t.participants)&&t.participants.some(p=>p.toLowerCase().includes(treatySearch.toLowerCase()))):treaties;const sortedTreaties=[...filteredTreaties].sort((a,b)=>{if(treatySort==='title')return a.title.localeCompare(b.title);if(treatySort==='owner')return a.owner.localeCompare(b.owner);return 0;});// --- Empires: filtered and sorted by search ---\nconst filteredEmpires=empireSearch.trim()?getEmpireNames().filter(e=>e.toLowerCase().includes(empireSearch.toLowerCase())):getEmpireNames();const sortedEmpires=[...filteredEmpires].sort((a,b)=>{if(empireSort==='name')return a.localeCompare(b);return 0;});// Only show accounts tab for GameMaster\nconst showAccountsTab=account&&account.username===\"GameMaster\";const tabs=[{key:'channels',label:'Channels'},{key:'empires',label:'Empires'},{key:'treaties',label:'Treaties'}];if(showAccountsTab){tabs.push({key:'accounts',label:'Manage Accounts'});tabs.push({key:'manage-empires',label:'Manage Empires'});}return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Stellaris RP Chronicler\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"tabs-bar\",children:[tabs.map(tab=>/*#__PURE__*/_jsx(\"button\",{className:`tab-btn${activeTab===tab.key?' active':''}`,onClick:()=>{setActiveTab(tab.key);setEmpirePage(null);setEditEmpire(null);setEditAccount(null);// Removed setTreatyViewId and setShowTreatyForm calls\n},children:tab.label},tab.key)),/*#__PURE__*/_jsx(MenuDropdown,{showMenu:showMenu,showPermissions:showPermissions,showRoadmap:showRoadmap,handleMenuToggle:handleMenuToggle,handleLogout:handleLogout,account:account,handlePermissionsToggle:handlePermissionsToggle,gmPermissions:gmPermissions,handlePermissionChange:handlePermissionChange,handleRoadmapToggle:handleRoadmapToggle,menuDropdownRef:menuDropdownRef,permissionsDropdownRef:permissionsDropdownRef})]})]}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:showRoadmap?/*#__PURE__*/_jsx(RoadmapTab,{onClose:handleRoadmapToggle}):activeTab==='treaties'?/*#__PURE__*/_jsxs(\"section\",{className:\"treaties-section card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"treaties-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Treaties, Contracts & Agreements\"}),account&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-save-btn\",onClick:()=>openTreatyDialog('new'),children:\"+ Add New Treaty\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"treaty-search-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search treaties by title, content, owner, or participant...\",value:treatySearch,onChange:e=>setTreatySearch(e.target.value),className:\"treaty-search-input\"}),treatySearch&&/*#__PURE__*/_jsx(\"button\",{className:\"treaty-search-clear-btn\",onClick:()=>setTreatySearch(''),title:\"Clear search\",children:\"\\u2715\"}),/*#__PURE__*/_jsxs(\"select\",{value:treatySort,onChange:e=>setTreatySort(e.target.value),className:\"treaty-sort-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"title\",children:\"Sort by Title\"}),/*#__PURE__*/_jsx(\"option\",{value:\"owner\",children:\"Sort by Owner\"})]})]}),treatyDialog.open&&treatyDialog.mode!=='view'&&/*#__PURE__*/_jsx(TreatyDialog,{open:treatyDialog.open,mode:treatyDialog.mode,data:treatyDialog.data,onSave:handleTreatySave,onClose:closeTreatyDialog,error:treatyError,saving:treatySaving,empires:empires.map(e=>e.name),accounts:accounts,account:account}),treatyDialog.open&&treatyDialog.mode==='view'&&/*#__PURE__*/_jsx(TreatyView,{treaty:treatyDialog.data,onBack:closeTreatyDialog,onEdit:()=>openTreatyDialog('edit',treatyDialog.data),onTransfer:newOwner=>handleTreatyTransferOwner(treatyDialog.data.id,newOwner),canEdit:canEditTreaty(treatyDialog.data),canTransfer:canTransferTreaty(treatyDialog.data),accounts:accounts}),/*#__PURE__*/_jsx(TreatyList,{treaties:sortedTreaties,loaded:treatiesLoaded,onView:treaty=>setTreatyDialog({open:true,mode:'view',data:treaty}),canEditTreaty:canEditTreaty,onEdit:openTreatyDialog})]}):activeTab==='manage-empires'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Empires\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateEmpire(e,newEmpireName,empires,setNewEmpireError,setNewEmpireLoading,setEmpires,setNewEmpireName),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"New empire name\",value:newEmpireName,onChange:e=>setNewEmpireName(e.target.value),required:true,className:\"login-input\",disabled:newEmpireLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:newEmpireLoading,onClick:e=>e.stopPropagation(),children:\"Create Empire\"})]})}),newEmpireError&&/*#__PURE__*/_jsx(\"div\",{className:\"login-error\",children:newEmpireError}),/*#__PURE__*/_jsx(\"h3\",{children:\"Empires & Account Assignment\"}),/*#__PURE__*/_jsx(EmpireList,{empires:empires,accounts:accounts,onLink:handleLinkAccount,onUnlink:handleUnlinkAccount,onDelete:handleDeleteEmpire,loading:newEmpireLoading})]}):activeTab==='accounts'&&showAccountsTab?/*#__PURE__*/_jsxs(\"section\",{className:\"account-manage-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Manage Accounts\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:e=>handleCreateAccount(e,newAccountName,newAccountPass,accounts,setAccountError,setAccountSuccess,setAccountsTabLoading,setAccounts,setNewAccountName,setNewAccountPass),className:\"account-form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"account-form-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Account name\",value:newAccountName,onChange:e=>setNewAccountName(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:newAccountPass,onChange:e=>setNewAccountPass(e.target.value),required:true,className:\"login-input\",disabled:accountsTabLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"login-btn\",disabled:accountsTabLoading,onClick:e=>e.stopPropagation(),children:\"Create\"})]})}),accountError&&/*#__PURE__*/_jsx(\"div\",{className:\"login-error\",children:accountError}),accountSuccess&&/*#__PURE__*/_jsx(\"div\",{className:\"login-loading\",style:{color:'limegreen'},children:accountSuccess}),/*#__PURE__*/_jsx(\"h3\",{children:\"All Accounts\"}),/*#__PURE__*/_jsx(AccountList,{accounts:accounts,onEdit:acc=>{setEditAccount(acc);setEditAccountName(acc);setEditAccountPass('');setEditAccountError('');},onDelete:handleDeleteAccount,editAccount:editAccount,editAccountName:editAccountName,editAccountPass:editAccountPass,editAccountError:editAccountError,editAccountLoading:editAccountLoading,setEditAccountName:setEditAccountName,setEditAccountPass:setEditAccountPass,setEditAccount:setEditAccount,setAccountSuccess:setAccountSuccess,setAccounts:setAccounts,setEditAccountError:setEditAccountError,setEditAccountLoading:setEditAccountLoading,accountEditPanelRef:accountEditPanelRef,handleRenameAccount:handleRenameAccount,handleChangePassword:handleChangePassword})]}):activeTab==='empires'?editEmpire?/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Edit \",editEmpire]}),/*#__PURE__*/_jsx(EmpireEditPanel,{name:editEmpire,onCancel:()=>setEditEmpire(null),empireInfo:empireInfo,saveEmpireInfo:saveEmpireInfo})]}):empirePage?/*#__PURE__*/_jsx(EmpirePanel,{name:empirePage,canEdit:account&&account.username===empirePage,empireInfo:empireInfo,getEmpireAccount:getEmpireAccount,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire}):/*#__PURE__*/_jsxs(\"section\",{className:\"empires-info-section card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"empire-search-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"Empires Overview\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"empire-total-count\",children:[\"Total Empires: \",/*#__PURE__*/_jsx(\"b\",{children:sortedEmpires.length})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"empire-search-fields\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search empires by name...\",value:empireSearch,onChange:e=>setEmpireSearch(e.target.value),className:\"empire-search-input\"}),empireSearch&&/*#__PURE__*/_jsx(\"button\",{className:\"empire-search-clear-btn\",onClick:()=>setEmpireSearch(''),title:\"Clear search\",children:\"\\u2715\"}),/*#__PURE__*/_jsx(\"select\",{value:empireSort,onChange:e=>setEmpireSort(e.target.value),className:\"empire-sort-select\",children:/*#__PURE__*/_jsx(\"option\",{value:\"name\",children:\"Sort by Name\"})})]})]}),/*#__PURE__*/_jsx(EmpireList,{empires:sortedEmpires.map(name=>empires.find(e=>e.name===name)),accounts:accounts,onLink:handleLinkAccount,onUnlink:handleUnlinkAccount,onDelete:handleDeleteEmpire,loading:newEmpireLoading,account:account,setEmpirePage:setEmpirePage,setEditEmpire:setEditEmpire,getEmpireAccount:getEmpireAccount})]}):/*#__PURE__*/_jsx(_Fragment,{children:!account?/*#__PURE__*/_jsxs(\"section\",{className:\"account-section card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-title\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleLogin,className:\"account-form login-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"login-fields\",children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"Empire name\",value:loginUser,onChange:e=>setLoginUser(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:loginPass,onChange:e=>setLoginPass(e.target.value),required:true,disabled:!accountsLoaded,className:\"login-input\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!accountsLoaded,className:\"login-btn\",children:\"Login\"})]}),!accountsLoaded&&/*#__PURE__*/_jsx(\"div\",{className:\"login-loading\",children:\"Loading accounts...\"}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"login-error\",children:error})]}):/*#__PURE__*/// Center the channels page\n_jsx(\"div\",{style:{display:'flex',justifyContent:'center',width:'100%'},children:/*#__PURE__*/_jsx(\"section\",{className:\"boards-section\"})})})}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Stellaris RP Chronicler \\xA9 \",new Date().getFullYear()]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","getNationPairs","TreatyDialog","TreatyView","EmpireEditPanel","EmpirePanel","MenuDropdown","handleCreateAccount","handleCreateEmpire","handleRenameAccount","handleChangePassword","handleDeleteAccount","handleDeleteEmpire","useBurgerMenu","RoadmapTab","TREATY_STATUSES","TREATY_STATUS_OPTIONS","AccountList","EmpireList","TreatyList","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","empires","setEmpires","selected","setSelected","saved","localStorage","getItem","messages","setMessages","text","setText","pollingRef","messagesEndRef","accounts","setAccounts","accountsLoaded","setAccountsLoaded","account","setAccount","JSON","parse","loginUser","setLoginUser","loginPass","setLoginPass","error","setError","activeTab","setActiveTab","empirePage","setEmpirePage","editEmpire","setEditEmpire","empireInfo","setEmpireInfo","newAccountName","setNewAccountName","newAccountPass","setNewAccountPass","accountError","setAccountError","accountSuccess","setAccountSuccess","accountsTabLoading","setAccountsTabLoading","editAccount","setEditAccount","editAccountName","setEditAccountName","editAccountPass","setEditAccountPass","editAccountError","setEditAccountError","editAccountLoading","setEditAccountLoading","newEmpireName","setNewEmpireName","newEmpireError","setNewEmpireError","newEmpireLoading","setNewEmpireLoading","treaties","setTreaties","treatiesLoaded","setTreatiesLoaded","treatyDialog","setTreatyDialog","open","mode","data","treatyError","setTreatyError","treatySaving","setTreatySaving","treatySearch","setTreatySearch","empireSearch","setEmpireSearch","treatySort","setTreatySort","empireSort","setEmpireSort","fetch","Date","now","then","res","json","Array","isArray","catch","openTreatyDialog","arguments","length","undefined","closeTreatyDialog","handleTreatySave","form","_payload$participants","payload","title","content","participants","owner","username","status","id","toString","method","headers","body","stringify","success","prev","idx","findIndex","t","updated","finally","handleTreatyTransferOwner","newOwner","fetchTreaties","canEditTreaty","treaty","canTransferTreaty","showMenu","showPermissions","gmPermissions","showRoadmap","handleMenuToggle","handleMenuClose","handlePermissionsToggle","handlePermissionChange","handleRoadmapToggle","menuDropdownRef","permissionsDropdownRef","filteredBoards","getLinkedBoards","filter","_ref","a","b","getEmpireAccount","handleLinkAccount","empireName","accountName","map","e","name","handleUnlinkAccount","handleBoardSelect","pair","key","join","setItem","current","clearInterval","fetchMessages","encodeURIComponent","ok","Error","err","console","setInterval","prevMessagesLengthRef","currentMessages","scrollIntoView","behavior","postMessage","preventDefault","trim","msg","board","author","timestamp","saveEmpireInfo","info","getEmpireNames","names","emp","find","filteredTreaties","toLowerCase","includes","some","p","sortedTreaties","sort","localeCompare","filteredEmpires","sortedEmpires","showAccountsTab","tabs","label","push","className","children","tab","onClick","handleLogout","onClose","type","placeholder","value","onChange","target","onSave","saving","onBack","onEdit","onTransfer","canEdit","canTransfer","loaded","onView","onSubmit","required","disabled","stopPropagation","onLink","onUnlink","onDelete","loading","style","color","acc","accountEditPanelRef","onCancel","handleLogin","display","justifyContent","width","getFullYear"],"sources":["C:/Users/Admin/Dokumente/Stellaris/project/StellarisRP-Site/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './css/App.css';\r\nimport './css/Treaties.css';\r\nimport './css/Empires.css';\r\nimport './css/Boards.css';\r\nimport './css/Accounts.css';\r\nimport { getNationPairs } from './utils/getNationPairs';\r\nimport TreatyDialog from './components/TreatyDialog';\r\nimport TreatyView from './components/TreatyView';\r\nimport EmpireEditPanel from './components/EmpireEditPanel';\r\nimport EmpirePanel from './components/EmpirePanel';\r\nimport MenuDropdown from './components/MenuDropdown';\r\nimport {\r\n    handleCreateAccount,\r\n    handleCreateEmpire,\r\n    handleRenameAccount,\r\n    handleChangePassword,\r\n    handleDeleteAccount,\r\n    handleDeleteEmpire\r\n} from './handlers/handlers';\r\nimport { useBurgerMenu } from './components/BurgerMenu';\r\nimport RoadmapTab from './components/RoadmapTab';\r\nimport { TREATY_STATUSES } from './utils/treatyStatuses';\r\nimport { TREATY_STATUS_OPTIONS } from './utils/treatyStatusOptions';\r\nimport AccountList from './components/AccountList';\r\nimport EmpireList from './components/EmpireList';\r\nimport TreatyList from './components/TreatyList';\r\n\r\nfunction App() {\r\n    const [empires, setEmpires] = useState([]);\r\n    const [selected, setSelected] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisSelectedBoard');\r\n        return saved ? saved : null;\r\n    });\r\n    const [messages, setMessages] = useState({});\r\n    const [text, setText] = useState('');\r\n    const pollingRef = useRef();\r\n    const messagesEndRef = useRef(null);\r\n    const [accounts, setAccounts] = useState({});\r\n    const [accountsLoaded, setAccountsLoaded] = useState(false);\r\n    const [account, setAccount] = useState(() => {\r\n        const saved = localStorage.getItem('stellarisAccount');\r\n        return saved ? JSON.parse(saved) : null;\r\n    });\r\n    const [loginUser, setLoginUser] = useState('');\r\n    const [loginPass, setLoginPass] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [activeTab, setActiveTab] = useState('channels');\r\n    const [empirePage, setEmpirePage] = useState(null);\r\n    const [editEmpire, setEditEmpire] = useState(null);\r\n    const [empireInfo, setEmpireInfo] = useState({});\r\n\r\n    // Account creation and management\r\n    const [newAccountName, setNewAccountName] = useState('');\r\n    const [newAccountPass, setNewAccountPass] = useState('');\r\n    const [accountError, setAccountError] = useState('');\r\n    const [accountSuccess, setAccountSuccess] = useState('');\r\n    const [accountsTabLoading, setAccountsTabLoading] = useState(false);\r\n    const [editAccount, setEditAccount] = useState(null);\r\n    const [editAccountName, setEditAccountName] = useState('');\r\n    const [editAccountPass, setEditAccountPass] = useState('');\r\n    const [editAccountError, setEditAccountError] = useState('');\r\n    const [editAccountLoading, setEditAccountLoading] = useState(false);\r\n\r\n    // Manage Empires tab\r\n    const [newEmpireName, setNewEmpireName] = useState('');\r\n    const [newEmpireError, setNewEmpireError] = useState('');\r\n    const [newEmpireLoading, setNewEmpireLoading] = useState(false);\r\n\r\n    // --- Treaties State (NEW IMPLEMENTATION) ---\r\n    const [treaties, setTreaties] = useState([]);\r\n    const [treatiesLoaded, setTreatiesLoaded] = useState(false);\r\n    const [treatyDialog, setTreatyDialog] = useState({ open: false, mode: null, data: null });\r\n    const [treatyError, setTreatyError] = useState('');\r\n    const [treatySaving, setTreatySaving] = useState(false);\r\n\r\n    // --- Add search states ---\r\n    const [treatySearch, setTreatySearch] = useState(() => localStorage.getItem('treatySearch') || '');\r\n    const [empireSearch, setEmpireSearch] = useState(() => localStorage.getItem('empireSearch') || '');\r\n    // --- Add sort states ---\r\n    const [treatySort, setTreatySort] = useState('title');\r\n    const [empireSort, setEmpireSort] = useState('name');\r\n    // --- End states ---\r\n\r\n    // --- Fetch treaties ---\r\n    useEffect(() => {\r\n        fetch('/treaties.json?ts=' + Date.now())\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setTreaties(Array.isArray(data) ? data : []);\r\n                setTreatiesLoaded(true);\r\n            })\r\n            .catch(() => setTreatiesLoaded(true));\r\n    }, []);\r\n\r\n    // --- Fetch accounts ---\r\n    useEffect(() => {\r\n        fetch('/accounts.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setAccounts(data);\r\n                setAccountsLoaded(true);\r\n            })\r\n            .catch(() => setAccountsLoaded(true));\r\n    }, []);\r\n\r\n    // --- Fetch empires ---\r\n    useEffect(() => {\r\n        fetch('/empires.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setEmpires(Array.isArray(data) ? data : []);\r\n            });\r\n    }, []);\r\n\r\n    // --- Fetch empireInfo when needed ---\r\n    useEffect(() => {\r\n        if (activeTab === 'empires' && !editEmpire && !empirePage) {\r\n            fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => setEmpireInfo(data && typeof data === 'object' ? data : {}))\r\n                .catch(() => {});\r\n        }\r\n    }, [activeTab, editEmpire, empirePage]);\r\n\r\n    // --- Treaty CRUD ---\r\n    function openTreatyDialog(mode, data = null) {\r\n        setTreatyDialog({ open: true, mode, data });\r\n        setTreatyError('');\r\n    }\r\n    function closeTreatyDialog() {\r\n        setTreatyDialog({ open: false, mode: null, data: null });\r\n        setTreatyError('');\r\n    }\r\n    function handleTreatySave(form) {\r\n        setTreatySaving(true);\r\n        setTreatyError('');\r\n        const payload = { ...form };\r\n        if (!payload.title || !payload.content || !payload.participants?.length) {\r\n            setTreatyError('Title, content, and at least one participant are required.');\r\n            setTreatySaving(false);\r\n            return;\r\n        }\r\n        if (!payload.owner) payload.owner = account?.username || '';\r\n        if (!payload.status) payload.status = 'discussion';\r\n        if (!payload.id) payload.id = Date.now().toString();\r\n\r\n        fetch('/api/treaties', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                // --- FIX: update treaties state locally, just like accounts ---\r\n                setTreaties(prev => {\r\n                    // If editing, replace; if new, add\r\n                    const idx = prev.findIndex(t => t.id === payload.id);\r\n                    if (idx !== -1) {\r\n                        const updated = [...prev];\r\n                        updated[idx] = { ...prev[idx], ...payload };\r\n                        return updated;\r\n                    } else {\r\n                        return [...prev, payload];\r\n                    }\r\n                });\r\n                closeTreatyDialog();\r\n            } else {\r\n                setTreatyError(data.error || 'Failed to save treaty');\r\n            }\r\n        })\r\n        .catch(() => setTreatyError('Failed to save treaty'))\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n    function handleTreatyTransferOwner(id, newOwner) {\r\n        setTreatySaving(true);\r\n        fetch('/api/treaties/transfer', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id, newOwner })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) fetchTreaties();\r\n        })\r\n        .finally(() => setTreatySaving(false));\r\n    }\r\n\r\n    // --- Treaty Permissions ---\r\n    function canEditTreaty(treaty) {\r\n        if (!account) return false;\r\n        return account.username === treaty.owner || account.username === \"GameMaster\";\r\n    }\r\n    function canTransferTreaty(treaty) {\r\n        return account && account.username === \"GameMaster\";\r\n    }\r\n\r\n    const {\r\n        showMenu,\r\n        showPermissions,\r\n        gmPermissions,\r\n        showRoadmap,\r\n        handleMenuToggle,\r\n        handleMenuClose,\r\n        handlePermissionsToggle,\r\n        handlePermissionChange,\r\n        handleRoadmapToggle,\r\n        menuDropdownRef,\r\n        permissionsDropdownRef\r\n    } = useBurgerMenu(account);\r\n\r\n    // Only show boards for the empire assigned to the logged-in account, except GameMaster sees all\r\n    const filteredBoards = account\r\n        ? account.username === \"GameMaster\"\r\n            ? getLinkedBoards()\r\n            : getLinkedBoards().filter(([a, b]) =>\r\n                getEmpireAccount(a) === account.username || getEmpireAccount(b) === account.username\r\n            )\r\n        : [];\r\n\r\n    // GameMaster: link/unlink accounts to empires\r\n    function handleLinkAccount(empireName, accountName) {\r\n        fetch('/api/empires/link', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName, accountName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: accountName } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    function handleUnlinkAccount(empireName) {\r\n        fetch('/api/empires/unlink', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: null } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Save selected board to localStorage\r\n    function handleBoardSelect(pair) {\r\n        const key = pair.join('|');\r\n        setSelected(key);\r\n        localStorage.setItem('stellarisSelectedBoard', key);\r\n    }\r\n\r\n    // Fetch messages for the selected board from the server\r\n    useEffect(() => {\r\n        // Only poll messages if on channels tab and not editing/viewing empire\r\n        if (\r\n            !selected ||\r\n            activeTab !== 'channels' ||\r\n            editEmpire ||\r\n            empirePage\r\n        ) {\r\n            // Stop polling if not in correct state\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Use selected as key\r\n        const key = selected;\r\n\r\n        // Function to fetch messages\r\n        const fetchMessages = () => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => {\r\n                    if (!res.ok) throw new Error('Network response was not ok');\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                })\r\n                .catch((err) => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: []\r\n                    }));\r\n                    console.error('Failed to fetch messages:', err);\r\n                });\r\n        };\r\n\r\n        // Initial fetch\r\n        fetchMessages();\r\n\r\n        // Set up polling\r\n        pollingRef.current = setInterval(fetchMessages, 2000);\r\n\r\n        // Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\r\n        return () => {\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n        };\r\n    }, [selected, activeTab, editEmpire, empirePage]);\r\n\r\n    // Scroll to bottom only when messages actually change for the selected board\r\n    const prevMessagesLengthRef = useRef(0);\r\n    useEffect(() => {\r\n        if (!selected) return;\r\n        const currentMessages = messages[selected] || [];\r\n        if (currentMessages.length !== prevMessagesLengthRef.current) {\r\n            if (messagesEndRef.current) {\r\n                messagesEndRef.current.scrollIntoView({ behavior: 'auto' });\r\n            }\r\n            prevMessagesLengthRef.current = currentMessages.length;\r\n        }\r\n    }, [messages, selected]);\r\n\r\n    // When posting, always use the logged-in account's empire name\r\n    function postMessage(e) {\r\n        e.preventDefault();\r\n        if (!selected || !account || !text.trim()) return;\r\n        const key = selected;\r\n        const msg = {\r\n            board: key,\r\n            author: account.username,\r\n            text,\r\n            timestamp: Date.now()\r\n        };\r\n        fetch('/api/messages', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(msg)\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                });\r\n        });\r\n        setText('');\r\n    }\r\n\r\n    // Save empire info to backend and update local state\r\n    function saveEmpireInfo(name, info) {\r\n        return fetch('/api/empireInfo', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, info })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            // After saving, reload from backend with cache-busting param\r\n            return fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                });\r\n        });\r\n    }\r\n    // Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\r\n    // This prevents any reloads while editing or viewing an empire.\r\n    useEffect(() => {\r\n        if (\r\n            activeTab === 'empires' &&\r\n            !editEmpire &&\r\n            !empirePage\r\n        ) {\r\n            // Add cache-busting query param\r\n            fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                })\r\n                .catch(() => {});\r\n        }\r\n    // Only run when switching tabs, or leaving view/edit mode\r\n    }, [activeTab, editEmpire, empirePage]);\r\n\r\n    // Helper: get empire names\r\n    function getEmpireNames() {\r\n        // Only include empires that exist (already the case)\r\n        return empires.map(e => e.name);\r\n    }\r\n\r\n    // Helper: get boards from linked empires\r\n    function getLinkedBoards() {\r\n        const names = getEmpireNames();\r\n        return getNationPairs(names);\r\n    }\r\n\r\n    // Helper: get account linked to empire\r\n    function getEmpireAccount(empireName) {\r\n        const emp = empires.find(e => e.name === empireName);\r\n        return emp && emp.account ? emp.account : null;\r\n    }\r\n\r\n    // GameMaster: link/unlink accounts to empires\r\n    function handleLinkAccount(empireName, accountName) {\r\n        fetch('/api/empires/link', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName, accountName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: accountName } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n    function handleUnlinkAccount(empireName) {\r\n        fetch('/api/empires/unlink', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ empireName })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                setEmpires(prev =>\r\n                    prev.map(e => e.name === empireName ? { ...e, account: null } : e)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Save selected board to localStorage\r\n    function handleBoardSelect(pair) {\r\n        const key = pair.join('|');\r\n        setSelected(key);\r\n        localStorage.setItem('stellarisSelectedBoard', key);\r\n    }\r\n\r\n    // Fetch messages for the selected board from the server\r\n    useEffect(() => {\r\n        // Only poll messages if on channels tab and not editing/viewing empire\r\n        if (\r\n            !selected ||\r\n            activeTab !== 'channels' ||\r\n            editEmpire ||\r\n            empirePage\r\n        ) {\r\n            // Stop polling if not in correct state\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Use selected as key\r\n        const key = selected;\r\n\r\n        // Function to fetch messages\r\n        const fetchMessages = () => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => {\r\n                    if (!res.ok) throw new Error('Network response was not ok');\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                })\r\n                .catch((err) => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: []\r\n                    }));\r\n                    console.error('Failed to fetch messages:', err);\r\n                });\r\n        };\r\n\r\n        // Initial fetch\r\n        fetchMessages();\r\n\r\n        // Set up polling\r\n        pollingRef.current = setInterval(fetchMessages, 2000);\r\n\r\n        // Cleanup on unmount or when selected/activeTab/editEmpire/empirePage changes\r\n        return () => {\r\n            if (pollingRef.current) {\r\n                clearInterval(pollingRef.current);\r\n                pollingRef.current = null;\r\n            }\r\n        };\r\n    }, [selected, activeTab, editEmpire, empirePage]);\r\n\r\n    // When posting, always use the logged-in account's empire name\r\n    function postMessage(e) {\r\n        e.preventDefault();\r\n        if (!selected || !account || !text.trim()) return;\r\n        const key = selected;\r\n        const msg = {\r\n            board: key,\r\n            author: account.username,\r\n            text,\r\n            timestamp: Date.now()\r\n        };\r\n        fetch('/api/messages', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(msg)\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            fetch(`/api/messages?board=${encodeURIComponent(key)}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setMessages(prev => ({\r\n                        ...prev,\r\n                        [key]: data\r\n                    }));\r\n                });\r\n        });\r\n        setText('');\r\n    }\r\n\r\n    // Save empire info to backend and update local state\r\n    function saveEmpireInfo(name, info) {\r\n        return fetch('/api/empireInfo', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, info })\r\n        })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n            // After saving, reload from backend with cache-busting param\r\n            return fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                });\r\n        });\r\n    }\r\n\r\n    // Only load empireInfo when switching to the Empires tab and not viewing/editing any empire.\r\n    // This prevents any reloads while editing or viewing an empire.\r\n    useEffect(() => {\r\n        if (\r\n            activeTab === 'empires' &&\r\n            !editEmpire &&\r\n            !empirePage\r\n        ) {\r\n            // Add cache-busting query param\r\n            fetch(`/empireInfo.json?ts=${Date.now()}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setEmpireInfo(data && typeof data === 'object' ? data : {});\r\n                })\r\n                .catch(() => {});\r\n        }\r\n    // Only run when switching tabs, or leaving view/edit mode\r\n    }, [activeTab, editEmpire, empirePage]);\r\n\r\n    // --- Treaties: filtered and sorted by search ---\r\n    const filteredTreaties = treatySearch.trim()\r\n        ? treaties.filter(t =>\r\n            (t.title && t.title.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.content && t.content.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (t.owner && t.owner.toLowerCase().includes(treatySearch.toLowerCase())) ||\r\n            (Array.isArray(t.participants) && t.participants.some(p => p.toLowerCase().includes(treatySearch.toLowerCase())))\r\n        )\r\n        : treaties;\r\n    const sortedTreaties = [...filteredTreaties].sort((a, b) => {\r\n        if (treatySort === 'title') return a.title.localeCompare(b.title);\r\n        if (treatySort === 'owner') return a.owner.localeCompare(b.owner);\r\n        return 0;\r\n    });\r\n\r\n    // --- Empires: filtered and sorted by search ---\r\n    const filteredEmpires = empireSearch.trim()\r\n        ? getEmpireNames().filter(e => e.toLowerCase().includes(empireSearch.toLowerCase()))\r\n        : getEmpireNames();\r\n    const sortedEmpires = [...filteredEmpires].sort((a, b) => {\r\n        if (empireSort === 'name') return a.localeCompare(b);\r\n        return 0;\r\n    });\r\n\r\n    // Only show accounts tab for GameMaster\r\n    const showAccountsTab = account && account.username === \"GameMaster\";\r\n    const tabs = [\r\n        { key: 'channels', label: 'Channels' },\r\n        { key: 'empires', label: 'Empires' },\r\n        { key: 'treaties', label: 'Treaties' }\r\n    ];\r\n    if (showAccountsTab) {\r\n        tabs.push({ key: 'accounts', label: 'Manage Accounts' });\r\n        tabs.push({ key: 'manage-empires', label: 'Manage Empires' });\r\n    }\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <header className=\"header\">\r\n                <h1>Stellaris RP Chronicler</h1>\r\n                <div className=\"tabs-bar\">\r\n                    {tabs.map(tab => (\r\n                        <button\r\n                            key={tab.key}\r\n                            className={`tab-btn${activeTab === tab.key ? ' active' : ''}`}\r\n                            onClick={() => {\r\n                                setActiveTab(tab.key);\r\n                                setEmpirePage(null);\r\n                                setEditEmpire(null);\r\n                                setEditAccount(null);\r\n                                // Removed setTreatyViewId and setShowTreatyForm calls\r\n                            }}\r\n                        >\r\n                            {tab.label}\r\n                        </button>\r\n                    ))}\r\n                    <MenuDropdown\r\n                        showMenu={showMenu}\r\n                        showPermissions={showPermissions}\r\n                        showRoadmap={showRoadmap}\r\n                        handleMenuToggle={handleMenuToggle}\r\n                        handleLogout={handleLogout}\r\n                        account={account}\r\n                        handlePermissionsToggle={handlePermissionsToggle}\r\n                        gmPermissions={gmPermissions}\r\n                        handlePermissionChange={handlePermissionChange}\r\n                        handleRoadmapToggle={handleRoadmapToggle}\r\n                        menuDropdownRef={menuDropdownRef}\r\n                        permissionsDropdownRef={permissionsDropdownRef}\r\n                    />\r\n                </div>\r\n            </header>\r\n            <main className=\"main-content\">\r\n                {showRoadmap ? (\r\n                    <RoadmapTab onClose={handleRoadmapToggle} />\r\n                ) : activeTab === 'treaties' ? (\r\n                    <section className=\"treaties-section card\">\r\n                        <div className=\"treaties-header\">\r\n                            <h2>Treaties, Contracts & Agreements</h2>\r\n                            {account && (\r\n                                <button\r\n                                    className=\"empire-save-btn\"\r\n                                    onClick={() => openTreatyDialog('new')}\r\n                                >\r\n                                    + Add New Treaty\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                        {/* --- Treaty Search Input & Sort --- */}\r\n                        <div className=\"treaty-search-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search treaties by title, content, owner, or participant...\"\r\n                                value={treatySearch}\r\n                                onChange={e => setTreatySearch(e.target.value)}\r\n                                className=\"treaty-search-input\"\r\n                            />\r\n                            {treatySearch && (\r\n                                <button\r\n                                    className=\"treaty-search-clear-btn\"\r\n                                    onClick={() => setTreatySearch('')}\r\n                                    title=\"Clear search\"\r\n                                >✕</button>\r\n                            )}\r\n                            <select\r\n                                value={treatySort}\r\n                                onChange={e => setTreatySort(e.target.value)}\r\n                                className=\"treaty-sort-select\"\r\n                            >\r\n                                <option value=\"title\">Sort by Title</option>\r\n                                <option value=\"owner\">Sort by Owner</option>\r\n                            </select>\r\n                        </div>\r\n                        {/* Dialogs */}\r\n                        {treatyDialog.open && treatyDialog.mode !== 'view' && (\r\n                            <TreatyDialog\r\n                                open={treatyDialog.open}\r\n                                mode={treatyDialog.mode}\r\n                                data={treatyDialog.data}\r\n                                onSave={handleTreatySave}\r\n                                onClose={closeTreatyDialog}\r\n                                error={treatyError}\r\n                                saving={treatySaving}\r\n                                empires={empires.map(e => e.name)}\r\n                                accounts={accounts}\r\n                                account={account}\r\n                            />\r\n                        )}\r\n                        {treatyDialog.open && treatyDialog.mode === 'view' && (\r\n                            <TreatyView\r\n                                treaty={treatyDialog.data}\r\n                                onBack={closeTreatyDialog}\r\n                                onEdit={() => openTreatyDialog('edit', treatyDialog.data)}\r\n                                onTransfer={newOwner => handleTreatyTransferOwner(treatyDialog.data.id, newOwner)}\r\n                                canEdit={canEditTreaty(treatyDialog.data)}\r\n                                canTransfer={canTransferTreaty(treatyDialog.data)}\r\n                                accounts={accounts}\r\n                            />\r\n                        )}\r\n                        {/* List */}\r\n                        <TreatyList\r\n                            treaties={sortedTreaties}\r\n                            loaded={treatiesLoaded}\r\n                            onView={treaty => setTreatyDialog({ open: true, mode: 'view', data: treaty })}\r\n                            canEditTreaty={canEditTreaty}\r\n                            onEdit={openTreatyDialog}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'manage-empires' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Empires</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateEmpire(\r\n                                e,\r\n                                newEmpireName,\r\n                                empires,\r\n                                setNewEmpireError,\r\n                                setNewEmpireLoading,\r\n                                setEmpires,\r\n                                setNewEmpireName\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"New empire name\"\r\n                                    value={newEmpireName}\r\n                                    onChange={e => setNewEmpireName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={newEmpireLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={newEmpireLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create Empire</button>\r\n                            </div>\r\n                        </form>\r\n                        {newEmpireError && <div className=\"login-error\">{newEmpireError}</div>}\r\n                        <h3>Empires & Account Assignment</h3>\r\n                        <EmpireList\r\n                            empires={empires}\r\n                            accounts={accounts}\r\n                            onLink={handleLinkAccount}\r\n                            onUnlink={handleUnlinkAccount}\r\n                            onDelete={handleDeleteEmpire}\r\n                            loading={newEmpireLoading}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'accounts' && showAccountsTab ? (\r\n                    <section className=\"account-manage-section card\">\r\n                        <h2>Manage Accounts</h2>\r\n                        <form\r\n                            onSubmit={e => handleCreateAccount(\r\n                                e,\r\n                                newAccountName,\r\n                                newAccountPass,\r\n                                accounts,\r\n                                setAccountError,\r\n                                setAccountSuccess,\r\n                                setAccountsTabLoading,\r\n                                setAccounts,\r\n                                setNewAccountName,\r\n                                setNewAccountPass\r\n                            )}\r\n                            className=\"account-form\"\r\n                        >\r\n                            <div className=\"account-form-fields\">\r\n                                <input\r\n                                    placeholder=\"Account name\"\r\n                                    value={newAccountName}\r\n                                    onChange={e => setNewAccountName(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={newAccountPass}\r\n                                    onChange={e => setNewAccountPass(e.target.value)}\r\n                                    required\r\n                                    className=\"login-input\"\r\n                                    disabled={accountsTabLoading}\r\n                                />\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"login-btn\"\r\n                                    disabled={accountsTabLoading}\r\n                                    onClick={e => e.stopPropagation()}\r\n                                >Create</button>\r\n                            </div>\r\n                        </form>\r\n                        {accountError && <div className=\"login-error\">{accountError}</div>}\r\n                        {accountSuccess && <div className=\"login-loading\" style={{color:'limegreen'}}>{accountSuccess}</div>}\r\n                        <h3>All Accounts</h3>\r\n                        <AccountList\r\n                            accounts={accounts}\r\n                            onEdit={acc => {\r\n                                setEditAccount(acc);\r\n                                setEditAccountName(acc);\r\n                                setEditAccountPass('');\r\n                                setEditAccountError('');\r\n                            }}\r\n                            onDelete={handleDeleteAccount}\r\n                            editAccount={editAccount}\r\n                            editAccountName={editAccountName}\r\n                            editAccountPass={editAccountPass}\r\n                            editAccountError={editAccountError}\r\n                            editAccountLoading={editAccountLoading}\r\n                            setEditAccountName={setEditAccountName}\r\n                            setEditAccountPass={setEditAccountPass}\r\n                            setEditAccount={setEditAccount}\r\n                            setAccountSuccess={setAccountSuccess}\r\n                            setAccounts={setAccounts}\r\n                            setEditAccountError={setEditAccountError}\r\n                            setEditAccountLoading={setEditAccountLoading}\r\n                            accountEditPanelRef={accountEditPanelRef}\r\n                            handleRenameAccount={handleRenameAccount}\r\n                            handleChangePassword={handleChangePassword}\r\n                        />\r\n                    </section>\r\n                ) : activeTab === 'empires' ? (\r\n                    editEmpire ? (\r\n                        <section className=\"empires-info-section card\">\r\n                            <h2>Edit {editEmpire}</h2>\r\n                            <EmpireEditPanel\r\n                                name={editEmpire}\r\n                                onCancel={() => setEditEmpire(null)}\r\n                                empireInfo={empireInfo}\r\n                                saveEmpireInfo={saveEmpireInfo}\r\n                            />\r\n                        </section>\r\n                    ) : empirePage ? (\r\n                        <EmpirePanel\r\n                            name={empirePage}\r\n                            canEdit={account && account.username === empirePage}\r\n                            empireInfo={empireInfo}\r\n                            getEmpireAccount={getEmpireAccount}\r\n                            setEmpirePage={setEmpirePage}\r\n                            setEditEmpire={setEditEmpire}\r\n                        />\r\n                    ) : (\r\n                        <section className=\"empires-info-section card\">\r\n                            {/* --- Empire Search Input & Sort --- */}\r\n                            <div className=\"empire-search-container\">\r\n                                <h2 className=\"section-title\">Empires Overview</h2>\r\n                                <span className=\"empire-total-count\">\r\n                                    Total Empires: <b>{sortedEmpires.length}</b>\r\n                                </span>\r\n                                <div className=\"empire-search-fields\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search empires by name...\"\r\n                                        value={empireSearch}\r\n                                        onChange={e => setEmpireSearch(e.target.value)}\r\n                                        className=\"empire-search-input\"\r\n                                    />\r\n                                    {empireSearch && (\r\n                                        <button\r\n                                            className=\"empire-search-clear-btn\"\r\n                                            onClick={() => setEmpireSearch('')}\r\n                                            title=\"Clear search\"\r\n                                        >✕</button>\r\n                                    )}\r\n                                    <select\r\n                                        value={empireSort}\r\n                                        onChange={e => setEmpireSort(e.target.value)}\r\n                                        className=\"empire-sort-select\"\r\n                                    >\r\n                                        <option value=\"name\">Sort by Name</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <EmpireList\r\n                                empires={sortedEmpires.map(name => empires.find(e => e.name === name))}\r\n                                accounts={accounts}\r\n                                onLink={handleLinkAccount}\r\n                                onUnlink={handleUnlinkAccount}\r\n                                onDelete={handleDeleteEmpire}\r\n                                loading={newEmpireLoading}\r\n                                account={account}\r\n                                setEmpirePage={setEmpirePage}\r\n                                setEditEmpire={setEditEmpire}\r\n                                getEmpireAccount={getEmpireAccount}\r\n                            />\r\n                        </section>\r\n                    )\r\n                ) : (\r\n                    <>\r\n                        {!account ? (\r\n                            <section className=\"account-section card\">\r\n                                <h2 className=\"login-title\">Login</h2>\r\n                                <form onSubmit={handleLogin} className=\"account-form login-form\">\r\n                                    <div className=\"login-fields\">\r\n                                        <input\r\n                                            placeholder=\"Empire name\"\r\n                                            value={loginUser}\r\n                                            onChange={e => setLoginUser(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            value={loginPass}\r\n                                            onChange={e => setLoginPass(e.target.value)}\r\n                                            required\r\n                                            disabled={!accountsLoaded}\r\n                                            className=\"login-input\"\r\n                                        />\r\n                                    </div>\r\n                                    <button type=\"submit\" disabled={!accountsLoaded} className=\"login-btn\">Login</button>\r\n                                </form>\r\n                                {!accountsLoaded && <div className=\"login-loading\">Loading accounts...</div>}\r\n                                {error && <div className=\"login-error\">{error}</div>}\r\n                            </section>\r\n                        ) : (\r\n                            // Center the channels page\r\n                            <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                                <section className=\"boards-section\">\r\n                                    {/* ...existing code for boards/channels... */}\r\n                                </section>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </main>\r\n            <footer className=\"footer\">\r\n                <span>Stellaris RP Chronicler &copy; {new Date().getFullYear()}</span>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}