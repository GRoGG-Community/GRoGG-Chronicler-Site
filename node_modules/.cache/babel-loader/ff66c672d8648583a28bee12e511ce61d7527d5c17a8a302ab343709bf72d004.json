{"ast":null,"code":"// --- Account handlers ---\nexport function handleCreateAccount(e,newAccountName,newAccountPass,accounts,setAccountError,setAccountSuccess,setAccountsTabLoading,setAccounts,setNewAccountName,setNewAccountPass){e.preventDefault();setAccountError('');setAccountSuccess('');setAccountsTabLoading(true);const name=newAccountName.trim();const pass=newAccountPass.trim();if(!name||!pass){setAccountError('Account name and password are required.');setAccountsTabLoading(false);return;}// Fetch latest accounts.json\nfetch('/accounts.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(data[name]){setAccountError('Account name already exists.');setAccountsTabLoading(false);return;}// Use backend API for creation\nreturn fetch('/api/accounts',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,pass})}).then(res=>res.json()).then(result=>{if(result.success){setAccounts({...data,[name]:pass});setNewAccountName('');setNewAccountPass('');setAccountSuccess('Account created successfully.');}else{setAccountError(result.error||'Failed to create account.');}});}).catch(()=>setAccountError('Failed to create account.')).finally(()=>setAccountsTabLoading(false));}export function handleDeleteAccount(acc,setEditAccountLoading,setEditAccountError,setAccounts,setAccountSuccess){setEditAccountLoading(true);setEditAccountError('');if(!window.confirm(`Delete account \"${acc}\"? This cannot be undone.`)){setEditAccountLoading(false);return;}fetch('/accounts.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(!data[acc]){setEditAccountError('Account does not exist.');setEditAccountLoading(false);return;}// Use backend API for deletion\nreturn fetch('/api/accounts/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:acc})}).then(res=>res.json()).then(result=>{if(result.success){const updated={...data};delete updated[acc];setAccounts(updated);setAccountSuccess('Account deleted.');}else{setEditAccountError(result.error||'Failed to delete account.');}});}).catch(()=>setEditAccountError('Failed to delete account.')).finally(()=>setEditAccountLoading(false));}export function handleRenameAccount(e,editAccount,editAccountName,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess){e.preventDefault();setEditAccountLoading(true);setEditAccountError('');const newName=editAccountName.trim();if(!newName){setEditAccountError('Account name is required.');setEditAccountLoading(false);return;}fetch('/accounts.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(!data[editAccount]){setEditAccountError('Account does not exist.');setEditAccountLoading(false);return;}if(data[newName]){setEditAccountError('Account name already exists.');setEditAccountLoading(false);return;}// Use backend API for rename\nreturn fetch('/api/accounts/rename',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({oldName:editAccount,newName})}).then(res=>res.json()).then(result=>{if(result.success){const updated={...data};updated[newName]=updated[editAccount];delete updated[editAccount];setAccounts(updated);setEditAccount(null);setAccountSuccess('Account renamed successfully.');}else{setEditAccountError(result.error||'Failed to rename account.');}});}).catch(()=>setEditAccountError('Failed to rename account.')).finally(()=>setEditAccountLoading(false));}export function handleChangePassword(e,editAccount,editAccountPass,setEditAccountLoading,setEditAccountError,setAccounts,setEditAccount,setAccountSuccess){e.preventDefault();setEditAccountLoading(true);setEditAccountError('');const newPass=editAccountPass.trim();if(!newPass){setEditAccountError('Password is required.');setEditAccountLoading(false);return;}fetch('/accounts.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(!data[editAccount]){setEditAccountError('Account does not exist.');setEditAccountLoading(false);return;}// Use backend API for password change\nreturn fetch('/api/accounts/password',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:editAccount,pass:newPass})}).then(res=>res.json()).then(result=>{if(result.success){setAccounts({...data,[editAccount]:newPass});setEditAccount(null);setAccountSuccess('Password changed successfully.');}else{setEditAccountError(result.error||'Failed to change password.');}});}).catch(()=>setEditAccountError('Failed to change password.')).finally(()=>setEditAccountLoading(false));}// --- Empire handlers ---\nexport function handleCreateEmpire(e,newEmpireName,empires,setNewEmpireError,setNewEmpireLoading,setEmpires,setNewEmpireName){e.preventDefault();setNewEmpireError('');setNewEmpireLoading(true);const name=newEmpireName.trim();if(!name){setNewEmpireError('Empire name is required.');setNewEmpireLoading(false);return;}fetch('/empires.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(data.some(e=>e.name===name)){setNewEmpireError('Empire name already exists.');setNewEmpireLoading(false);return;}// Use backend API for creation\nreturn fetch('/api/empires/create',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name})}).then(res=>res.json()).then(result=>{if(result.success){setEmpires([...data,{name,account:null}]);setNewEmpireName('');}else{setNewEmpireError(result.error||'Failed to create empire.');}});}).catch(()=>setNewEmpireError('Failed to create empire.')).finally(()=>setNewEmpireLoading(false));}export function handleDeleteEmpire(empireName,setNewEmpireLoading,setNewEmpireError,setEmpires){setNewEmpireLoading(true);setNewEmpireError('');if(!window.confirm(`Delete empire \"${empireName}\"? This cannot be undone.`)){setNewEmpireLoading(false);return;}fetch('/empires.json?ts='+Date.now()).then(res=>res.json()).then(data=>{if(!data.some(e=>e.name===empireName)){setNewEmpireError('Empire does not exist.');setNewEmpireLoading(false);return;}// Use backend API for deletion\nreturn fetch('/api/empires/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:empireName})}).then(res=>res.json()).then(result=>{if(result.success){setEmpires(data.filter(e=>e.name!==empireName));}else{setNewEmpireError(result.error||'Failed to delete empire.');}});}).catch(()=>setNewEmpireError('Failed to delete empire.')).finally(()=>setNewEmpireLoading(false));}","map":{"version":3,"names":["handleCreateAccount","e","newAccountName","newAccountPass","accounts","setAccountError","setAccountSuccess","setAccountsTabLoading","setAccounts","setNewAccountName","setNewAccountPass","preventDefault","name","trim","pass","fetch","Date","now","then","res","json","data","method","headers","body","JSON","stringify","result","success","error","catch","finally","handleDeleteAccount","acc","setEditAccountLoading","setEditAccountError","window","confirm","updated","handleRenameAccount","editAccount","editAccountName","setEditAccount","newName","oldName","handleChangePassword","editAccountPass","newPass","handleCreateEmpire","newEmpireName","empires","setNewEmpireError","setNewEmpireLoading","setEmpires","setNewEmpireName","some","account","handleDeleteEmpire","empireName","filter"],"sources":["C:/Users/Admin/Dokumente/Stellaris/project/StellarisRP-Site/src/handlers.js"],"sourcesContent":["// --- Account handlers ---\r\nexport function handleCreateAccount(\r\n    e,\r\n    newAccountName,\r\n    newAccountPass,\r\n    accounts,\r\n    setAccountError,\r\n    setAccountSuccess,\r\n    setAccountsTabLoading,\r\n    setAccounts,\r\n    setNewAccountName,\r\n    setNewAccountPass\r\n) {\r\n    e.preventDefault();\r\n    setAccountError('');\r\n    setAccountSuccess('');\r\n    setAccountsTabLoading(true);\r\n    const name = newAccountName.trim();\r\n    const pass = newAccountPass.trim();\r\n    if (!name || !pass) {\r\n        setAccountError('Account name and password are required.');\r\n        setAccountsTabLoading(false);\r\n        return;\r\n    }\r\n    // Fetch latest accounts.json\r\n    fetch('/accounts.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data[name]) {\r\n                setAccountError('Account name already exists.');\r\n                setAccountsTabLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for creation\r\n            return fetch('/api/accounts', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name, pass })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    setAccounts({ ...data, [name]: pass });\r\n                    setNewAccountName('');\r\n                    setNewAccountPass('');\r\n                    setAccountSuccess('Account created successfully.');\r\n                } else {\r\n                    setAccountError(result.error || 'Failed to create account.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setAccountError('Failed to create account.'))\r\n        .finally(() => setAccountsTabLoading(false));\r\n}\r\n\r\nexport function handleDeleteAccount(\r\n    acc,\r\n    setEditAccountLoading,\r\n    setEditAccountError,\r\n    setAccounts,\r\n    setAccountSuccess\r\n) {\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    if (!window.confirm(`Delete account \"${acc}\"? This cannot be undone.`)) {\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/accounts.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data[acc]) {\r\n                setEditAccountError('Account does not exist.');\r\n                setEditAccountLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for deletion\r\n            return fetch('/api/accounts/delete', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name: acc })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    const updated = { ...data };\r\n                    delete updated[acc];\r\n                    setAccounts(updated);\r\n                    setAccountSuccess('Account deleted.');\r\n                } else {\r\n                    setEditAccountError(result.error || 'Failed to delete account.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setEditAccountError('Failed to delete account.'))\r\n        .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\nexport function handleRenameAccount(\r\n    e,\r\n    editAccount,\r\n    editAccountName,\r\n    setEditAccountLoading,\r\n    setEditAccountError,\r\n    setAccounts,\r\n    setEditAccount,\r\n    setAccountSuccess\r\n) {\r\n    e.preventDefault();\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    const newName = editAccountName.trim();\r\n    if (!newName) {\r\n        setEditAccountError('Account name is required.');\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/accounts.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data[editAccount]) {\r\n                setEditAccountError('Account does not exist.');\r\n                setEditAccountLoading(false);\r\n                return;\r\n            }\r\n            if (data[newName]) {\r\n                setEditAccountError('Account name already exists.');\r\n                setEditAccountLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for rename\r\n            return fetch('/api/accounts/rename', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ oldName: editAccount, newName })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    const updated = { ...data };\r\n                    updated[newName] = updated[editAccount];\r\n                    delete updated[editAccount];\r\n                    setAccounts(updated);\r\n                    setEditAccount(null);\r\n                    setAccountSuccess('Account renamed successfully.');\r\n                } else {\r\n                    setEditAccountError(result.error || 'Failed to rename account.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setEditAccountError('Failed to rename account.'))\r\n        .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\nexport function handleChangePassword(\r\n    e,\r\n    editAccount,\r\n    editAccountPass,\r\n    setEditAccountLoading,\r\n    setEditAccountError,\r\n    setAccounts,\r\n    setEditAccount,\r\n    setAccountSuccess\r\n) {\r\n    e.preventDefault();\r\n    setEditAccountLoading(true);\r\n    setEditAccountError('');\r\n    const newPass = editAccountPass.trim();\r\n    if (!newPass) {\r\n        setEditAccountError('Password is required.');\r\n        setEditAccountLoading(false);\r\n        return;\r\n    }\r\n    fetch('/accounts.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data[editAccount]) {\r\n                setEditAccountError('Account does not exist.');\r\n                setEditAccountLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for password change\r\n            return fetch('/api/accounts/password', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name: editAccount, pass: newPass })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    setAccounts({ ...data, [editAccount]: newPass });\r\n                    setEditAccount(null);\r\n                    setAccountSuccess('Password changed successfully.');\r\n                } else {\r\n                    setEditAccountError(result.error || 'Failed to change password.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setEditAccountError('Failed to change password.'))\r\n        .finally(() => setEditAccountLoading(false));\r\n}\r\n\r\n// --- Empire handlers ---\r\nexport function handleCreateEmpire(\r\n    e,\r\n    newEmpireName,\r\n    empires,\r\n    setNewEmpireError,\r\n    setNewEmpireLoading,\r\n    setEmpires,\r\n    setNewEmpireName\r\n) {\r\n    e.preventDefault();\r\n    setNewEmpireError('');\r\n    setNewEmpireLoading(true);\r\n    const name = newEmpireName.trim();\r\n    if (!name) {\r\n        setNewEmpireError('Empire name is required.');\r\n        setNewEmpireLoading(false);\r\n        return;\r\n    }\r\n    fetch('/empires.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.some(e => e.name === name)) {\r\n                setNewEmpireError('Empire name already exists.');\r\n                setNewEmpireLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for creation\r\n            return fetch('/api/empires/create', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    setEmpires([...data, { name, account: null }]);\r\n                    setNewEmpireName('');\r\n                } else {\r\n                    setNewEmpireError(result.error || 'Failed to create empire.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setNewEmpireError('Failed to create empire.'))\r\n        .finally(() => setNewEmpireLoading(false));\r\n}\r\n\r\nexport function handleDeleteEmpire(\r\n    empireName,\r\n    setNewEmpireLoading,\r\n    setNewEmpireError,\r\n    setEmpires\r\n) {\r\n    setNewEmpireLoading(true);\r\n    setNewEmpireError('');\r\n    if (!window.confirm(`Delete empire \"${empireName}\"? This cannot be undone.`)) {\r\n        setNewEmpireLoading(false);\r\n        return;\r\n    }\r\n    fetch('/empires.json?ts=' + Date.now())\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data.some(e => e.name === empireName)) {\r\n                setNewEmpireError('Empire does not exist.');\r\n                setNewEmpireLoading(false);\r\n                return;\r\n            }\r\n            // Use backend API for deletion\r\n            return fetch('/api/empires/delete', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ name: empireName })\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.success) {\r\n                    setEmpires(data.filter(e => e.name !== empireName));\r\n                } else {\r\n                    setNewEmpireError(result.error || 'Failed to delete empire.');\r\n                }\r\n            });\r\n        })\r\n        .catch(() => setNewEmpireError('Failed to delete empire.'))\r\n        .finally(() => setNewEmpireLoading(false));\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}